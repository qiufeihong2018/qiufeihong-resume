{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/better-scroll/dist/bscroll.js","node_modules/marked/lib/marked.js","node_modules/prismjs/prism.js","src/load/resume.ts","src/load/style.ts","src/scripts/animateResume/index.ts","src/scripts/animateResume/untils/mobileEndAnimate.ts","src/scripts/animateResume/untils/untils.ts","src/scripts/index.ts"],"names":[],"mappingstwka,QAAA,MAAM,GAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuH5B,CAAA;;;;;ACvHD,mEAA+D;AAE/D,MAAM,SAAS,GAAY,iBAAQ,EAAE,CAAA;AAExB,QAAA,MAAM,GAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4CzB,SAAS,CAAC,CAAC;IACb;4BAC0B;IAC1B,CAAC;QACD,eAAe;;;;;;;;;;;eAWF,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,wCAAwC;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA4B/E,SAAS,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,+CAA+C;;;;;;;;;;eAUhF,SAAS,CAAA,CAAC,CAAA,aAAa,CAAA,CAAC,CAAA,aAAa;;GAEjD,SAAS,CAAC,CAAC;IACZ;;WAES;IACT,CAAC,CAAC;;;;0BAIsB;;CAEzB,CAAA;AAEY,QAAA,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmClB,CAAA;;;;;ACrJJ,4CAMyB;AACzB,gEAAwD;AACxD,iCAAiC;AACjC,iCAAgC;AAEhC,MAAqB,aAAa;IAKhC,YAAY,SAAkB,EAAE,OAAoB;QAClD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAA;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;IACrB,CAAC;IAEO,IAAI,CAAC,QAA2B,EAAC,EAAY;QACnD,IAAI,QAAQ,CAAC,MAAM,EAAE;YACnB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;iBACvB,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;iBAC3C,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;SACnC;aAAM;YAEL,IAAI,iBAAQ,EAAE,EAAE;gBACd,0BAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;aAC1F;YAED,EAAE,IAAI,EAAE,EAAE,CAAA;SACX;IACH,CAAC;IAEO,QAAQ,CAAC,IAAgB;QAC/B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,MAAM,SAAS,GAAG,wBAAe,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;YAC1D,IAAI,GAAG,GAAG,CAAC,CAAA;YACX,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAA;YAC5B,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAA;YAC3D,MAAM,QAAQ,GAAG,EAAE,CAAA;YAEnB,IAAI,OAAgB,CAAA;YACpB,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE;gBACvB,OAAO,GAAG,mBAAU,EAAE,CAAA;aACvB;YAED,MAAM,SAAS,GAAG,GAAS,EAAE;gBAC3B,UAAU,CAAC,GAAG,EAAE;oBACd,GAAG,IAAI,CAAC,CAAA;oBACR,IAAI,GAAG,IAAI,GAAG,EAAE;wBAEd,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;wBAElC,IAAI,IAAY,CAAA;wBAEhB,QAAQ,IAAI,CAAC,IAAI,EAAE;4BACjB,KAAK,KAAK;gCACR,oBAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;gCACzB,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;gCAChD,MAAK;4BACP,KAAK,IAAI;gCACP,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;gCAClB,MAAK;yBACR;wBAED,IAAI,YAAY,GAAG,oBAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;wBAE7C,SAAS,CAAC,SAAS,GAAG,MAAM,CAAA;wBAE5B,SAAS,CAAC,SAAS,GAAG,aAAa,GAAG,IAAI,CAAA;wBAE1C,IAAI,IAAI,CAAC,MAAM,EAAE;4BACf,MAAM,EAAE,CAAA;yBACT;6BAAM;4BACL,UAAU,CAAC,GAAG,EAAE;gCACd,SAAS,EAAE,CAAA;4BACb,CAAC,EAAE,YAAY,CAAC,CAAA;yBACjB;qBAEF;yBAAM;wBACL,OAAO,OAAO,EAAE,CAAA;qBACjB;gBACH,CAAC,EAAE,QAAQ,CAAC,CAAA;YACd,CAAC,CAAA;YAED,SAAS,EAAE,CAAA;QACb,CAAC,CAAC,CAAA;IACJ,CAAC;IAEO,WAAW;QACjB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACpC,MAAM,SAAS,GAAG,wBAAe,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,CAAA;YAE1D,QAAQ,IAAI,CAAC,IAAI,EAAE;gBACjB,KAAK,KAAK;oBACR,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;oBAC/B,MAAK;gBACP,KAAK,IAAI;oBACP,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;oBAC5B,MAAK;aACR;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,iBAAQ,EAAE,EAAE;YACd,0BAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;SAC1F;IACH,CAAC;IAEO,SAAS,CAAC,IAAgB,EAAE,SAAkB;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAA;QAC1B,MAAM,OAAO,GAAG,mBAAU,EAAE,CAAA;QAC5B,IAAI,aAAa,GAAG,EAAE,CAAA;QACtB,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;QAE3D,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,aAAa,GAAG,SAAS,CAAC,SAAS,CAAA;SACpC;QAED,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAA;QAC5B,SAAS,CAAC,SAAS,GAAG,aAAa,GAAG,IAAI,CAAA;IAC5C,CAAC;IAEO,MAAM,CAAC,IAAgB,EAAE,SAAkB;QACjD,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACzC,CAAC;IAEM,OAAO,CAAC,EAAY;QACzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAC,EAAE,CAAC,CAAA;IACpC,CAAC;IAEM,IAAI;QACT,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;IACpB,CAAC;CACF;AA9HD,gCA8HC;;;;;AC1ID,yCAAwC;AAExC,SAAwB,gBAAgB,CAAC,OAAe,EAAE,QAAgB;IACxE,MAAM,IAAI,GAAgB,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IACxD,MAAM,cAAc,GAAgB,QAAQ,CAAC,aAAa,CAAC,IAAI,OAAO,EAAE,CAAC,CAAA;IACzE,MAAM,KAAK,GAAgB,QAAQ,CAAC,aAAa,CAAC,IAAI,OAAO,MAAM,CAAC,CAAA;IACpE,MAAM,WAAW,GAAgB,QAAQ,CAAC,aAAa,CAAC,IAAI,QAAQ,EAAE,CAAC,CAAA;IACvE,MAAM,EAAE,GAAgB,QAAQ,CAAC,aAAa,CAAC,IAAI,QAAQ,MAAM,CAAC,CAAA;IAElE,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,iBAAiB,CAAA;IAEtC,IAAI,GAAG,GAAG;QACR,KAAK,EAAE,mBAAmB;QAC1B,MAAM,EAAE,mBAAmB;QAC3B,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,gBAAgB;QACxB,UAAU,EAAE,iBAAiB;QAC7B,QAAQ,EAAE,UAAU;QACpB,IAAI,EAAE,MAAM;KACb,CAAA;IACD,MAAM,MAAM,GAAS,MAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAE1F,cAAc,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAA;IACrC,WAAW,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAA;IAElC,cAAc,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAA;IACjC,WAAW,CAAC,KAAK,CAAC,GAAG,GAAG,mBAAmB,CAAA;IAE3C,MAAM,MAAM,GAAG;QACb,UAAU,EAAE,QAAQ;QACpB,SAAS,EAAE,MAAM;QACjB,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,QAAQ;QAClB,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,MAAM;QACd,MAAM,EAAE,MAAM;KACf,CAAA;IACD,IAAI,SAAS,GAAS,MAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAgB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAE9F,KAAK,CAAC,KAAK,CAAC,OAAO,GAAG,SAAS,CAAA;IAC/B,EAAE,CAAC,KAAK,CAAC,OAAO,GAAG,SAAS,CAAA;IAE5B,KAAK,CAAC,KAAK,CAAC,SAAS,GAAG,eAAe,CAAA;IACvC,EAAE,CAAC,KAAK,CAAC,aAAa,GAAG,OAAO,CAAA;IAGhC,UAAU,CAAC,GAAG,EAAE;QACd,WAAW,CAAC,KAAK,CAAC,UAAU,GAAG,wBAAwB,CAAA;QACvD,cAAc,CAAC,KAAK,CAAC,UAAU,GAAG,wBAAwB,CAAA;QAC1D,WAAW,CAAC,KAAK,CAAC,SAAS,GAAG,gCAAgC,CAAA;QAC9D,cAAc,CAAC,KAAK,CAAC,SAAS,GAAG,gCAAgC,CAAA;IACnE,CAAC,EAAE,GAAG,CAAC,CAAA;IAEP,MAAM,WAAW,GAAG,IAAU,OAAQ,CAAC,cAAc,EAAE;QACrD,UAAU,EAAE;YACV,SAAS,EAAE,EAAE;SACd;KACF,CAAC,CAAA;IAEF,MAAM,QAAQ,GAAG,IAAU,OAAQ,CAAC,WAAW,EAAE;QAC/C,eAAe,EAAE;YACf,SAAS,EAAE,EAAE;SACd;KACF,CAAC,CAAA;IAEF,WAAW,CAAC,EAAE,CAAC,WAAW,EAAE;QAC1B,WAAW,CAAC,KAAK,CAAC,SAAS,GAAG,gCAAgC,CAAA;QAC9D,cAAc,CAAC,KAAK,CAAC,SAAS,GAAG,gCAAgC,CAAA;QACjE,WAAW,CAAC,YAAY,EAAE,CAAA;IAC5B,CAAC,CAAC,CAAA;IACF,QAAQ,CAAC,EAAE,CAAC,aAAa,EAAE;QACzB,WAAW,CAAC,KAAK,CAAC,SAAS,GAAG,eAAe,CAAA;QAC7C,cAAc,CAAC,KAAK,CAAC,SAAS,GAAG,eAAe,CAAA;QAChD,QAAQ,CAAC,cAAc,EAAE,CAAA;IAC3B,CAAC,CAAC,CAAA;AACJ,CAAC;AAzED,mCAyEC;;;;;AC3ED,eAAe;AACf,SAAgB,WAAW,CAAC,GAAW,EAAE,QAAQ,GAAG,EAAE;IACpD,IAAI,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC;QAAE,OAAO,QAAQ,GAAG,EAAE,CAAA;IAC/C,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC;QAAE,OAAO,QAAQ,GAAG,EAAE,CAAA;IAChD,IAAI,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC;QAAE,OAAO,QAAQ,GAAG,EAAE,CAAA;IACjD,OAAO,CAAC,CAAA;AACV,CAAC;AALD,kCAKC;AAED,eAAe;AACf,SAAgB,WAAW,CAAC,KAAa,EAAE,EAAW;IACpD,EAAE,CAAC,SAAS,GAAG,KAAK,CAAA;AACtB,CAAC;AAFD,kCAEC;AAED,UAAU;AACV,SAAgB,eAAe,CAAC,SAAkB,EAAE,EAAU;IAE5D,IAAI,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE;QAC9C,IAAI,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;QACtC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAA;QAEV,IAAI,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;QACvC,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,MAAM,CAAA;QAEpB,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;QAEd,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;KACrB;IAED,OAAO,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;AAC9C,CAAC;AAfD,0CAeC;AAED,YAAY;AACZ,SAAgB,QAAQ;IACtB,OAAO,gEAAgE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;AAClH,CAAC;AAFD,4BAEC;AAED,iBAAiB;AACjB,SAAgB,UAAU;IACxB,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;IAChD,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IAC3C,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;IAC1B,MAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;IAEnD,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;AACtC,CAAC;AAPD,gCAOC;;;;;AC3CD,iDAAiD;AACjD,yCAA4C;AAC5C,2CAAsC;AAEtC,MAAM,KAAK,GAAe;IACxB,IAAI,EAAE,cAAM;IACZ,IAAI,EAAE,KAAK;IACX,EAAE,EAAE,iBAAiB;IACrB,OAAO,EAAE,IAAI;CACd,CAAA;AACD,MAAM,KAAK,GAAe;IACxB,IAAI,EAAE,eAAM;IACZ,IAAI,EAAE,IAAI;IACV,EAAE,EAAE,kBAAkB;IACtB,OAAO,EAAE,IAAI;CACd,CAAA;AACD,MAAM,KAAK,GAAe;IACxB,IAAI,EAAE,cAAM;IACZ,IAAI,EAAE,KAAK;IACX,EAAE,EAAE,iBAAiB;IACrB,OAAO,EAAE,KAAK;CACf,CAAA;AAED,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAA;AAE9D,MAAM,EAAE,GAAG,IAAI,eAAa,CAAC,SAAS,EAAE;IACtC,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;IAC9B,aAAa,EAAE;QACb,OAAO,EAAE,iBAAiB;QAC1B,QAAQ,EAAE,kBAAkB;KAC7B;CACF,CAAC,CAAA;AAEF,MAAM,OAAO,GAAgB,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAA;AAEhE,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE;IAChC,EAAE,CAAC,IAAI,EAAE,CAAA;IACT,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAA;AAChC,CAAC,CAAC,CAAA;AAEF,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE;IACd,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAA;AAChC,CAAC,CAAC,CAAA","file":"index.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*!\n * better-normal-scroll v1.12.6\n * (c) 2016-2018 ustbhuangyi\n * Released under the MIT License.\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.BScroll = factory());\n}(this, (function () { 'use strict';\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nfunction eventMixin(BScroll) {\n  BScroll.prototype.on = function (type, fn) {\n    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;\n\n    if (!this._events[type]) {\n      this._events[type] = [];\n    }\n\n    this._events[type].push([fn, context]);\n  };\n\n  BScroll.prototype.once = function (type, fn) {\n    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;\n\n    function magic() {\n      this.off(type, magic);\n\n      fn.apply(context, arguments);\n    }\n    // To expose the corresponding function method in order to execute the off method\n    magic.fn = fn;\n\n    this.on(type, magic);\n  };\n\n  BScroll.prototype.off = function (type, fn) {\n    var _events = this._events[type];\n    if (!_events) {\n      return;\n    }\n\n    var count = _events.length;\n    while (count--) {\n      if (_events[count][0] === fn || _events[count][0] && _events[count][0].fn === fn) {\n        _events[count][0] = undefined;\n      }\n    }\n  };\n\n  BScroll.prototype.trigger = function (type) {\n    var events = this._events[type];\n    if (!events) {\n      return;\n    }\n\n    var len = events.length;\n    var eventsCopy = [].concat(toConsumableArray(events));\n    for (var i = 0; i < len; i++) {\n      var event = eventsCopy[i];\n\n      var _event = slicedToArray(event, 2),\n          fn = _event[0],\n          context = _event[1];\n\n      if (fn) {\n        fn.apply(context, [].slice.call(arguments, 1));\n      }\n    }\n  };\n}\n\n// ssr support\nvar inBrowser = typeof window !== 'undefined';\nvar ua = inBrowser && navigator.userAgent.toLowerCase();\nvar isWeChatDevTools = ua && /wechatdevtools/.test(ua);\nvar isAndroid = ua && ua.indexOf('android') > 0;\n\nfunction getNow() {\n  return window.performance && window.performance.now ? window.performance.now() + window.performance.timing.navigationStart : +new Date();\n}\n\nfunction extend(target) {\n  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  for (var i = 0; i < rest.length; i++) {\n    var source = rest[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\nfunction isUndef(v) {\n  return v === undefined || v === null;\n}\n\nfunction getDistance(x, y) {\n  return Math.sqrt(x * x + y * y);\n}\n\nvar elementStyle = inBrowser && document.createElement('div').style;\n\nvar vendor = function () {\n  if (!inBrowser) {\n    return false;\n  }\n  var transformNames = {\n    webkit: 'webkitTransform',\n    Moz: 'MozTransform',\n    O: 'OTransform',\n    ms: 'msTransform',\n    standard: 'transform'\n  };\n\n  for (var key in transformNames) {\n    if (elementStyle[transformNames[key]] !== undefined) {\n      return key;\n    }\n  }\n\n  return false;\n}();\n\nfunction prefixStyle(style) {\n  if (vendor === false) {\n    return false;\n  }\n\n  if (vendor === 'standard') {\n    if (style === 'transitionEnd') {\n      return 'transitionend';\n    }\n    return style;\n  }\n\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\n}\n\nfunction addEvent(el, type, fn, capture) {\n  el.addEventListener(type, fn, { passive: false, capture: !!capture });\n}\n\nfunction removeEvent(el, type, fn, capture) {\n  el.removeEventListener(type, fn, { passive: false, capture: !!capture });\n}\n\nfunction offset(el) {\n  var left = 0;\n  var top = 0;\n\n  while (el) {\n    left -= el.offsetLeft;\n    top -= el.offsetTop;\n    el = el.offsetParent;\n  }\n\n  return {\n    left: left,\n    top: top\n  };\n}\n\nfunction offsetToBody(el) {\n  var rect = el.getBoundingClientRect();\n\n  return {\n    left: -(rect.left + window.pageXOffset),\n    top: -(rect.top + window.pageYOffset)\n  };\n}\n\nvar transform = prefixStyle('transform');\n\nvar hasPerspective = inBrowser && prefixStyle('perspective') in elementStyle;\n// fix issue #361\nvar hasTouch = inBrowser && ('ontouchstart' in window || isWeChatDevTools);\nvar hasTransform = transform !== false;\nvar hasTransition = inBrowser && prefixStyle('transition') in elementStyle;\n\nvar style = {\n  transform: transform,\n  transitionTimingFunction: prefixStyle('transitionTimingFunction'),\n  transitionDuration: prefixStyle('transitionDuration'),\n  transitionDelay: prefixStyle('transitionDelay'),\n  transformOrigin: prefixStyle('transformOrigin'),\n  transitionEnd: prefixStyle('transitionEnd')\n};\n\nvar TOUCH_EVENT = 1;\nvar MOUSE_EVENT = 2;\n\nvar eventType = {\n  touchstart: TOUCH_EVENT,\n  touchmove: TOUCH_EVENT,\n  touchend: TOUCH_EVENT,\n\n  mousedown: MOUSE_EVENT,\n  mousemove: MOUSE_EVENT,\n  mouseup: MOUSE_EVENT\n};\n\nfunction getRect(el) {\n  if (el instanceof window.SVGElement) {\n    var rect = el.getBoundingClientRect();\n    return {\n      top: rect.top,\n      left: rect.left,\n      width: rect.width,\n      height: rect.height\n    };\n  } else {\n    return {\n      top: el.offsetTop,\n      left: el.offsetLeft,\n      width: el.offsetWidth,\n      height: el.offsetHeight\n    };\n  }\n}\n\nfunction preventDefaultException(el, exceptions) {\n  for (var i in exceptions) {\n    if (exceptions[i].test(el[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction tap(e, eventName) {\n  var ev = document.createEvent('Event');\n  ev.initEvent(eventName, true, true);\n  ev.pageX = e.pageX;\n  ev.pageY = e.pageY;\n  e.target.dispatchEvent(ev);\n}\n\nfunction click(e) {\n  var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'click';\n\n  var eventSource = void 0;\n  if (e.type === 'mouseup' || e.type === 'mousecancel') {\n    eventSource = e;\n  } else if (e.type === 'touchend' || e.type === 'touchcancel') {\n    eventSource = e.changedTouches[0];\n  }\n  var posSrc = {};\n  if (eventSource) {\n    posSrc.screenX = eventSource.screenX || 0;\n    posSrc.screenY = eventSource.screenY || 0;\n    posSrc.clientX = eventSource.clientX || 0;\n    posSrc.clientY = eventSource.clientY || 0;\n  }\n  var ev = void 0;\n  var bubbles = true;\n  var cancelable = true;\n  if (typeof MouseEvent !== 'undefined') {\n    try {\n      ev = new MouseEvent(event, extend({\n        bubbles: bubbles,\n        cancelable: cancelable\n      }, posSrc));\n    } catch (e) {\n      createEvent();\n    }\n  } else {\n    createEvent();\n  }\n\n  function createEvent() {\n    ev = document.createEvent('Event');\n    ev.initEvent(event, bubbles, cancelable);\n    extend(ev, posSrc);\n  }\n\n  // forwardedTouchEvent set to true in case of the conflict with fastclick\n  ev.forwardedTouchEvent = true;\n  ev._constructed = true;\n  e.target.dispatchEvent(ev);\n}\n\nfunction dblclick(e) {\n  click(e, 'dblclick');\n}\n\nfunction prepend(el, target) {\n  if (target.firstChild) {\n    before(el, target.firstChild);\n  } else {\n    target.appendChild(el);\n  }\n}\n\nfunction before(el, target) {\n  target.parentNode.insertBefore(el, target);\n}\n\nfunction removeChild(el, child) {\n  el.removeChild(child);\n}\n\nvar DEFAULT_OPTIONS = {\n  startX: 0,\n  startY: 0,\n  scrollX: false,\n  scrollY: true,\n  freeScroll: false,\n  directionLockThreshold: 5,\n  eventPassthrough: '',\n  click: false,\n  tap: false,\n  /**\n   * support any side\n   * bounce: {\n   *   top: true,\n   *   bottom: true,\n   *   left: true,\n   *   right: true\n   * }\n   */\n  bounce: true,\n  bounceTime: 800,\n  momentum: true,\n  momentumLimitTime: 300,\n  momentumLimitDistance: 15,\n  swipeTime: 2500,\n  swipeBounceTime: 500,\n  deceleration: 0.0015,\n  flickLimitTime: 200,\n  flickLimitDistance: 100,\n  resizePolling: 60,\n  probeType: 0,\n  preventDefault: true,\n  preventDefaultException: {\n    tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/\n  },\n  HWCompositing: true,\n  useTransition: true,\n  useTransform: true,\n  bindToWrapper: false,\n  disableMouse: hasTouch,\n  disableTouch: !hasTouch,\n  observeDOM: true,\n  autoBlur: true,\n  /**\n   * for picker\n   * wheel: {\n   *   selectedIndex: 0,\n   *   rotate: 25,\n   *   adjustTime: 400\n   *   wheelWrapperClass: 'wheel-scroll',\n   *   wheelItemClass: 'wheel-item'\n   * }\n   */\n  wheel: false,\n  /**\n   * for slide\n   * snap: {\n   *   loop: false,\n   *   el: domEl,\n   *   threshold: 0.1,\n   *   stepX: 100,\n   *   stepY: 100,\n   *   speed: 400,\n   *   easing: {\n   *     style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n   *     fn: function (t) {\n   *       return t * (2 - t)\n   *     }\n   *   }\n   *   listenFlick: true\n   * }\n   */\n  snap: false,\n  /**\n   * for scrollbar\n   * scrollbar: {\n   *   fade: true,\n   *   interactive: false\n   * }\n   */\n  scrollbar: false,\n  /**\n   * for pull down and refresh\n   * pullDownRefresh: {\n   *   threshold: 50,\n   *   stop: 20\n   * }\n   */\n  pullDownRefresh: false,\n  /**\n   * for pull up and load\n   * pullUpLoad: {\n   *   threshold: 50\n   * }\n   */\n  pullUpLoad: false,\n  /**\n   * for mouse wheel\n   * mouseWheel: {\n   *   speed: 20,\n   *   invert: false,\n   *   easeTime: 300\n   * }\n   */\n  mouseWheel: false,\n  stopPropagation: false,\n  /**\n   * for zoom\n   * zoom: {\n   *   start: 1,\n   *   min: 1,\n   *   max: 4\n   * }\n   */\n  zoom: false,\n  /**\n   * for infinity\n   * infinity: {\n   *   render(item, div) {\n   *   },\n   *   createTombstone() {\n   *   },\n   *   fetch(count) {\n   *   }\n   * }\n   */\n  infinity: false,\n  /**\n   * for double click\n   * dblclick: {\n   *   delay: 300\n   * }\n   */\n  dblclick: false\n};\n\nfunction initMixin(BScroll) {\n  BScroll.prototype._init = function (el, options) {\n    this._handleOptions(options);\n\n    // init private custom events\n    this._events = {};\n\n    this.x = 0;\n    this.y = 0;\n    this.directionX = 0;\n    this.directionY = 0;\n\n    this.setScale(1);\n\n    this._addDOMEvents();\n\n    this._initExtFeatures();\n\n    this._watchTransition();\n\n    if (this.options.observeDOM) {\n      this._initDOMObserver();\n    }\n\n    if (this.options.autoBlur) {\n      this._handleAutoBlur();\n    }\n\n    this.refresh();\n\n    if (!this.options.snap) {\n      this.scrollTo(this.options.startX, this.options.startY);\n    }\n\n    this.enable();\n  };\n\n  BScroll.prototype.setScale = function (scale) {\n    this.lastScale = isUndef(this.scale) ? scale : this.scale;\n    this.scale = scale;\n  };\n\n  BScroll.prototype._handleOptions = function (options) {\n    this.options = extend({}, DEFAULT_OPTIONS, options);\n\n    this.translateZ = this.options.HWCompositing && hasPerspective ? ' translateZ(0)' : '';\n\n    this.options.useTransition = this.options.useTransition && hasTransition;\n    this.options.useTransform = this.options.useTransform && hasTransform;\n\n    this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;\n\n    // If you want eventPassthrough I have to lock one of the axes\n    this.options.scrollX = this.options.eventPassthrough === 'horizontal' ? false : this.options.scrollX;\n    this.options.scrollY = this.options.eventPassthrough === 'vertical' ? false : this.options.scrollY;\n\n    // With eventPassthrough we also need lockDirection mechanism\n    this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;\n    this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;\n\n    if (this.options.tap === true) {\n      this.options.tap = 'tap';\n    }\n  };\n\n  BScroll.prototype._addDOMEvents = function () {\n    var eventOperation = addEvent;\n    this._handleDOMEvents(eventOperation);\n  };\n\n  BScroll.prototype._removeDOMEvents = function () {\n    var eventOperation = removeEvent;\n    this._handleDOMEvents(eventOperation);\n  };\n\n  BScroll.prototype._handleDOMEvents = function (eventOperation) {\n    var target = this.options.bindToWrapper ? this.wrapper : window;\n    eventOperation(window, 'orientationchange', this);\n    eventOperation(window, 'resize', this);\n\n    if (this.options.click) {\n      eventOperation(this.wrapper, 'click', this, true);\n    }\n\n    if (!this.options.disableMouse) {\n      eventOperation(this.wrapper, 'mousedown', this);\n      eventOperation(target, 'mousemove', this);\n      eventOperation(target, 'mousecancel', this);\n      eventOperation(target, 'mouseup', this);\n    }\n\n    if (hasTouch && !this.options.disableTouch) {\n      eventOperation(this.wrapper, 'touchstart', this);\n      eventOperation(target, 'touchmove', this);\n      eventOperation(target, 'touchcancel', this);\n      eventOperation(target, 'touchend', this);\n    }\n\n    eventOperation(this.scroller, style.transitionEnd, this);\n  };\n\n  BScroll.prototype._initExtFeatures = function () {\n    if (this.options.snap) {\n      this._initSnap();\n    }\n    if (this.options.scrollbar) {\n      this._initScrollbar();\n    }\n    if (this.options.pullUpLoad) {\n      this._initPullUp();\n    }\n    if (this.options.pullDownRefresh) {\n      this._initPullDown();\n    }\n    if (this.options.wheel) {\n      this._initWheel();\n    }\n    if (this.options.mouseWheel) {\n      this._initMouseWheel();\n    }\n    if (this.options.zoom) {\n      this._initZoom();\n    }\n    if (this.options.infinity) {\n      this._initInfinite();\n    }\n  };\n\n  BScroll.prototype._watchTransition = function () {\n    if (typeof Object.defineProperty !== 'function') {\n      return;\n    }\n    var me = this;\n    var isInTransition = false;\n    var key = this.useTransition ? 'isInTransition' : 'isAnimating';\n    Object.defineProperty(this, key, {\n      get: function get() {\n        return isInTransition;\n      },\n      set: function set(newVal) {\n        isInTransition = newVal;\n        // fix issue #359\n        var el = me.scroller.children.length ? me.scroller.children : [me.scroller];\n        var pointerEvents = isInTransition && !me.pulling ? 'none' : 'auto';\n        for (var i = 0; i < el.length; i++) {\n          el[i].style.pointerEvents = pointerEvents;\n        }\n      }\n    });\n  };\n\n  BScroll.prototype._handleAutoBlur = function () {\n    this.on('scrollStart', function () {\n      var activeElement = document.activeElement;\n      if (activeElement && (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA')) {\n        activeElement.blur();\n      }\n    });\n  };\n\n  BScroll.prototype._initDOMObserver = function () {\n    var _this = this;\n\n    if (typeof MutationObserver !== 'undefined') {\n      var timer = void 0;\n      var observer = new MutationObserver(function (mutations) {\n        // don't do any refresh during the transition, or outside of the boundaries\n        if (_this._shouldNotRefresh()) {\n          return;\n        }\n        var immediateRefresh = false;\n        var deferredRefresh = false;\n        for (var i = 0; i < mutations.length; i++) {\n          var mutation = mutations[i];\n          if (mutation.type !== 'attributes') {\n            immediateRefresh = true;\n            break;\n          } else {\n            if (mutation.target !== _this.scroller) {\n              deferredRefresh = true;\n              break;\n            }\n          }\n        }\n        if (immediateRefresh) {\n          _this.refresh();\n        } else if (deferredRefresh) {\n          // attributes changes too often\n          clearTimeout(timer);\n          timer = setTimeout(function () {\n            if (!_this._shouldNotRefresh()) {\n              _this.refresh();\n            }\n          }, 60);\n        }\n      });\n      var config = {\n        attributes: true,\n        childList: true,\n        subtree: true\n      };\n      observer.observe(this.scroller, config);\n\n      this.on('destroy', function () {\n        observer.disconnect();\n      });\n    } else {\n      this._checkDOMUpdate();\n    }\n  };\n\n  BScroll.prototype._shouldNotRefresh = function () {\n    var outsideBoundaries = this.x > this.minScrollX || this.x < this.maxScrollX || this.y > this.minScrollY || this.y < this.maxScrollY;\n\n    return this.isInTransition || this.stopFromTransition || outsideBoundaries;\n  };\n\n  BScroll.prototype._checkDOMUpdate = function () {\n    var scrollerRect = getRect(this.scroller);\n    var oldWidth = scrollerRect.width;\n    var oldHeight = scrollerRect.height;\n\n    function check() {\n      if (this.destroyed) {\n        return;\n      }\n      scrollerRect = getRect(this.scroller);\n      var newWidth = scrollerRect.width;\n      var newHeight = scrollerRect.height;\n\n      if (oldWidth !== newWidth || oldHeight !== newHeight) {\n        this.refresh();\n      }\n      oldWidth = newWidth;\n      oldHeight = newHeight;\n\n      next.call(this);\n    }\n\n    function next() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        check.call(_this2);\n      }, 1000);\n    }\n\n    next.call(this);\n  };\n\n  BScroll.prototype.handleEvent = function (e) {\n    switch (e.type) {\n      case 'touchstart':\n      case 'mousedown':\n        this._start(e);\n        if (this.options.zoom && e.touches && e.touches.length > 1) {\n          this._zoomStart(e);\n        }\n        break;\n      case 'touchmove':\n      case 'mousemove':\n        if (this.options.zoom && e.touches && e.touches.length > 1) {\n          this._zoom(e);\n        } else {\n          this._move(e);\n        }\n        break;\n      case 'touchend':\n      case 'mouseup':\n      case 'touchcancel':\n      case 'mousecancel':\n        if (this.scaled) {\n          this._zoomEnd(e);\n        } else {\n          this._end(e);\n        }\n        break;\n      case 'orientationchange':\n      case 'resize':\n        this._resize();\n        break;\n      case 'transitionend':\n      case 'webkitTransitionEnd':\n      case 'oTransitionEnd':\n      case 'MSTransitionEnd':\n        this._transitionEnd(e);\n        break;\n      case 'click':\n        if (this.enabled && !e._constructed) {\n          if (!preventDefaultException(e.target, this.options.preventDefaultException)) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }\n        break;\n      case 'wheel':\n      case 'DOMMouseScroll':\n      case 'mousewheel':\n        this._onMouseWheel(e);\n        break;\n    }\n  };\n\n  BScroll.prototype.refresh = function () {\n    var isWrapperStatic = window.getComputedStyle(this.wrapper, null).position === 'static';\n    var wrapperRect = getRect(this.wrapper);\n    this.wrapperWidth = wrapperRect.width;\n    this.wrapperHeight = wrapperRect.height;\n\n    var scrollerRect = getRect(this.scroller);\n    this.scrollerWidth = Math.round(scrollerRect.width * this.scale);\n    this.scrollerHeight = Math.round(scrollerRect.height * this.scale);\n\n    this.relativeX = scrollerRect.left;\n    this.relativeY = scrollerRect.top;\n\n    if (isWrapperStatic) {\n      this.relativeX -= wrapperRect.left;\n      this.relativeY -= wrapperRect.top;\n    }\n\n    this.minScrollX = 0;\n    this.minScrollY = 0;\n\n    var wheel = this.options.wheel;\n    if (wheel) {\n      this.items = this.scroller.children;\n      this.options.itemHeight = this.itemHeight = this.items.length ? this.scrollerHeight / this.items.length : 0;\n      if (this.selectedIndex === undefined) {\n        this.selectedIndex = wheel.selectedIndex || 0;\n      }\n      this.options.startY = -this.selectedIndex * this.itemHeight;\n      this.maxScrollX = 0;\n      this.maxScrollY = -this.itemHeight * (this.items.length - 1);\n    } else {\n      this.maxScrollX = this.wrapperWidth - this.scrollerWidth;\n      if (!this.options.infinity) {\n        this.maxScrollY = this.wrapperHeight - this.scrollerHeight;\n      }\n      if (this.maxScrollX < 0) {\n        this.maxScrollX -= this.relativeX;\n        this.minScrollX = -this.relativeX;\n      } else if (this.scale > 1) {\n        this.maxScrollX = this.maxScrollX / 2 - this.relativeX;\n        this.minScrollX = this.maxScrollX;\n      }\n      if (this.maxScrollY < 0) {\n        this.maxScrollY -= this.relativeY;\n        this.minScrollY = -this.relativeY;\n      } else if (this.scale > 1) {\n        this.maxScrollY = this.maxScrollY / 2 - this.relativeY;\n        this.minScrollY = this.maxScrollY;\n      }\n    }\n\n    this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < this.minScrollX;\n    this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < this.minScrollY;\n\n    if (!this.hasHorizontalScroll) {\n      this.maxScrollX = this.minScrollX;\n      this.scrollerWidth = this.wrapperWidth;\n    }\n\n    if (!this.hasVerticalScroll) {\n      this.maxScrollY = this.minScrollY;\n      this.scrollerHeight = this.wrapperHeight;\n    }\n\n    this.endTime = 0;\n    this.directionX = 0;\n    this.directionY = 0;\n    this.wrapperOffset = offset(this.wrapper);\n\n    this.trigger('refresh');\n\n    !this.scaled && this.resetPosition();\n  };\n\n  BScroll.prototype.enable = function () {\n    this.enabled = true;\n  };\n\n  BScroll.prototype.disable = function () {\n    this.enabled = false;\n  };\n}\n\nvar ease = {\n  // easeOutQuint\n  swipe: {\n    style: 'cubic-bezier(0.23, 1, 0.32, 1)',\n    fn: function fn(t) {\n      return 1 + --t * t * t * t * t;\n    }\n  },\n  // easeOutQuard\n  swipeBounce: {\n    style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n    fn: function fn(t) {\n      return t * (2 - t);\n    }\n  },\n  // easeOutQuart\n  bounce: {\n    style: 'cubic-bezier(0.165, 0.84, 0.44, 1)',\n    fn: function fn(t) {\n      return 1 - --t * t * t * t;\n    }\n  }\n};\n\nfunction momentum(current, start, time, lowerMargin, upperMargin, wrapperSize, options) {\n  var distance = current - start;\n  var speed = Math.abs(distance) / time;\n\n  var deceleration = options.deceleration,\n      itemHeight = options.itemHeight,\n      swipeBounceTime = options.swipeBounceTime,\n      wheel = options.wheel,\n      swipeTime = options.swipeTime;\n\n  var duration = swipeTime;\n  var rate = wheel ? 4 : 15;\n\n  var destination = current + speed / deceleration * (distance < 0 ? -1 : 1);\n\n  if (wheel && itemHeight) {\n    destination = Math.round(destination / itemHeight) * itemHeight;\n  }\n\n  if (destination < lowerMargin) {\n    destination = wrapperSize ? Math.max(lowerMargin - wrapperSize / 4, lowerMargin - wrapperSize / rate * speed) : lowerMargin;\n    duration = swipeBounceTime;\n  } else if (destination > upperMargin) {\n    destination = wrapperSize ? Math.min(upperMargin + wrapperSize / 4, upperMargin + wrapperSize / rate * speed) : upperMargin;\n    duration = swipeBounceTime;\n  }\n\n  return {\n    destination: Math.round(destination),\n    duration: duration\n  };\n}\n\nvar DEFAULT_INTERVAL = 100 / 60;\n\nfunction noop() {}\n\nvar requestAnimationFrame = function () {\n  if (!inBrowser) {\n    /* istanbul ignore if */\n    return noop;\n  }\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame ||\n  // if all else fails, use setTimeout\n  function (callback) {\n    return window.setTimeout(callback, (callback.interval || DEFAULT_INTERVAL) / 2); // make interval as precise as possible.\n  };\n}();\n\nvar cancelAnimationFrame = function () {\n  if (!inBrowser) {\n    /* istanbul ignore if */\n    return noop;\n  }\n  return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || function (id) {\n    window.clearTimeout(id);\n  };\n}();\n\nvar DIRECTION_UP = 1;\nvar DIRECTION_DOWN = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\n\nvar PROBE_DEBOUNCE = 1;\n\nvar PROBE_REALTIME = 3;\n\nfunction warn(msg) {\n  console.error('[BScroll warn]: ' + msg);\n}\n\nfunction assert(condition, msg) {\n  if (!condition) {\n    throw new Error('[BScroll] ' + msg);\n  }\n}\n\nfunction coreMixin(BScroll) {\n  BScroll.prototype._start = function (e) {\n    var _eventType = eventType[e.type];\n    if (_eventType !== TOUCH_EVENT) {\n      if (e.button !== 0) {\n        return;\n      }\n    }\n    if (!this.enabled || this.destroyed || this.initiated && this.initiated !== _eventType) {\n      return;\n    }\n    this.initiated = _eventType;\n\n    if (this.options.preventDefault && !preventDefaultException(e.target, this.options.preventDefaultException)) {\n      e.preventDefault();\n    }\n    if (this.options.stopPropagation) {\n      e.stopPropagation();\n    }\n\n    this.moved = false;\n    this.distX = 0;\n    this.distY = 0;\n    this.directionX = 0;\n    this.directionY = 0;\n    this.movingDirectionX = 0;\n    this.movingDirectionY = 0;\n    this.directionLocked = 0;\n\n    this._transitionTime();\n    this.startTime = getNow();\n\n    if (this.options.wheel) {\n      this.target = e.target;\n    }\n\n    this.stop();\n\n    var point = e.touches ? e.touches[0] : e;\n\n    this.startX = this.x;\n    this.startY = this.y;\n    this.absStartX = this.x;\n    this.absStartY = this.y;\n    this.pointX = point.pageX;\n    this.pointY = point.pageY;\n\n    this.trigger('beforeScrollStart');\n  };\n\n  BScroll.prototype._move = function (e) {\n    if (!this.enabled || this.destroyed || eventType[e.type] !== this.initiated) {\n      return;\n    }\n\n    if (this.options.preventDefault) {\n      e.preventDefault();\n    }\n    if (this.options.stopPropagation) {\n      e.stopPropagation();\n    }\n\n    var point = e.touches ? e.touches[0] : e;\n    var deltaX = point.pageX - this.pointX;\n    var deltaY = point.pageY - this.pointY;\n\n    this.pointX = point.pageX;\n    this.pointY = point.pageY;\n\n    this.distX += deltaX;\n    this.distY += deltaY;\n\n    var absDistX = Math.abs(this.distX);\n    var absDistY = Math.abs(this.distY);\n\n    var timestamp = getNow();\n\n    // We need to move at least momentumLimitDistance pixels for the scrolling to initiate\n    if (timestamp - this.endTime > this.options.momentumLimitTime && absDistY < this.options.momentumLimitDistance && absDistX < this.options.momentumLimitDistance) {\n      return;\n    }\n\n    // If you are scrolling in one direction lock the other\n    if (!this.directionLocked && !this.options.freeScroll) {\n      if (absDistX > absDistY + this.options.directionLockThreshold) {\n        this.directionLocked = 'h'; // lock horizontally\n      } else if (absDistY >= absDistX + this.options.directionLockThreshold) {\n        this.directionLocked = 'v'; // lock vertically\n      } else {\n        this.directionLocked = 'n'; // no lock\n      }\n    }\n\n    if (this.directionLocked === 'h') {\n      if (this.options.eventPassthrough === 'vertical') {\n        e.preventDefault();\n      } else if (this.options.eventPassthrough === 'horizontal') {\n        this.initiated = false;\n        return;\n      }\n      deltaY = 0;\n    } else if (this.directionLocked === 'v') {\n      if (this.options.eventPassthrough === 'horizontal') {\n        e.preventDefault();\n      } else if (this.options.eventPassthrough === 'vertical') {\n        this.initiated = false;\n        return;\n      }\n      deltaX = 0;\n    }\n\n    deltaX = this.hasHorizontalScroll ? deltaX : 0;\n    deltaY = this.hasVerticalScroll ? deltaY : 0;\n    this.movingDirectionX = deltaX > 0 ? DIRECTION_RIGHT : deltaX < 0 ? DIRECTION_LEFT : 0;\n    this.movingDirectionY = deltaY > 0 ? DIRECTION_DOWN : deltaY < 0 ? DIRECTION_UP : 0;\n\n    var newX = this.x + deltaX;\n    var newY = this.y + deltaY;\n\n    var top = false;\n    var bottom = false;\n    var left = false;\n    var right = false;\n    // Slow down or stop if outside of the boundaries\n    var bounce = this.options.bounce;\n    if (bounce !== false) {\n      top = bounce.top === undefined ? true : bounce.top;\n      bottom = bounce.bottom === undefined ? true : bounce.bottom;\n      left = bounce.left === undefined ? true : bounce.left;\n      right = bounce.right === undefined ? true : bounce.right;\n    }\n    if (newX > this.minScrollX || newX < this.maxScrollX) {\n      if (newX > this.minScrollX && left || newX < this.maxScrollX && right) {\n        newX = this.x + deltaX / 3;\n      } else {\n        newX = newX > this.minScrollX ? this.minScrollX : this.maxScrollX;\n      }\n    }\n    if (newY > this.minScrollY || newY < this.maxScrollY) {\n      if (newY > this.minScrollY && top || newY < this.maxScrollY && bottom) {\n        newY = this.y + deltaY / 3;\n      } else {\n        newY = newY > this.minScrollY ? this.minScrollY : this.maxScrollY;\n      }\n    }\n\n    if (!this.moved) {\n      this.moved = true;\n      this.trigger('scrollStart');\n    }\n\n    this._translate(newX, newY);\n\n    if (timestamp - this.startTime > this.options.momentumLimitTime) {\n      this.startTime = timestamp;\n      this.startX = this.x;\n      this.startY = this.y;\n\n      if (this.options.probeType === PROBE_DEBOUNCE) {\n        this.trigger('scroll', {\n          x: this.x,\n          y: this.y\n        });\n      }\n    }\n\n    if (this.options.probeType > PROBE_DEBOUNCE) {\n      this.trigger('scroll', {\n        x: this.x,\n        y: this.y\n      });\n    }\n\n    var scrollLeft = document.documentElement.scrollLeft || window.pageXOffset || document.body.scrollLeft;\n    var scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;\n\n    var pX = this.pointX - scrollLeft;\n    var pY = this.pointY - scrollTop;\n\n    if (pX > document.documentElement.clientWidth - this.options.momentumLimitDistance || pX < this.options.momentumLimitDistance || pY < this.options.momentumLimitDistance || pY > document.documentElement.clientHeight - this.options.momentumLimitDistance) {\n      this._end(e);\n    }\n  };\n\n  BScroll.prototype._end = function (e) {\n    if (!this.enabled || this.destroyed || eventType[e.type] !== this.initiated) {\n      return;\n    }\n    this.initiated = false;\n\n    if (this.options.preventDefault && !preventDefaultException(e.target, this.options.preventDefaultException)) {\n      e.preventDefault();\n    }\n    if (this.options.stopPropagation) {\n      e.stopPropagation();\n    }\n\n    this.trigger('touchEnd', {\n      x: this.x,\n      y: this.y\n    });\n\n    this.isInTransition = false;\n\n    // ensures that the last position is rounded\n    var newX = Math.round(this.x);\n    var newY = Math.round(this.y);\n\n    var deltaX = newX - this.absStartX;\n    var deltaY = newY - this.absStartY;\n    this.directionX = deltaX > 0 ? DIRECTION_RIGHT : deltaX < 0 ? DIRECTION_LEFT : 0;\n    this.directionY = deltaY > 0 ? DIRECTION_DOWN : deltaY < 0 ? DIRECTION_UP : 0;\n\n    // if configure pull down refresh, check it first\n    if (this.options.pullDownRefresh && this._checkPullDown()) {\n      return;\n    }\n\n    // check if it is a click operation\n    if (this._checkClick(e)) {\n      this.trigger('scrollCancel');\n      return;\n    }\n\n    // reset if we are outside of the boundaries\n    if (this.resetPosition(this.options.bounceTime, ease.bounce)) {\n      return;\n    }\n\n    this._translate(newX, newY);\n\n    this.endTime = getNow();\n    var duration = this.endTime - this.startTime;\n    var absDistX = Math.abs(newX - this.startX);\n    var absDistY = Math.abs(newY - this.startY);\n\n    // flick\n    if (this._events.flick && duration < this.options.flickLimitTime && absDistX < this.options.flickLimitDistance && absDistY < this.options.flickLimitDistance) {\n      this.trigger('flick');\n      return;\n    }\n\n    var time = 0;\n    // start momentum animation if needed\n    if (this.options.momentum && duration < this.options.momentumLimitTime && (absDistY > this.options.momentumLimitDistance || absDistX > this.options.momentumLimitDistance)) {\n      var top = false;\n      var bottom = false;\n      var left = false;\n      var right = false;\n      var bounce = this.options.bounce;\n      if (bounce !== false) {\n        top = bounce.top === undefined ? true : bounce.top;\n        bottom = bounce.bottom === undefined ? true : bounce.bottom;\n        left = bounce.left === undefined ? true : bounce.left;\n        right = bounce.right === undefined ? true : bounce.right;\n      }\n      var wrapperWidth = this.directionX === DIRECTION_RIGHT && left || this.directionX === DIRECTION_LEFT && right ? this.wrapperWidth : 0;\n      var wrapperHeight = this.directionY === DIRECTION_DOWN && top || this.directionY === DIRECTION_UP && bottom ? this.wrapperHeight : 0;\n      var momentumX = this.hasHorizontalScroll ? momentum(this.x, this.startX, duration, this.maxScrollX, this.minScrollX, wrapperWidth, this.options) : { destination: newX, duration: 0 };\n      var momentumY = this.hasVerticalScroll ? momentum(this.y, this.startY, duration, this.maxScrollY, this.minScrollY, wrapperHeight, this.options) : { destination: newY, duration: 0 };\n      newX = momentumX.destination;\n      newY = momentumY.destination;\n      time = Math.max(momentumX.duration, momentumY.duration);\n      this.isInTransition = true;\n    } else {\n      if (this.options.wheel) {\n        newY = Math.round(newY / this.itemHeight) * this.itemHeight;\n        time = this.options.wheel.adjustTime || 400;\n      }\n    }\n\n    var easing = ease.swipe;\n    if (this.options.snap) {\n      var snap = this._nearestSnap(newX, newY);\n      this.currentPage = snap;\n      time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(newX - snap.x), 1000), Math.min(Math.abs(newY - snap.y), 1000)), 300);\n      newX = snap.x;\n      newY = snap.y;\n\n      this.directionX = 0;\n      this.directionY = 0;\n      easing = this.options.snap.easing || ease.bounce;\n    }\n\n    if (newX !== this.x || newY !== this.y) {\n      // change easing function when scroller goes out of the boundaries\n      if (newX > this.minScrollX || newX < this.maxScrollX || newY > this.minScrollY || newY < this.maxScrollY) {\n        easing = ease.swipeBounce;\n      }\n      this.scrollTo(newX, newY, time, easing);\n      return;\n    }\n\n    if (this.options.wheel) {\n      this.selectedIndex = Math.round(Math.abs(this.y / this.itemHeight));\n    }\n    this.trigger('scrollEnd', {\n      x: this.x,\n      y: this.y\n    });\n  };\n\n  BScroll.prototype._checkClick = function (e) {\n    // when in the process of pulling down, it should not prevent click\n    var preventClick = this.stopFromTransition && !this.pulling;\n    this.stopFromTransition = false;\n\n    // we scrolled less than 15 pixels\n    if (!this.moved) {\n      if (this.options.wheel) {\n        if (this.target && this.target.classList.contains(this.options.wheel.wheelWrapperClass)) {\n          var index = Math.abs(Math.round(this.y / this.itemHeight));\n          var _offset = Math.round((this.pointY + offsetToBody(this.wrapper).top - this.wrapperHeight / 2) / this.itemHeight);\n          this.target = this.items[index + _offset];\n        }\n        this.scrollToElement(this.target, this.options.wheel.adjustTime || 400, true, true, ease.swipe);\n        return true;\n      } else {\n        if (!preventClick) {\n          var _dblclick = this.options.dblclick;\n          var dblclickTrigged = false;\n          if (_dblclick && this.lastClickTime) {\n            var _dblclick$delay = _dblclick.delay,\n                delay = _dblclick$delay === undefined ? 300 : _dblclick$delay;\n\n            if (getNow() - this.lastClickTime < delay) {\n              dblclickTrigged = true;\n              dblclick(e);\n            }\n          }\n          if (this.options.tap) {\n            tap(e, this.options.tap);\n          }\n\n          if (this.options.click && !preventDefaultException(e.target, this.options.preventDefaultException)) {\n            click(e);\n          }\n          this.lastClickTime = dblclickTrigged ? null : getNow();\n          return true;\n        }\n        return false;\n      }\n    }\n    return false;\n  };\n\n  BScroll.prototype._resize = function () {\n    var _this = this;\n\n    if (!this.enabled) {\n      return;\n    }\n    // fix a scroll problem under Android condition\n    if (isAndroid) {\n      this.wrapper.scrollTop = 0;\n    }\n    clearTimeout(this.resizeTimeout);\n    this.resizeTimeout = setTimeout(function () {\n      _this.refresh();\n    }, this.options.resizePolling);\n  };\n\n  BScroll.prototype._startProbe = function () {\n    cancelAnimationFrame(this.probeTimer);\n    this.probeTimer = requestAnimationFrame(probe);\n\n    var me = this;\n\n    function probe() {\n      var pos = me.getComputedPosition();\n      me.trigger('scroll', pos);\n      if (!me.isInTransition) {\n        me.trigger('scrollEnd', pos);\n        return;\n      }\n      me.probeTimer = requestAnimationFrame(probe);\n    }\n  };\n\n  BScroll.prototype._transitionTime = function () {\n    var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    this.scrollerStyle[style.transitionDuration] = time + 'ms';\n\n    if (this.options.wheel) {\n      for (var i = 0; i < this.items.length; i++) {\n        this.items[i].style[style.transitionDuration] = time + 'ms';\n      }\n    }\n\n    if (this.indicators) {\n      for (var _i = 0; _i < this.indicators.length; _i++) {\n        this.indicators[_i].transitionTime(time);\n      }\n    }\n  };\n\n  BScroll.prototype._transitionTimingFunction = function (easing) {\n    this.scrollerStyle[style.transitionTimingFunction] = easing;\n\n    if (this.options.wheel) {\n      for (var i = 0; i < this.items.length; i++) {\n        this.items[i].style[style.transitionTimingFunction] = easing;\n      }\n    }\n\n    if (this.indicators) {\n      for (var _i2 = 0; _i2 < this.indicators.length; _i2++) {\n        this.indicators[_i2].transitionTimingFunction(easing);\n      }\n    }\n  };\n\n  BScroll.prototype._transitionEnd = function (e) {\n    if (e.target !== this.scroller || !this.isInTransition) {\n      return;\n    }\n\n    this._transitionTime();\n    var needReset = !this.pulling || this.movingDirectionY === DIRECTION_UP;\n    if (needReset && !this.resetPosition(this.options.bounceTime, ease.bounce)) {\n      this.isInTransition = false;\n      if (this.options.probeType !== PROBE_REALTIME) {\n        this.trigger('scrollEnd', {\n          x: this.x,\n          y: this.y\n        });\n      }\n    }\n  };\n\n  BScroll.prototype._translate = function (x, y, scale) {\n    assert(!isUndef(x) && !isUndef(y), 'Translate x or y is null or undefined.');\n    if (isUndef(scale)) {\n      scale = this.scale;\n    }\n    if (this.options.useTransform) {\n      this.scrollerStyle[style.transform] = 'translate(' + x + 'px,' + y + 'px) scale(' + scale + ')' + this.translateZ;\n    } else {\n      x = Math.round(x);\n      y = Math.round(y);\n      this.scrollerStyle.left = x + 'px';\n      this.scrollerStyle.top = y + 'px';\n    }\n\n    if (this.options.wheel) {\n      var _options$wheel$rotate = this.options.wheel.rotate,\n          rotate = _options$wheel$rotate === undefined ? 25 : _options$wheel$rotate;\n\n      for (var i = 0; i < this.items.length; i++) {\n        var deg = rotate * (y / this.itemHeight + i);\n        this.items[i].style[style.transform] = 'rotateX(' + deg + 'deg)';\n      }\n    }\n\n    this.x = x;\n    this.y = y;\n    this.setScale(scale);\n\n    if (this.indicators) {\n      for (var _i3 = 0; _i3 < this.indicators.length; _i3++) {\n        this.indicators[_i3].updatePosition();\n      }\n    }\n  };\n\n  BScroll.prototype._animate = function (destX, destY, duration, easingFn) {\n    var me = this;\n    var startX = this.x;\n    var startY = this.y;\n    var startScale = this.lastScale;\n    var destScale = this.scale;\n    var startTime = getNow();\n    var destTime = startTime + duration;\n\n    function step() {\n      var now = getNow();\n\n      if (now >= destTime) {\n        me.isAnimating = false;\n        me._translate(destX, destY, destScale);\n\n        me.trigger('scroll', {\n          x: me.x,\n          y: me.y\n        });\n\n        if (!me.pulling && !me.resetPosition(me.options.bounceTime)) {\n          me.trigger('scrollEnd', {\n            x: me.x,\n            y: me.y\n          });\n        }\n        return;\n      }\n      now = (now - startTime) / duration;\n      var easing = easingFn(now);\n      var newX = (destX - startX) * easing + startX;\n      var newY = (destY - startY) * easing + startY;\n      var newScale = (destScale - startScale) * easing + startScale;\n\n      me._translate(newX, newY, newScale);\n\n      if (me.isAnimating) {\n        me.animateTimer = requestAnimationFrame(step);\n      }\n\n      if (me.options.probeType === PROBE_REALTIME) {\n        me.trigger('scroll', {\n          x: me.x,\n          y: me.y\n        });\n      }\n    }\n\n    this.isAnimating = true;\n    cancelAnimationFrame(this.animateTimer);\n    step();\n  };\n\n  BScroll.prototype.scrollBy = function (x, y) {\n    var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var easing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ease.bounce;\n\n    x = this.x + x;\n    y = this.y + y;\n\n    this.scrollTo(x, y, time, easing);\n  };\n\n  BScroll.prototype.scrollTo = function (x, y) {\n    var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var easing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ease.bounce;\n\n    this.isInTransition = this.options.useTransition && time > 0 && (x !== this.x || y !== this.y);\n\n    if (!time || this.options.useTransition) {\n      this._transitionTimingFunction(easing.style);\n      this._transitionTime(time);\n      this._translate(x, y);\n\n      if (time && this.options.probeType === PROBE_REALTIME) {\n        this._startProbe();\n      }\n\n      if (!time && (x !== this.x || y !== this.y)) {\n        this.trigger('scroll', {\n          x: x,\n          y: y\n        });\n        // force reflow to put everything in position\n        this._reflow = document.body.offsetHeight;\n        if (!this.resetPosition(this.options.bounceTime, ease.bounce)) {\n          this.trigger('scrollEnd', {\n            x: x,\n            y: y\n          });\n        }\n      }\n\n      if (this.options.wheel) {\n        if (y > this.minScrollY) {\n          this.selectedIndex = 0;\n        } else if (y < this.maxScrollY) {\n          this.selectedIndex = this.items.length - 1;\n        } else {\n          this.selectedIndex = Math.round(Math.abs(y / this.itemHeight));\n        }\n      }\n    } else {\n      this._animate(x, y, time, easing.fn);\n    }\n  };\n\n  BScroll.prototype.scrollToElement = function (el, time, offsetX, offsetY, easing) {\n    if (!el) {\n      return;\n    }\n    el = el.nodeType ? el : this.scroller.querySelector(el);\n\n    if (this.options.wheel && !el.classList.contains(this.options.wheel.wheelItemClass)) {\n      return;\n    }\n\n    var pos = offset(el);\n    pos.left -= this.wrapperOffset.left;\n    pos.top -= this.wrapperOffset.top;\n\n    // if offsetX/Y are true we center the element to the screen\n    if (offsetX === true) {\n      offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);\n    }\n    if (offsetY === true) {\n      offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);\n    }\n\n    pos.left -= offsetX || 0;\n    pos.top -= offsetY || 0;\n    pos.left = pos.left > this.minScrollX ? this.minScrollX : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;\n    pos.top = pos.top > this.minScrollY ? this.minScrollY : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;\n\n    if (this.options.wheel) {\n      pos.top = Math.round(pos.top / this.itemHeight) * this.itemHeight;\n    }\n\n    this.scrollTo(pos.left, pos.top, time, easing);\n  };\n\n  BScroll.prototype.resetPosition = function () {\n    var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var easeing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ease.bounce;\n\n    var x = this.x;\n    var roundX = Math.round(x);\n    if (!this.hasHorizontalScroll || roundX > this.minScrollX) {\n      x = this.minScrollX;\n    } else if (roundX < this.maxScrollX) {\n      x = this.maxScrollX;\n    }\n\n    var y = this.y;\n    var roundY = Math.round(y);\n    if (!this.hasVerticalScroll || roundY > this.minScrollY) {\n      y = this.minScrollY;\n    } else if (roundY < this.maxScrollY) {\n      y = this.maxScrollY;\n    }\n\n    if (x === this.x && y === this.y) {\n      return false;\n    }\n\n    this.scrollTo(x, y, time, easeing);\n\n    return true;\n  };\n\n  BScroll.prototype.getComputedPosition = function () {\n    var matrix = window.getComputedStyle(this.scroller, null);\n    var x = void 0;\n    var y = void 0;\n\n    if (this.options.useTransform) {\n      matrix = matrix[style.transform].split(')')[0].split(', ');\n      x = +(matrix[12] || matrix[4]);\n      y = +(matrix[13] || matrix[5]);\n    } else {\n      x = +matrix.left.replace(/[^-\\d.]/g, '');\n      y = +matrix.top.replace(/[^-\\d.]/g, '');\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  BScroll.prototype.stop = function () {\n    if (this.options.useTransition && this.isInTransition) {\n      this.isInTransition = false;\n      cancelAnimationFrame(this.probeTimer);\n      var pos = this.getComputedPosition();\n      this._translate(pos.x, pos.y);\n      if (this.options.wheel) {\n        this.target = this.items[Math.round(-pos.y / this.itemHeight)];\n      } else {\n        this.trigger('scrollEnd', {\n          x: this.x,\n          y: this.y\n        });\n      }\n      this.stopFromTransition = true;\n    } else if (!this.options.useTransition && this.isAnimating) {\n      this.isAnimating = false;\n      cancelAnimationFrame(this.animateTimer);\n      this.trigger('scrollEnd', {\n        x: this.x,\n        y: this.y\n      });\n      this.stopFromTransition = true;\n    }\n  };\n\n  BScroll.prototype.destroy = function () {\n    this.destroyed = true;\n    this.trigger('destroy');\n    if (this.options.useTransition) {\n      cancelAnimationFrame(this.probeTimer);\n    } else {\n      cancelAnimationFrame(this.animateTimer);\n    }\n    this._removeDOMEvents();\n    // remove custom events\n    this._events = {};\n  };\n}\n\nfunction snapMixin(BScroll) {\n  BScroll.prototype._initSnap = function () {\n    var _this = this;\n\n    this.currentPage = {};\n    var snap = this.options.snap;\n\n    if (snap.loop) {\n      var children = this.scroller.children;\n      if (children.length > 1) {\n        prepend(children[children.length - 1].cloneNode(true), this.scroller);\n        this.scroller.appendChild(children[1].cloneNode(true));\n      } else {\n        // Loop does not make any sense if there is only one child.\n        snap.loop = false;\n      }\n    }\n\n    var el = snap.el;\n    if (typeof el === 'string') {\n      el = this.scroller.querySelectorAll(el);\n    }\n\n    this.on('refresh', function () {\n      _this.pages = [];\n\n      if (!_this.wrapperWidth || !_this.wrapperHeight || !_this.scrollerWidth || !_this.scrollerHeight) {\n        return;\n      }\n\n      var stepX = snap.stepX || _this.wrapperWidth;\n      var stepY = snap.stepY || _this.wrapperHeight;\n\n      var x = 0;\n      var y = void 0;\n      var cx = void 0;\n      var cy = void 0;\n      var i = 0;\n      var l = void 0;\n      var m = 0;\n      var n = void 0;\n      var rect = void 0;\n      if (!el) {\n        cx = Math.round(stepX / 2);\n        cy = Math.round(stepY / 2);\n\n        while (x > -_this.scrollerWidth) {\n          _this.pages[i] = [];\n          l = 0;\n          y = 0;\n\n          while (y > -_this.scrollerHeight) {\n            _this.pages[i][l] = {\n              x: Math.max(x, _this.maxScrollX),\n              y: Math.max(y, _this.maxScrollY),\n              width: stepX,\n              height: stepY,\n              cx: x - cx,\n              cy: y - cy\n            };\n\n            y -= stepY;\n            l++;\n          }\n\n          x -= stepX;\n          i++;\n        }\n      } else {\n        l = el.length;\n        n = -1;\n\n        for (; i < l; i++) {\n          rect = getRect(el[i]);\n          if (i === 0 || rect.left <= getRect(el[i - 1]).left) {\n            m = 0;\n            n++;\n          }\n\n          if (!_this.pages[m]) {\n            _this.pages[m] = [];\n          }\n\n          x = Math.max(-rect.left, _this.maxScrollX);\n          y = Math.max(-rect.top, _this.maxScrollY);\n          cx = x - Math.round(rect.width / 2);\n          cy = y - Math.round(rect.height / 2);\n\n          _this.pages[m][n] = {\n            x: x,\n            y: y,\n            width: rect.width,\n            height: rect.height,\n            cx: cx,\n            cy: cy\n          };\n\n          if (x > _this.maxScrollX) {\n            m++;\n          }\n        }\n      }\n\n      _this._checkSnapLoop();\n\n      var initPageX = snap._loopX ? 1 : 0;\n      var initPageY = snap._loopY ? 1 : 0;\n      _this._goToPage(_this.currentPage.pageX || initPageX, _this.currentPage.pageY || initPageY, 0);\n\n      // Update snap threshold if needed.\n      var snapThreshold = snap.threshold;\n      if (snapThreshold % 1 === 0) {\n        _this.snapThresholdX = snapThreshold;\n        _this.snapThresholdY = snapThreshold;\n      } else {\n        _this.snapThresholdX = Math.round(_this.pages[_this.currentPage.pageX][_this.currentPage.pageY].width * snapThreshold);\n        _this.snapThresholdY = Math.round(_this.pages[_this.currentPage.pageX][_this.currentPage.pageY].height * snapThreshold);\n      }\n    });\n\n    this.on('scrollEnd', function () {\n      if (snap.loop) {\n        if (snap._loopX) {\n          if (_this.currentPage.pageX === 0) {\n            _this._goToPage(_this.pages.length - 2, _this.currentPage.pageY, 0);\n          }\n          if (_this.currentPage.pageX === _this.pages.length - 1) {\n            _this._goToPage(1, _this.currentPage.pageY, 0);\n          }\n        } else {\n          if (_this.currentPage.pageY === 0) {\n            _this._goToPage(_this.currentPage.pageX, _this.pages[0].length - 2, 0);\n          }\n          if (_this.currentPage.pageY === _this.pages[0].length - 1) {\n            _this._goToPage(_this.currentPage.pageX, 1, 0);\n          }\n        }\n      }\n    });\n\n    if (snap.listenFlick !== false) {\n      this.on('flick', function () {\n        var time = snap.speed || Math.max(Math.max(Math.min(Math.abs(_this.x - _this.startX), 1000), Math.min(Math.abs(_this.y - _this.startY), 1000)), 300);\n\n        _this._goToPage(_this.currentPage.pageX + _this.directionX, _this.currentPage.pageY + _this.directionY, time);\n      });\n    }\n\n    this.on('destroy', function () {\n      if (snap.loop) {\n        var _children = _this.scroller.children;\n        if (_children.length > 2) {\n          removeChild(_this.scroller, _children[_children.length - 1]);\n          removeChild(_this.scroller, _children[0]);\n        }\n      }\n    });\n  };\n\n  BScroll.prototype._checkSnapLoop = function () {\n    var snap = this.options.snap;\n\n    if (!snap.loop || !this.pages || !this.pages.length) {\n      return;\n    }\n\n    if (this.pages.length > 1) {\n      snap._loopX = true;\n    }\n    if (this.pages[0] && this.pages[0].length > 1) {\n      snap._loopY = true;\n    }\n    if (snap._loopX && snap._loopY) {\n      warn('Loop does not support two direction at the same time.');\n    }\n  };\n\n  BScroll.prototype._nearestSnap = function (x, y) {\n    if (!this.pages.length) {\n      return { x: 0, y: 0, pageX: 0, pageY: 0 };\n    }\n\n    var i = 0;\n    // Check if we exceeded the snap threshold\n    if (Math.abs(x - this.absStartX) <= this.snapThresholdX && Math.abs(y - this.absStartY) <= this.snapThresholdY) {\n      return this.currentPage;\n    }\n\n    if (x > this.minScrollX) {\n      x = this.minScrollX;\n    } else if (x < this.maxScrollX) {\n      x = this.maxScrollX;\n    }\n\n    if (y > this.minScrollY) {\n      y = this.minScrollY;\n    } else if (y < this.maxScrollY) {\n      y = this.maxScrollY;\n    }\n\n    var l = this.pages.length;\n    for (; i < l; i++) {\n      if (x >= this.pages[i][0].cx) {\n        x = this.pages[i][0].x;\n        break;\n      }\n    }\n\n    l = this.pages[i].length;\n\n    var m = 0;\n    for (; m < l; m++) {\n      if (y >= this.pages[0][m].cy) {\n        y = this.pages[0][m].y;\n        break;\n      }\n    }\n\n    if (i === this.currentPage.pageX) {\n      i += this.directionX;\n\n      if (i < 0) {\n        i = 0;\n      } else if (i >= this.pages.length) {\n        i = this.pages.length - 1;\n      }\n\n      x = this.pages[i][0].x;\n    }\n\n    if (m === this.currentPage.pageY) {\n      m += this.directionY;\n\n      if (m < 0) {\n        m = 0;\n      } else if (m >= this.pages[0].length) {\n        m = this.pages[0].length - 1;\n      }\n\n      y = this.pages[0][m].y;\n    }\n\n    return {\n      x: x,\n      y: y,\n      pageX: i,\n      pageY: m\n    };\n  };\n\n  BScroll.prototype._goToPage = function (x) {\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var time = arguments[2];\n    var easing = arguments[3];\n\n    var snap = this.options.snap;\n\n    if (!snap || !this.pages || !this.pages.length) {\n      return;\n    }\n\n    easing = easing || snap.easing || ease.bounce;\n\n    if (x >= this.pages.length) {\n      x = this.pages.length - 1;\n    } else if (x < 0) {\n      x = 0;\n    }\n\n    if (!this.pages[x]) {\n      return;\n    }\n\n    if (y >= this.pages[x].length) {\n      y = this.pages[x].length - 1;\n    } else if (y < 0) {\n      y = 0;\n    }\n\n    var posX = this.pages[x][y].x;\n    var posY = this.pages[x][y].y;\n\n    time = time === undefined ? snap.speed || Math.max(Math.max(Math.min(Math.abs(posX - this.x), 1000), Math.min(Math.abs(posY - this.y), 1000)), 300) : time;\n\n    this.currentPage = {\n      x: posX,\n      y: posY,\n      pageX: x,\n      pageY: y\n    };\n    this.scrollTo(posX, posY, time, easing);\n  };\n\n  BScroll.prototype.goToPage = function (x, y, time, easing) {\n    var snap = this.options.snap;\n    if (!snap || !this.pages || !this.pages.length) {\n      return;\n    }\n\n    if (snap.loop) {\n      var len = void 0;\n      if (snap._loopX) {\n        len = this.pages.length - 2;\n        if (x >= len) {\n          x = len - 1;\n        } else if (x < 0) {\n          x = 0;\n        }\n        x += 1;\n      } else {\n        len = this.pages[0].length - 2;\n        if (y >= len) {\n          y = len - 1;\n        } else if (y < 0) {\n          y = 0;\n        }\n        y += 1;\n      }\n    }\n    this._goToPage(x, y, time, easing);\n  };\n\n  BScroll.prototype.next = function (time, easing) {\n    var snap = this.options.snap;\n    if (!snap) {\n      return;\n    }\n\n    var x = this.currentPage.pageX;\n    var y = this.currentPage.pageY;\n\n    x++;\n    if (x >= this.pages.length && this.hasVerticalScroll) {\n      x = 0;\n      y++;\n    }\n\n    this._goToPage(x, y, time, easing);\n  };\n\n  BScroll.prototype.prev = function (time, easing) {\n    var snap = this.options.snap;\n    if (!snap) {\n      return;\n    }\n\n    var x = this.currentPage.pageX;\n    var y = this.currentPage.pageY;\n\n    x--;\n    if (x < 0 && this.hasVerticalScroll) {\n      x = 0;\n      y--;\n    }\n\n    this._goToPage(x, y, time, easing);\n  };\n\n  BScroll.prototype.getCurrentPage = function () {\n    var snap = this.options.snap;\n    if (!snap) {\n      return null;\n    }\n\n    if (snap.loop) {\n      var currentPage = void 0;\n      if (snap._loopX) {\n        currentPage = extend({}, this.currentPage, {\n          pageX: this.currentPage.pageX - 1\n        });\n      } else {\n        currentPage = extend({}, this.currentPage, {\n          pageY: this.currentPage.pageY - 1\n        });\n      }\n      return currentPage;\n    }\n    return this.currentPage;\n  };\n}\n\nfunction wheelMixin(BScroll) {\n  BScroll.prototype.wheelTo = function () {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n    if (this.options.wheel) {\n      this.y = -index * this.itemHeight;\n      this.scrollTo(0, this.y);\n    }\n  };\n\n  BScroll.prototype.getSelectedIndex = function () {\n    return this.options.wheel && this.selectedIndex;\n  };\n\n  BScroll.prototype._initWheel = function () {\n    var wheel = this.options.wheel;\n    if (!wheel.wheelWrapperClass) {\n      wheel.wheelWrapperClass = 'wheel-scroll';\n    }\n    if (!wheel.wheelItemClass) {\n      wheel.wheelItemClass = 'wheel-item';\n    }\n    if (wheel.selectedIndex === undefined) {\n      wheel.selectedIndex = 0;\n      warn('wheel option selectedIndex is required!');\n    }\n  };\n}\n\nvar INDICATOR_MIN_LEN = 8;\n\nfunction scrollbarMixin(BScroll) {\n  BScroll.prototype._initScrollbar = function () {\n    var _this = this;\n\n    var _options$scrollbar = this.options.scrollbar,\n        _options$scrollbar$fa = _options$scrollbar.fade,\n        fade = _options$scrollbar$fa === undefined ? true : _options$scrollbar$fa,\n        _options$scrollbar$in = _options$scrollbar.interactive,\n        interactive = _options$scrollbar$in === undefined ? false : _options$scrollbar$in;\n\n    this.indicators = [];\n    var indicator = void 0;\n\n    if (this.options.scrollX) {\n      indicator = {\n        el: createScrollbar('horizontal'),\n        direction: 'horizontal',\n        fade: fade,\n        interactive: interactive\n      };\n      this._insertScrollBar(indicator.el);\n\n      this.indicators.push(new Indicator(this, indicator));\n    }\n\n    if (this.options.scrollY) {\n      indicator = {\n        el: createScrollbar('vertical'),\n        direction: 'vertical',\n        fade: fade,\n        interactive: interactive\n      };\n      this._insertScrollBar(indicator.el);\n      this.indicators.push(new Indicator(this, indicator));\n    }\n\n    this.on('refresh', function () {\n      for (var i = 0; i < _this.indicators.length; i++) {\n        _this.indicators[i].refresh();\n      }\n    });\n\n    if (fade) {\n      this.on('scrollEnd', function () {\n        for (var i = 0; i < _this.indicators.length; i++) {\n          _this.indicators[i].fade();\n        }\n      });\n\n      this.on('scrollCancel', function () {\n        for (var i = 0; i < _this.indicators.length; i++) {\n          _this.indicators[i].fade();\n        }\n      });\n\n      this.on('scrollStart', function () {\n        for (var i = 0; i < _this.indicators.length; i++) {\n          _this.indicators[i].fade(true);\n        }\n      });\n\n      this.on('beforeScrollStart', function () {\n        for (var i = 0; i < _this.indicators.length; i++) {\n          _this.indicators[i].fade(true, true);\n        }\n      });\n    }\n\n    this.on('destroy', function () {\n      _this._removeScrollBars();\n    });\n  };\n\n  BScroll.prototype._insertScrollBar = function (scrollbar) {\n    this.wrapper.appendChild(scrollbar);\n  };\n\n  BScroll.prototype._removeScrollBars = function () {\n    for (var i = 0; i < this.indicators.length; i++) {\n      this.indicators[i].destroy();\n    }\n  };\n}\n\nfunction createScrollbar(direction) {\n  var scrollbar = document.createElement('div');\n  var indicator = document.createElement('div');\n\n  scrollbar.style.cssText = 'position:absolute;z-index:9999;pointerEvents:none';\n  indicator.style.cssText = 'box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px;';\n\n  indicator.className = 'bscroll-indicator';\n\n  if (direction === 'horizontal') {\n    scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';\n    indicator.style.height = '100%';\n    scrollbar.className = 'bscroll-horizontal-scrollbar';\n  } else {\n    scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';\n    indicator.style.width = '100%';\n    scrollbar.className = 'bscroll-vertical-scrollbar';\n  }\n\n  scrollbar.style.cssText += ';overflow:hidden';\n  scrollbar.appendChild(indicator);\n\n  return scrollbar;\n}\n\nfunction Indicator(scroller, options) {\n  this.wrapper = options.el;\n  this.wrapperStyle = this.wrapper.style;\n  this.indicator = this.wrapper.children[0];\n  this.indicatorStyle = this.indicator.style;\n  this.scroller = scroller;\n  this.direction = options.direction;\n  if (options.fade) {\n    this.visible = 0;\n    this.wrapperStyle.opacity = '0';\n  } else {\n    this.visible = 1;\n  }\n\n  this.sizeRatioX = 1;\n  this.sizeRatioY = 1;\n  this.maxPosX = 0;\n  this.maxPosY = 0;\n  this.x = 0;\n  this.y = 0;\n\n  if (options.interactive) {\n    this._addDOMEvents();\n  }\n}\n\nIndicator.prototype.handleEvent = function (e) {\n  switch (e.type) {\n    case 'touchstart':\n    case 'mousedown':\n      this._start(e);\n      break;\n    case 'touchmove':\n    case 'mousemove':\n      this._move(e);\n      break;\n    case 'touchend':\n    case 'mouseup':\n    case 'touchcancel':\n    case 'mousecancel':\n      this._end(e);\n      break;\n  }\n};\n\nIndicator.prototype.refresh = function () {\n  if (this._shouldShow()) {\n    this.transitionTime();\n    this._calculate();\n    this.updatePosition();\n  }\n};\n\nIndicator.prototype.fade = function (visible, hold) {\n  var _this2 = this;\n\n  if (hold && !this.visible) {\n    return;\n  }\n\n  var time = visible ? 250 : 500;\n\n  visible = visible ? '1' : '0';\n\n  this.wrapperStyle[style.transitionDuration] = time + 'ms';\n\n  clearTimeout(this.fadeTimeout);\n  this.fadeTimeout = setTimeout(function () {\n    _this2.wrapperStyle.opacity = visible;\n    _this2.visible = +visible;\n  }, 0);\n};\n\nIndicator.prototype.updatePosition = function () {\n  if (this.direction === 'vertical') {\n    var y = Math.round(this.sizeRatioY * this.scroller.y);\n\n    if (y < 0) {\n      this.transitionTime(500);\n      var height = Math.max(this.indicatorHeight + y * 3, INDICATOR_MIN_LEN);\n      this.indicatorStyle.height = height + 'px';\n      y = 0;\n    } else if (y > this.maxPosY) {\n      this.transitionTime(500);\n      var _height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, INDICATOR_MIN_LEN);\n      this.indicatorStyle.height = _height + 'px';\n      y = this.maxPosY + this.indicatorHeight - _height;\n    } else {\n      this.indicatorStyle.height = this.indicatorHeight + 'px';\n    }\n    this.y = y;\n\n    if (this.scroller.options.useTransform) {\n      this.indicatorStyle[style.transform] = 'translateY(' + y + 'px)' + this.scroller.translateZ;\n    } else {\n      this.indicatorStyle.top = y + 'px';\n    }\n  } else {\n    var x = Math.round(this.sizeRatioX * this.scroller.x);\n\n    if (x < 0) {\n      this.transitionTime(500);\n      var width = Math.max(this.indicatorWidth + x * 3, INDICATOR_MIN_LEN);\n      this.indicatorStyle.width = width + 'px';\n      x = 0;\n    } else if (x > this.maxPosX) {\n      this.transitionTime(500);\n      var _width = Math.max(this.indicatorWidth - (x - this.maxPosX) * 3, INDICATOR_MIN_LEN);\n      this.indicatorStyle.width = _width + 'px';\n      x = this.maxPosX + this.indicatorWidth - _width;\n    } else {\n      this.indicatorStyle.width = this.indicatorWidth + 'px';\n    }\n\n    this.x = x;\n\n    if (this.scroller.options.useTransform) {\n      this.indicatorStyle[style.transform] = 'translateX(' + x + 'px)' + this.scroller.translateZ;\n    } else {\n      this.indicatorStyle.left = x + 'px';\n    }\n  }\n};\n\nIndicator.prototype.transitionTime = function () {\n  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  this.indicatorStyle[style.transitionDuration] = time + 'ms';\n};\n\nIndicator.prototype.transitionTimingFunction = function (easing) {\n  this.indicatorStyle[style.transitionTimingFunction] = easing;\n};\n\nIndicator.prototype.destroy = function () {\n  this._removeDOMEvents();\n  this.wrapper.parentNode.removeChild(this.wrapper);\n};\n\nIndicator.prototype._start = function (e) {\n  var point = e.touches ? e.touches[0] : e;\n\n  e.preventDefault();\n  e.stopPropagation();\n\n  this.transitionTime();\n\n  this.initiated = true;\n  this.moved = false;\n  this.lastPointX = point.pageX;\n  this.lastPointY = point.pageY;\n\n  this.startTime = getNow();\n\n  this._handleMoveEvents(addEvent);\n  this.scroller.trigger('beforeScrollStart');\n};\n\nIndicator.prototype._move = function (e) {\n  var point = e.touches ? e.touches[0] : e;\n\n  e.preventDefault();\n  e.stopPropagation();\n\n  if (!this.moved) {\n    this.scroller.trigger('scrollStart');\n  }\n\n  this.moved = true;\n\n  var deltaX = point.pageX - this.lastPointX;\n  this.lastPointX = point.pageX;\n\n  var deltaY = point.pageY - this.lastPointY;\n  this.lastPointY = point.pageY;\n\n  var newX = this.x + deltaX;\n  var newY = this.y + deltaY;\n\n  this._pos(newX, newY);\n};\n\nIndicator.prototype._end = function (e) {\n  if (!this.initiated) {\n    return;\n  }\n  this.initiated = false;\n\n  e.preventDefault();\n  e.stopPropagation();\n\n  this._handleMoveEvents(removeEvent);\n\n  var snapOption = this.scroller.options.snap;\n  if (snapOption) {\n    var speed = snapOption.speed,\n        _snapOption$easing = snapOption.easing,\n        easing = _snapOption$easing === undefined ? ease.bounce : _snapOption$easing;\n\n    var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);\n\n    var time = speed || Math.max(Math.max(Math.min(Math.abs(this.scroller.x - snap.x), 1000), Math.min(Math.abs(this.scroller.y - snap.y), 1000)), 300);\n\n    if (this.scroller.x !== snap.x || this.scroller.y !== snap.y) {\n      this.scroller.directionX = 0;\n      this.scroller.directionY = 0;\n      this.scroller.currentPage = snap;\n      this.scroller.scrollTo(snap.x, snap.y, time, easing);\n    }\n  }\n\n  if (this.moved) {\n    this.scroller.trigger('scrollEnd', {\n      x: this.scroller.x,\n      y: this.scroller.y\n    });\n  }\n};\n\nIndicator.prototype._pos = function (x, y) {\n  if (x < 0) {\n    x = 0;\n  } else if (x > this.maxPosX) {\n    x = this.maxPosX;\n  }\n\n  if (y < 0) {\n    y = 0;\n  } else if (y > this.maxPosY) {\n    y = this.maxPosY;\n  }\n\n  x = Math.round(x / this.sizeRatioX);\n  y = Math.round(y / this.sizeRatioY);\n\n  this.scroller.scrollTo(x, y);\n  this.scroller.trigger('scroll', {\n    x: this.scroller.x,\n    y: this.scroller.y\n  });\n};\n\nIndicator.prototype._shouldShow = function () {\n  if (this.direction === 'vertical' && this.scroller.hasVerticalScroll || this.direction === 'horizontal' && this.scroller.hasHorizontalScroll) {\n    this.wrapper.style.display = '';\n    return true;\n  }\n  this.wrapper.style.display = 'none';\n  return false;\n};\n\nIndicator.prototype._calculate = function () {\n  if (this.direction === 'vertical') {\n    var wrapperHeight = this.wrapper.clientHeight;\n    this.indicatorHeight = Math.max(Math.round(wrapperHeight * wrapperHeight / (this.scroller.scrollerHeight || wrapperHeight || 1)), INDICATOR_MIN_LEN);\n    this.indicatorStyle.height = this.indicatorHeight + 'px';\n\n    this.maxPosY = wrapperHeight - this.indicatorHeight;\n\n    this.sizeRatioY = this.maxPosY / this.scroller.maxScrollY;\n  } else {\n    var wrapperWidth = this.wrapper.clientWidth;\n    this.indicatorWidth = Math.max(Math.round(wrapperWidth * wrapperWidth / (this.scroller.scrollerWidth || wrapperWidth || 1)), INDICATOR_MIN_LEN);\n    this.indicatorStyle.width = this.indicatorWidth + 'px';\n\n    this.maxPosX = wrapperWidth - this.indicatorWidth;\n\n    this.sizeRatioX = this.maxPosX / this.scroller.maxScrollX;\n  }\n};\n\nIndicator.prototype._addDOMEvents = function () {\n  var eventOperation = addEvent;\n  this._handleDOMEvents(eventOperation);\n};\n\nIndicator.prototype._removeDOMEvents = function () {\n  var eventOperation = removeEvent;\n  this._handleDOMEvents(eventOperation);\n  this._handleMoveEvents(eventOperation);\n};\n\nIndicator.prototype._handleMoveEvents = function (eventOperation) {\n  if (!this.scroller.options.disableTouch) {\n    eventOperation(window, 'touchmove', this);\n  }\n  if (!this.scroller.options.disableMouse) {\n    eventOperation(window, 'mousemove', this);\n  }\n};\n\nIndicator.prototype._handleDOMEvents = function (eventOperation) {\n  if (!this.scroller.options.disableTouch) {\n    eventOperation(this.indicator, 'touchstart', this);\n    eventOperation(window, 'touchend', this);\n  }\n  if (!this.scroller.options.disableMouse) {\n    eventOperation(this.indicator, 'mousedown', this);\n    eventOperation(window, 'mouseup', this);\n  }\n};\n\nfunction pullDownMixin(BScroll) {\n  BScroll.prototype._initPullDown = function () {\n    // must watch scroll in real time\n    this.options.probeType = PROBE_REALTIME;\n  };\n\n  BScroll.prototype._checkPullDown = function () {\n    var _options$pullDownRefr = this.options.pullDownRefresh,\n        _options$pullDownRefr2 = _options$pullDownRefr.threshold,\n        threshold = _options$pullDownRefr2 === undefined ? 90 : _options$pullDownRefr2,\n        _options$pullDownRefr3 = _options$pullDownRefr.stop,\n        stop = _options$pullDownRefr3 === undefined ? 40 : _options$pullDownRefr3;\n\n    // check if a real pull down action\n\n    if (this.directionY !== DIRECTION_DOWN || this.y < threshold) {\n      return false;\n    }\n\n    if (!this.pulling) {\n      this.pulling = true;\n      this.trigger('pullingDown');\n    }\n    this.scrollTo(this.x, stop, this.options.bounceTime, ease.bounce);\n\n    return this.pulling;\n  };\n\n  BScroll.prototype.finishPullDown = function () {\n    this.pulling = false;\n    this.resetPosition(this.options.bounceTime, ease.bounce);\n  };\n\n  BScroll.prototype.openPullDown = function () {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    this.options.pullDownRefresh = config;\n    this._initPullDown();\n  };\n\n  BScroll.prototype.closePullDown = function () {\n    this.options.pullDownRefresh = false;\n  };\n}\n\nfunction pullUpMixin(BScroll) {\n  BScroll.prototype._initPullUp = function () {\n    // must watch scroll in real time\n    this.options.probeType = PROBE_REALTIME;\n\n    this.pullupWatching = false;\n    this._watchPullUp();\n  };\n\n  BScroll.prototype._watchPullUp = function () {\n    if (this.pullupWatching) {\n      return;\n    }\n    this.pullupWatching = true;\n    this.on('scroll', this._checkToEnd);\n  };\n\n  BScroll.prototype._checkToEnd = function (pos) {\n    var _this = this;\n\n    var _options$pullUpLoad$t = this.options.pullUpLoad.threshold,\n        threshold = _options$pullUpLoad$t === undefined ? 0 : _options$pullUpLoad$t;\n\n    if (this.movingDirectionY === DIRECTION_UP && pos.y <= this.maxScrollY + threshold) {\n      // reset pullupWatching status after scroll end.\n      this.once('scrollEnd', function () {\n        _this.pullupWatching = false;\n      });\n      this.trigger('pullingUp');\n      this.off('scroll', this._checkToEnd);\n    }\n  };\n\n  BScroll.prototype.finishPullUp = function () {\n    var _this2 = this;\n\n    if (this.pullupWatching) {\n      this.once('scrollEnd', function () {\n        _this2._watchPullUp();\n      });\n    } else {\n      this._watchPullUp();\n    }\n  };\n\n  BScroll.prototype.openPullUp = function () {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n    this.options.pullUpLoad = config;\n    this._initPullUp();\n  };\n\n  BScroll.prototype.closePullUp = function () {\n    this.options.pullUpLoad = false;\n    if (!this.pullupWatching) {\n      return;\n    }\n    this.pullupWatching = false;\n    this.off('scroll', this._checkToEnd);\n  };\n}\n\nfunction mouseWheelMixin(BScroll) {\n  BScroll.prototype._initMouseWheel = function () {\n    var _this = this;\n\n    this._handleMouseWheelEvent(addEvent);\n\n    this.on('destroy', function () {\n      clearTimeout(_this.mouseWheelTimer);\n      clearTimeout(_this.mouseWheelEndTimer);\n      _this._handleMouseWheelEvent(removeEvent);\n    });\n\n    this.firstWheelOpreation = true;\n  };\n\n  BScroll.prototype._handleMouseWheelEvent = function (eventOperation) {\n    eventOperation(this.wrapper, 'wheel', this);\n    eventOperation(this.wrapper, 'mousewheel', this);\n    eventOperation(this.wrapper, 'DOMMouseScroll', this);\n  };\n\n  BScroll.prototype._onMouseWheel = function (e) {\n    var _this2 = this;\n\n    if (!this.enabled) {\n      return;\n    }\n    e.preventDefault();\n\n    if (this.options.stopPropagation) {\n      e.stopPropagation();\n    }\n\n    if (this.firstWheelOpreation) {\n      this.trigger('scrollStart');\n    }\n    this.firstWheelOpreation = false;\n\n    var _options$mouseWheel = this.options.mouseWheel,\n        _options$mouseWheel$s = _options$mouseWheel.speed,\n        speed = _options$mouseWheel$s === undefined ? 20 : _options$mouseWheel$s,\n        _options$mouseWheel$i = _options$mouseWheel.invert,\n        invert = _options$mouseWheel$i === undefined ? false : _options$mouseWheel$i,\n        _options$mouseWheel$e = _options$mouseWheel.easeTime,\n        easeTime = _options$mouseWheel$e === undefined ? 300 : _options$mouseWheel$e;\n\n\n    clearTimeout(this.mouseWheelTimer);\n    this.mouseWheelTimer = setTimeout(function () {\n      if (!_this2.options.snap && !easeTime) {\n        _this2.trigger('scrollEnd', {\n          x: _this2.x,\n          y: _this2.y\n        });\n      }\n      _this2.firstWheelOpreation = true;\n    }, 400);\n\n    var wheelDeltaX = void 0;\n    var wheelDeltaY = void 0;\n\n    switch (true) {\n      case 'deltaX' in e:\n        if (e.deltaMode === 1) {\n          wheelDeltaX = -e.deltaX * speed;\n          wheelDeltaY = -e.deltaY * speed;\n        } else {\n          wheelDeltaX = -e.deltaX;\n          wheelDeltaY = -e.deltaY;\n        }\n        break;\n      case 'wheelDeltaX' in e:\n        wheelDeltaX = e.wheelDeltaX / 120 * speed;\n        wheelDeltaY = e.wheelDeltaY / 120 * speed;\n        break;\n      case 'wheelDelta' in e:\n        wheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * speed;\n        break;\n      case 'detail' in e:\n        wheelDeltaX = wheelDeltaY = -e.detail / 3 * speed;\n        break;\n      default:\n        return;\n    }\n\n    var direction = invert ? -1 : 1;\n    wheelDeltaX *= direction;\n    wheelDeltaY *= direction;\n\n    if (!this.hasVerticalScroll) {\n      wheelDeltaX = wheelDeltaY;\n      wheelDeltaY = 0;\n    }\n\n    var newX = void 0;\n    var newY = void 0;\n    if (this.options.snap) {\n      newX = this.currentPage.pageX;\n      newY = this.currentPage.pageY;\n\n      if (wheelDeltaX > 0) {\n        newX--;\n      } else if (wheelDeltaX < 0) {\n        newX++;\n      }\n\n      if (wheelDeltaY > 0) {\n        newY--;\n      } else if (wheelDeltaY < 0) {\n        newY++;\n      }\n\n      this._goToPage(newX, newY);\n      return;\n    }\n\n    newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);\n    newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);\n\n    this.movingDirectionX = this.directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;\n    this.movingDirectionY = this.directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;\n\n    if (newX > this.minScrollX) {\n      newX = this.minScrollX;\n    } else if (newX < this.maxScrollX) {\n      newX = this.maxScrollX;\n    }\n\n    if (newY > this.minScrollY) {\n      newY = this.minScrollY;\n    } else if (newY < this.maxScrollY) {\n      newY = this.maxScrollY;\n    }\n\n    var needTriggerEnd = this.y === newY;\n    this.scrollTo(newX, newY, easeTime, ease.swipe);\n    this.trigger('scroll', {\n      x: this.x,\n      y: this.y\n    });\n    clearTimeout(this.mouseWheelEndTimer);\n    if (needTriggerEnd) {\n      this.mouseWheelEndTimer = setTimeout(function () {\n        _this2.trigger('scrollEnd', {\n          x: _this2.x,\n          y: _this2.y\n        });\n      }, easeTime);\n    }\n  };\n}\n\nfunction zoomMixin(BScroll) {\n  BScroll.prototype._initZoom = function () {\n    var _options$zoom = this.options.zoom,\n        _options$zoom$start = _options$zoom.start,\n        start = _options$zoom$start === undefined ? 1 : _options$zoom$start,\n        _options$zoom$min = _options$zoom.min,\n        min = _options$zoom$min === undefined ? 1 : _options$zoom$min,\n        _options$zoom$max = _options$zoom.max,\n        max = _options$zoom$max === undefined ? 4 : _options$zoom$max;\n\n    this.scale = Math.min(Math.max(start, min), max);\n    this.setScale(this.scale);\n    this.scrollerStyle[style.transformOrigin] = '0 0';\n  };\n\n  BScroll.prototype._zoomTo = function (scale, originX, originY, startScale) {\n    this.scaled = true;\n\n    var lastScale = scale / (startScale || this.scale);\n    this.setScale(scale);\n\n    this.refresh();\n\n    var newX = Math.round(this.startX - (originX - this.relativeX) * (lastScale - 1));\n    var newY = Math.round(this.startY - (originY - this.relativeY) * (lastScale - 1));\n\n    if (newX > this.minScrollX) {\n      newX = this.minScrollX;\n    } else if (newX < this.maxScrollX) {\n      newX = this.maxScrollX;\n    }\n\n    if (newY > this.minScrollY) {\n      newY = this.minScrollY;\n    } else if (newY < this.maxScrollY) {\n      newY = this.maxScrollY;\n    }\n\n    if (this.x !== newX || this.y !== newY) {\n      this.scrollTo(newX, newY, this.options.bounceTime);\n    }\n\n    this.scaled = false;\n  };\n\n  BScroll.prototype.zoomTo = function (scale, x, y) {\n    var _offsetToBody = offsetToBody(this.wrapper),\n        left = _offsetToBody.left,\n        top = _offsetToBody.top;\n\n    var originX = x + left - this.x;\n    var originY = y + top - this.y;\n    this._zoomTo(scale, originX, originY);\n  };\n\n  BScroll.prototype._zoomStart = function (e) {\n    var firstFinger = e.touches[0];\n    var secondFinger = e.touches[1];\n    var deltaX = Math.abs(firstFinger.pageX - secondFinger.pageX);\n    var deltaY = Math.abs(firstFinger.pageY - secondFinger.pageY);\n\n    this.startDistance = getDistance(deltaX, deltaY);\n    this.startScale = this.scale;\n\n    var _offsetToBody2 = offsetToBody(this.wrapper),\n        left = _offsetToBody2.left,\n        top = _offsetToBody2.top;\n\n    this.originX = Math.abs(firstFinger.pageX + secondFinger.pageX) / 2 + left - this.x;\n    this.originY = Math.abs(firstFinger.pageY + secondFinger.pageY) / 2 + top - this.y;\n\n    this.trigger('zoomStart');\n  };\n\n  BScroll.prototype._zoom = function (e) {\n    if (!this.enabled || this.destroyed || eventType[e.type] !== this.initiated) {\n      return;\n    }\n\n    if (this.options.preventDefault) {\n      e.preventDefault();\n    }\n\n    if (this.options.stopPropagation) {\n      e.stopPropagation();\n    }\n\n    var firstFinger = e.touches[0];\n    var secondFinger = e.touches[1];\n    var deltaX = Math.abs(firstFinger.pageX - secondFinger.pageX);\n    var deltaY = Math.abs(firstFinger.pageY - secondFinger.pageY);\n    var distance = getDistance(deltaX, deltaY);\n    var scale = distance / this.startDistance * this.startScale;\n\n    this.scaled = true;\n\n    var _options$zoom2 = this.options.zoom,\n        _options$zoom2$min = _options$zoom2.min,\n        min = _options$zoom2$min === undefined ? 1 : _options$zoom2$min,\n        _options$zoom2$max = _options$zoom2.max,\n        max = _options$zoom2$max === undefined ? 4 : _options$zoom2$max;\n\n\n    if (scale < min) {\n      scale = 0.5 * min * Math.pow(2.0, scale / min);\n    } else if (scale > max) {\n      scale = 2.0 * max * Math.pow(0.5, max / scale);\n    }\n\n    var lastScale = scale / this.startScale;\n\n    var x = this.startX - (this.originX - this.relativeX) * (lastScale - 1);\n    var y = this.startY - (this.originY - this.relativeY) * (lastScale - 1);\n\n    this.setScale(scale);\n\n    this.scrollTo(x, y, 0);\n  };\n\n  BScroll.prototype._zoomEnd = function (e) {\n    if (!this.enabled || this.destroyed || eventType[e.type] !== this.initiated) {\n      return;\n    }\n\n    if (this.options.preventDefault) {\n      e.preventDefault();\n    }\n\n    if (this.options.stopPropagation) {\n      e.stopPropagation();\n    }\n\n    this.isInTransition = false;\n    this.isAnimating = false;\n    this.initiated = 0;\n\n    var _options$zoom3 = this.options.zoom,\n        _options$zoom3$min = _options$zoom3.min,\n        min = _options$zoom3$min === undefined ? 1 : _options$zoom3$min,\n        _options$zoom3$max = _options$zoom3.max,\n        max = _options$zoom3$max === undefined ? 4 : _options$zoom3$max;\n\n\n    var scale = this.scale > max ? max : this.scale < min ? min : this.scale;\n\n    this._zoomTo(scale, this.originX, this.originY, this.startScale);\n\n    this.trigger('zoomEnd');\n  };\n}\n\n// import { ease } from '../util/ease'\n\n// Number of items to instantiate beyond current view in the scroll direction.\nvar RUNWAY_ITEMS = 30;\n\n// Number of items to instantiate beyond current view in the opposite direction.\nvar RUNWAY_ITEMS_OPPOSITE = 10;\n\n// The animation interval (in ms) for fading in content from tombstones.\nvar ANIMATION_DURATION_MS = 200;\n\n// The number of pixels of default additional length to allow scrolling to.\nvar DEFAULT_SCROLL_RUNWAY = 2000;\n\nfunction infiniteMixin(BScroll) {\n  BScroll.prototype._initInfinite = function () {\n    this.options.probeType = 3;\n    this.maxScrollY = -DEFAULT_SCROLL_RUNWAY;\n    this.infiniteScroller = new InfiniteScroller(this, this.options.infinity);\n  };\n}\n\nfunction isTombstoneNode(node) {\n  if (node && node.classList) {\n    return node.classList.contains('tombstone');\n  }\n}\n\nfunction InfiniteScroller(scroller, options) {\n  var _this = this;\n\n  this.options = options;\n  assert(typeof this.options.createTombstone === 'function', 'Infinite scroll need createTombstone Function to create tombstone');\n\n  assert(typeof this.options.fetch === 'function', 'Infinite scroll need fetch Function to fetch new data.');\n\n  assert(typeof this.options.render === 'function', 'Infinite scroll need render Function to render each item.');\n\n  this.firstAttachedItem = 0;\n  this.lastAttachedItem = 0;\n\n  this.anchorScrollTop = 0;\n  this.anchorItem = {\n    index: 0,\n    offset: 0\n  };\n  this.tombstoneHeight = 0;\n  this.tombstoneWidth = 0;\n  this.tombstones = [];\n\n  this.items = [];\n  this.loadedItems = 0;\n  this.requestInProgress = false;\n  this.hasMore = true;\n\n  this.scroller = scroller;\n  this.wrapperEl = this.scroller.wrapper;\n  this.scrollerEl = this.scroller.scroller;\n  this.scroller.on('scroll', function () {\n    _this.onScroll();\n  });\n  this.scroller.on('resize', function () {\n    _this.onResize();\n  });\n\n  this.onResize();\n}\n\nInfiniteScroller.prototype.onScroll = function () {\n  var scrollTop = -this.scroller.y;\n  var delta = scrollTop - this.anchorScrollTop;\n  if (scrollTop === 0) {\n    this.anchorItem = {\n      index: 0,\n      offset: 0\n    };\n  } else {\n    this.anchorItem = this._calculateAnchoredItem(this.anchorItem, delta);\n  }\n\n  this.anchorScrollTop = scrollTop;\n  var lastScreenItem = this._calculateAnchoredItem(this.anchorItem, this.wrapperEl.offsetHeight);\n\n  var start = this.anchorItem.index;\n  var end = lastScreenItem.index;\n  if (delta < 0) {\n    start -= RUNWAY_ITEMS;\n    end += RUNWAY_ITEMS_OPPOSITE;\n  } else {\n    start -= RUNWAY_ITEMS_OPPOSITE;\n    end += RUNWAY_ITEMS;\n  }\n  this.fill(start, end);\n  this.maybeRequestContent();\n};\n\nInfiniteScroller.prototype.onResize = function () {\n  var tombstone = this.options.createTombstone();\n  tombstone.style.position = 'absolute';\n  this.scrollerEl.appendChild(tombstone);\n  tombstone.style.display = '';\n  this.tombstoneHeight = tombstone.offsetHeight;\n  this.tombstoneWidth = tombstone.offsetWidth;\n  this.scrollerEl.removeChild(tombstone);\n\n  for (var i = 0; i < this.items.length; i++) {\n    this.items[i].height = this.items[i].width = 0;\n  }\n\n  this.onScroll();\n};\n\nInfiniteScroller.prototype.fill = function (start, end) {\n  this.firstAttachedItem = Math.max(0, start);\n  if (!this.hasMore) {\n    end = Math.min(end, this.items.length);\n  }\n  this.lastAttachedItem = end;\n  this.attachContent();\n};\n\nInfiniteScroller.prototype.maybeRequestContent = function () {\n  var _this2 = this;\n\n  if (this.requestInProgress || !this.hasMore) {\n    return;\n  }\n  var itemsNeeded = this.lastAttachedItem - this.loadedItems;\n  if (itemsNeeded <= 0) {\n    return;\n  }\n  this.requestInProgress = true;\n  this.options.fetch(itemsNeeded).then(function (items) {\n    _this2.requestInProgress = false;\n    if (items) {\n      _this2.addContent(items);\n    } else {\n      _this2.hasMore = false;\n      var tombstoneLen = _this2._removeTombstones();\n      var curPos = 0;\n      if (_this2.anchorItem.index <= _this2.items.length) {\n        curPos = _this2._fixScrollPosition();\n        _this2._setupAnimations({}, curPos);\n        _this2.scroller.resetPosition(_this2.scroller.options.bounceTime);\n      } else {\n        _this2.anchorItem.index -= tombstoneLen;\n        curPos = _this2._fixScrollPosition();\n        _this2._setupAnimations({}, curPos);\n        _this2.scroller.stop();\n        _this2.scroller.resetPosition();\n        _this2.onScroll();\n      }\n    }\n  });\n};\n\nInfiniteScroller.prototype.addContent = function (items) {\n  for (var i = 0; i < items.length; i++) {\n    if (this.items.length <= this.loadedItems) {\n      this._addItem();\n    }\n    this.items[this.loadedItems++].data = items[i];\n  }\n  this.attachContent();\n  this.maybeRequestContent();\n};\n\nInfiniteScroller.prototype.attachContent = function () {\n  var unusedNodes = this._collectUnusedNodes();\n  var tombstoneAnimations = this._createDOMNodes(unusedNodes);\n  this._cleanupUnusedNodes(unusedNodes);\n  this._cacheNodeSize();\n  var curPos = this._fixScrollPosition();\n  this._setupAnimations(tombstoneAnimations, curPos);\n};\n\nInfiniteScroller.prototype.resetMore = function () {\n  this.hasMore = true;\n};\n\nInfiniteScroller.prototype._removeTombstones = function () {\n  var markIndex = void 0;\n  var tombstoneLen = 0;\n  var itemLen = this.items.length;\n  for (var i = 0; i < itemLen; i++) {\n    var currentNode = this.items[i].node;\n    var currentData = this.items[i].data;\n    if ((!currentNode || isTombstoneNode(currentNode)) && !currentData) {\n      if (!markIndex) {\n        markIndex = i;\n      }\n      if (currentNode) {\n        this.scrollerEl.removeChild(currentNode);\n      }\n    }\n  }\n  tombstoneLen = itemLen - markIndex;\n  this.items.splice(markIndex);\n  this.lastAttachedItem = Math.min(this.lastAttachedItem, this.items.length);\n  return tombstoneLen;\n};\n\nInfiniteScroller.prototype._collectUnusedNodes = function () {\n  var unusedNodes = [];\n  for (var i = 0; i < this.items.length; i++) {\n    // Skip the items which should be visible.\n    if (i === this.firstAttachedItem) {\n      i = this.lastAttachedItem - 1;\n      continue;\n    }\n    var currentNode = this.items[i].node;\n    if (currentNode) {\n      if (isTombstoneNode(currentNode)) {\n        // Cache tombstones for reuse\n        this.tombstones.push(currentNode);\n        this.tombstones[this.tombstones.length - 1].style.display = 'none';\n      } else {\n        unusedNodes.push(currentNode);\n      }\n    }\n    this.items[i].node = null;\n  }\n  return unusedNodes;\n};\n\nInfiniteScroller.prototype._createDOMNodes = function (unusedNodes) {\n  var tombstoneAnimations = {};\n  for (var i = this.firstAttachedItem; i < this.lastAttachedItem; i++) {\n    while (this.items.length <= i) {\n      this._addItem();\n    }\n    var currentNode = this.items[i].node;\n    var currentData = this.items[i].data;\n    if (currentNode) {\n      if (isTombstoneNode(currentNode) && currentData) {\n        currentNode.style.zIndex = 1;\n        tombstoneAnimations[i] = [currentNode, this.items[i].top - this.anchorScrollTop];\n        this.items[i].node = null;\n      } else {\n        continue;\n      }\n    }\n    var node = currentData ? this.options.render(currentData, unusedNodes.pop()) : this._getTombStone();\n    node.style.position = 'absolute';\n    this.items[i].top = -1;\n    this.scrollerEl.appendChild(node);\n    this.items[i].node = node;\n  }\n  return tombstoneAnimations;\n};\n\nInfiniteScroller.prototype._cleanupUnusedNodes = function (unusedNodes) {\n  while (unusedNodes.length) {\n    this.scrollerEl.removeChild(unusedNodes.pop());\n  }\n};\n\nInfiniteScroller.prototype._cacheNodeSize = function () {\n  for (var i = this.firstAttachedItem; i < this.lastAttachedItem; i++) {\n    // Only cache the height if we have the real contents, not a placeholder.\n    if (this.items[i].data && !this.items[i].height) {\n      this.items[i].height = this.items[i].node.offsetHeight;\n      this.items[i].width = this.items[i].node.offsetWidth;\n    }\n  }\n};\n\nInfiniteScroller.prototype._fixScrollPosition = function () {\n  this.anchorScrollTop = 0;\n  for (var _i = 0; _i < this.anchorItem.index; _i++) {\n    this.anchorScrollTop += this.items[_i].height || this.tombstoneHeight;\n  }\n  this.anchorScrollTop += this.anchorItem.offset;\n\n  // Position all nodes.\n  var curPos = this.anchorScrollTop - this.anchorItem.offset;\n  var i = this.anchorItem.index;\n  while (i > this.firstAttachedItem) {\n    curPos -= this.items[i - 1].height || this.tombstoneHeight;\n    i--;\n  }\n\n  return curPos;\n};\n\nInfiniteScroller.prototype._setupAnimations = function (tombstoneAnimations, curPos) {\n  var _this3 = this;\n\n  for (var i in tombstoneAnimations) {\n    var animation = tombstoneAnimations[i];\n    this.items[i].node.style.transform = 'translateY(' + (this.anchorScrollTop + animation[1]) + 'px) scale(' + this.tombstoneWidth / this.items[i].width + ', ' + this.tombstoneHeight / this.items[i].height + ')';\n    // Call offsetTop on the nodes to be animated to force them to apply current transforms.\n    /* eslint-disable no-unused-expressions */\n    this.items[i].node.offsetTop;\n    animation[0].offsetTop;\n    this.items[i].node.style.transition = 'transform ' + ANIMATION_DURATION_MS + 'ms';\n  }\n\n  for (var _i2 = this.firstAttachedItem; _i2 < this.lastAttachedItem; _i2++) {\n    var _animation = tombstoneAnimations[_i2];\n    if (_animation) {\n      var tombstoneNode = _animation[0];\n      tombstoneNode.style.transition = 'transform ' + ANIMATION_DURATION_MS + 'ms, opacity ' + ANIMATION_DURATION_MS + 'ms';\n      tombstoneNode.style.transform = 'translateY(' + curPos + 'px) scale(' + this.items[_i2].width / this.tombstoneWidth + ', ' + this.items[_i2].height / this.tombstoneHeight + ')';\n      tombstoneNode.style.opacity = 0;\n    }\n    if (curPos !== this.items[_i2].top) {\n      if (!_animation) {\n        this.items[_i2].node.style.transition = '';\n      }\n      this.items[_i2].node.style.transform = 'translateY(' + curPos + 'px)';\n    }\n    this.items[_i2].top = curPos;\n    curPos += this.items[_i2].height || this.tombstoneHeight;\n  }\n\n  this.scroller.maxScrollY = -(curPos - this.wrapperEl.offsetHeight + (this.hasMore ? DEFAULT_SCROLL_RUNWAY : 0));\n\n  setTimeout(function () {\n    for (var _i3 in tombstoneAnimations) {\n      var _animation2 = tombstoneAnimations[_i3];\n      _animation2[0].style.display = 'none';\n      // Tombstone can be recycled now.\n      _this3.tombstones.push(_animation2[0]);\n    }\n  }, ANIMATION_DURATION_MS);\n};\n\nInfiniteScroller.prototype._getTombStone = function () {\n  var tombstone = this.tombstones.pop();\n  if (tombstone) {\n    tombstone.style.display = '';\n    tombstone.style.opacity = 1;\n    tombstone.style.transform = '';\n    tombstone.style.transition = '';\n    return tombstone;\n  }\n  return this.options.createTombstone();\n};\n\nInfiniteScroller.prototype._addItem = function () {\n  this.items.push({\n    data: null,\n    node: null,\n    height: 0,\n    width: 0,\n    top: 0\n  });\n};\n\nInfiniteScroller.prototype._calculateAnchoredItem = function (initialAnchor, delta) {\n  if (delta === 0) {\n    return initialAnchor;\n  }\n  var i = initialAnchor.index;\n  var tombstones = 0;\n\n  delta += initialAnchor.offset;\n  if (delta < 0) {\n    while (delta < 0 && i > 0 && this.items[i - 1].height) {\n      delta += this.items[i - 1].height;\n      i--;\n    }\n    tombstones = Math.max(-i, Math.ceil(Math.min(delta, 0) / this.tombstoneHeight));\n  } else {\n    while (delta > 0 && i < this.items.length && this.items[i].height && this.items[i].height < delta) {\n      delta -= this.items[i].height;\n      i++;\n    }\n    if (i >= this.items.length || !this.items[i].height) {\n      tombstones = Math.floor(Math.max(delta, 0) / this.tombstoneHeight);\n    }\n  }\n  i += tombstones;\n  delta -= tombstones * this.tombstoneHeight;\n\n  return {\n    index: i,\n    offset: delta\n  };\n};\n\nfunction BScroll(el, options) {\n  this.wrapper = typeof el === 'string' ? document.querySelector(el) : el;\n  if (!this.wrapper) {\n    warn('Can not resolve the wrapper DOM.');\n  }\n  this.scroller = this.wrapper.children[0];\n  if (!this.scroller) {\n    warn('The wrapper need at least one child element to be scroller.');\n  }\n  // cache style for better performance\n  this.scrollerStyle = this.scroller.style;\n\n  this._init(el, options);\n}\n\ninitMixin(BScroll);\ncoreMixin(BScroll);\neventMixin(BScroll);\nsnapMixin(BScroll);\nwheelMixin(BScroll);\nscrollbarMixin(BScroll);\npullDownMixin(BScroll);\npullUpMixin(BScroll);\nmouseWheelMixin(BScroll);\nzoomMixin(BScroll);\ninfiniteMixin(BScroll);\n\nBScroll.Version = '1.12.6';\n\nreturn BScroll;\n\n})));\n","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2018, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n;(function(root) {\n'use strict';\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *(?:#+ *)?(?:\\n+|$)/,\n  nptable: noop,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?\\\\?>\\\\n*' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?>\\\\n*' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\\\\n*' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (6)\n    + '|<(?!script|pre|style)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) open tag\n    + '|</(?!script|pre|style)[a-z][\\\\w-]*\\\\s*>(?=\\\\h*\\\\n)[\\\\s\\\\S]*?(?:\\\\n{2,}|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *\\n? *<?([^\\s>]+)>?(?:(?: +\\n? *| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading| {0,3}>|<\\/?(?:tag)(?: +|\\n|\\/?>)|<(?:script|pre|style|!--))[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\[\\[\\]]|[^\\[\\]])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = edit(block.item, 'gm')\n  .replace(/bull/g, block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?-->/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block.paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', block.heading)\n  .replace('lheading', block.lheading)\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\n? *\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = edit(block.paragraph)\n  .replace('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  .getRegex();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:.*[^>\\n ].*(?:\\n|$))*)\\n*|$)/,\n  table: /^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n((?: *[^>\\n ].*(?:\\n|$))*)\\n*|$)/\n});\n\n/**\n * Pedantic grammar\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = Object.create(null);\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.pedantic) {\n    this.rules = block.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  src = src.replace(/^ +$/gm, '');\n  var next,\n      loose,\n      cap,\n      bull,\n      b,\n      item,\n      listStart,\n      listItems,\n      t,\n      space,\n      i,\n      tag,\n      l,\n      isordered,\n      istask,\n      ischecked;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? rtrim(cap, '\\n')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(item.cells[i], item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      isordered = bull.length > 1;\n\n      listStart = {\n        type: 'list_start',\n        ordered: isordered,\n        start: isordered ? +bull : '',\n        loose: false\n      };\n\n      this.tokens.push(listStart);\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      listItems = [];\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        if (loose) {\n          listStart.loose = true;\n        }\n\n        // Check for task list items\n        istask = /^\\[[ xX]\\] /.test(item);\n        ischecked = undefined;\n        if (istask) {\n          ischecked = item[1] !== ' ';\n          item = item.replace(/^\\[[ xX]\\] +/, '');\n        }\n\n        t = {\n          type: 'list_item_start',\n          task: istask,\n          checked: ischecked,\n          loose: loose\n        };\n\n        listItems.push(t);\n        this.tokens.push(t);\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      if (listStart.loose) {\n        l = listItems.length;\n        i = 0;\n        for (; i < l; i++) {\n          listItems[i].loose = true;\n        }\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      if (!this.tokens.links[tag]) {\n        this.tokens.links[tag] = {\n          href: cap[2],\n          title: cap[3]\n        };\n      }\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      item = {\n        type: 'table',\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, '')),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3] ? cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        src = src.substring(cap[0].length);\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = splitCells(\n            item.cells[i].replace(/^ *\\| *| *\\| *$/g, ''),\n            item.header.length);\n        }\n\n        this.tokens.push(item);\n\n        continue;\n      }\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noop,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(href(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(?!\\s*\\])((?:\\\\[\\[\\]]?|[^\\[\\]\\\\])+)\\]/,\n  nolink: /^!?\\[(?!\\s*\\])((?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]|[^\\[\\]])*)\\](?:\\[\\])?/,\n  strong: /^__([^\\s])__(?!_)|^\\*\\*([^\\s])\\*\\*(?!\\*)|^__([^\\s][\\s\\S]*?[^\\s])__(?!_)|^\\*\\*([^\\s][\\s\\S]*?[^\\s])\\*\\*(?!\\*)/,\n  em: /^_([^\\s_])_(?!_)|^\\*([^\\s*\"<\\[])\\*(?!\\*)|^_([^\\s][\\s\\S]*?[^\\s_])_(?!_|[^\\s.])|^_([^\\s_][\\s\\S]*?[^\\s])_(?!_|[^\\s.])|^\\*([^\\s\"<\\[][\\s\\S]*?[^\\s*])\\*(?!\\*)|^\\*([^\\s*\"<\\[][\\s\\S]*?[^\\s])\\*(?!\\*)/,\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noop,\n  text: /^(`+|[^`])[\\s\\S]*?(?=[\\\\<!\\[`*]|\\b_| {2,}\\n|$)/\n};\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', block._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[[^\\[\\]]*\\]|\\\\[\\[\\]]?|`[^`]*`|[^\\[\\]\\\\])*?/;\ninline._href = /\\s*(<(?:\\\\[<>]?|[^\\s<>\\\\])*>|(?:\\\\[()]?|\\([^\\s\\x00-\\x1f\\\\]*\\)|[^\\s\\x00-\\x1f()\\\\])*?)/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^~+(?=\\S)([\\s\\S]*?\\S)~+/,\n  text: edit(inline.text)\n    .replace(']|', '~]|')\n    .replace('|$', '|https?://|ftp://|www\\\\.|[a-zA-Z0-9.!#$%&\\'*+/=?^_`{\\\\|}~-]+@|$')\n    .getRegex()\n});\n\ninline.gfm.url = edit(inline.gfm.url)\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('{2,}', '*').getRegex()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  } else if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = '',\n      link,\n      text,\n      href,\n      title,\n      cap,\n      prevCapZero;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = escape(this.mangle(cap[1]));\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      src = src.substring(cap[0].length);\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      if (!this.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = true;\n      } else if (this.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.inRawBlock = false;\n      }\n\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      href = cap[2];\n      if (this.options.pedantic) {\n        link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        } else {\n          title = '';\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim().replace(/^<([\\s\\S]*)>$/, '$1');\n      out += this.outputLink(cap, {\n        href: InlineLexer.escapes(href),\n        title: InlineLexer.escapes(title)\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[6] || cap[5] || cap[4] || cap[3] || cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2].trim(), true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (this.inRawBlock) {\n        out += this.renderer.text(cap[0]);\n      } else {\n        out += this.renderer.text(escape(this.smartypants(cap[0])));\n      }\n      continue;\n    }\n\n    if (src) {\n      throw new Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\nInlineLexer.escapes = function(text) {\n  return text ? text.replace(InlineLexer.rules._escapes, '$1') : text;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = link.href,\n      title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = '',\n      l = text.length,\n      i = 0,\n      ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || marked.defaults;\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  if (this.options.headerIds) {\n    return '<h'\n      + level\n      + ' id=\"'\n      + this.options.headerPrefix\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n      + '\">'\n      + text\n      + '</h'\n      + level\n      + '>\\n';\n  }\n  // ignore IDs\n  return '<h' + level + '>' + text + '</h' + level + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered, start) {\n  var type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n  return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.checkbox = function(checked) {\n  return '<input '\n    + (checked ? 'checked=\"\" ' : '')\n    + 'disabled=\"\" type=\"checkbox\"'\n    + (this.options.xhtml ? ' /' : '')\n    + '> ';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  if (body) body = '<tbody>' + body + '</tbody>';\n\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + body\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' align=\"' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n  var out = '<a href=\"' + escape(href) + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n  if (href === null) {\n    return text;\n  }\n\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\nfunction TextRenderer() {}\n\n// no need for block level renderers\n\nTextRenderer.prototype.strong =\nTextRenderer.prototype.em =\nTextRenderer.prototype.codespan =\nTextRenderer.prototype.del =\nTextRenderer.prototype.text = function (text) {\n  return text;\n};\n\nTextRenderer.prototype.link =\nTextRenderer.prototype.image = function(href, title, text) {\n  return '' + text;\n};\n\nTextRenderer.prototype.br = function() {\n  return '';\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options) {\n  var parser = new Parser(options);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options);\n  // use an InlineLexer with a TextRenderer to extract pure text\n  this.inlineText = new InlineLexer(\n    src.links,\n    merge({}, this.options, {renderer: new TextRenderer()})\n  );\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        unescape(this.inlineText.output(this.token.text)));\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = '',\n          body = '',\n          i,\n          row,\n          cell,\n          j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      body = '';\n      var ordered = this.token.ordered,\n          start = this.token.start;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered, start);\n    }\n    case 'list_item_start': {\n      body = '';\n      var loose = this.token.loose;\n\n      if (this.token.task) {\n        body += this.renderer.checkbox(this.token.checked);\n      }\n\n      while (this.next().type !== 'list_item_end') {\n        body += !loose && this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      // TODO parse inline content if parameter markdown=1\n      return this.renderer.html(this.token.text);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escape.escapeTest.test(html)) {\n      return html.replace(escape.escapeReplace, function (ch) { return escape.replacements[ch]; });\n    }\n  } else {\n    if (escape.escapeTestNoEncode.test(html)) {\n      return html.replace(escape.escapeReplaceNoEncode, function (ch) { return escape.replacements[ch]; });\n    }\n  }\n\n  return html;\n}\n\nescape.escapeTest = /[&<>\"']/;\nescape.escapeReplace = /[&<>\"']/g;\nescape.replacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nescape.escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nescape.escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  return {\n    replace: function(name, val) {\n      val = val.source || val;\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\n      regex = regex.replace(name, val);\n      return this;\n    },\n    getRegex: function() {\n      return new RegExp(regex, opt);\n    }\n  };\n}\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (/^[^:]+:\\/*[^/]*$/.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n\n  if (href.slice(0, 2) === '//') {\n    return base.replace(/:[\\s\\S]*/, ':') + href;\n  } else if (href.charAt(0) === '/') {\n    return base.replace(/(:\\/*[^/]*)[\\s\\S]*/, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar baseUrls = {};\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n        var escaped = false,\n            curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n        if (escaped) {\n          // odd number of slashes means | is escaped\n          // so we leave it alone\n          return '|';\n        } else {\n          // add space before unescaped |\n          return ' |';\n        }\n      }),\n      cells = row.split(/ \\|/),\n      i = 0;\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  if (str.length === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < str.length) {\n    var currChar = str.charAt(str.length - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, str.length - suffLen);\n}\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight,\n        tokens,\n        pending,\n        i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.getDefaults = function () {\n  return {\n    baseUrl: null,\n    breaks: false,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: new Renderer(),\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tables: true,\n    xhtml: false\n  };\n};\n\nmarked.defaults = marked.getDefaults();\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  root.marked = marked;\n}\n})(this || (typeof window !== 'undefined' ? window : global));\n","\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t? self // if in worker\n\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n * MIT license http://www.opensource.org/licenses/mit-license.php/\n * @author Lea Verou http://lea.verou.me\n */\n\nvar Prism = (function(){\n\n// Private helper vars\nvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\nvar uniqueId = 0;\n\nvar _ = _self.Prism = {\n\tmanual: _self.Prism && _self.Prism.manual,\n\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\tutil: {\n\t\tencode: function (tokens) {\n\t\t\tif (tokens instanceof Token) {\n\t\t\t\treturn new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n\t\t\t} else if (_.util.type(tokens) === 'Array') {\n\t\t\t\treturn tokens.map(_.util.encode);\n\t\t\t} else {\n\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t}\n\t\t},\n\n\t\ttype: function (o) {\n\t\t\treturn Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n\t\t},\n\n\t\tobjId: function (obj) {\n\t\t\tif (!obj['__id']) {\n\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t}\n\t\t\treturn obj['__id'];\n\t\t},\n\n\t\t// Deep clone a language definition (e.g. to extend it)\n\t\tclone: function (o, visited) {\n\t\t\tvar type = _.util.type(o);\n\t\t\tvisited = visited || {};\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'Object':\n\t\t\t\t\tif (visited[_.util.objId(o)]) {\n\t\t\t\t\t\treturn visited[_.util.objId(o)];\n\t\t\t\t\t}\n\t\t\t\t\tvar clone = {};\n\t\t\t\t\tvisited[_.util.objId(o)] = clone;\n\n\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tclone[key] = _.util.clone(o[key], visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn clone;\n\n\t\t\t\tcase 'Array':\n\t\t\t\t\tif (visited[_.util.objId(o)]) {\n\t\t\t\t\t\treturn visited[_.util.objId(o)];\n\t\t\t\t\t}\n\t\t\t\t\tvar clone = [];\n\t\t\t\t\tvisited[_.util.objId(o)] = clone;\n\n\t\t\t\t\to.forEach(function (v, i) {\n\t\t\t\t\t\tclone[i] = _.util.clone(v, visited);\n\t\t\t\t\t});\n\n\t\t\t\t\treturn clone;\n\t\t\t}\n\n\t\t\treturn o;\n\t\t}\n\t},\n\n\tlanguages: {\n\t\textend: function (id, redef) {\n\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\tfor (var key in redef) {\n\t\t\t\tlang[key] = redef[key];\n\t\t\t}\n\n\t\t\treturn lang;\n\t\t},\n\n\t\t/**\n\t\t * Insert a token before another token in a language literal\n\t\t * As this needs to recreate the object (we cannot actually insert before keys in object literals),\n\t\t * we cannot just provide an object, we need anobject and a key.\n\t\t * @param inside The key (or language id) of the parent\n\t\t * @param before The key to insert before. If not provided, the function appends instead.\n\t\t * @param insert Object with the key/value pairs to insert\n\t\t * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\n\t\t */\n\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\troot = root || _.languages;\n\t\t\tvar grammar = root[inside];\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t\tinsert = arguments[1];\n\n\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\tgrammar[newToken] = insert[newToken];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn grammar;\n\t\t\t}\n\n\t\t\tvar ret = {};\n\n\t\t\tfor (var token in grammar) {\n\n\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\tif (token == before) {\n\n\t\t\t\t\t\tfor (var newToken in insert) {\n\n\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update references in other language definitions\n\t\t\t_.languages.DFS(_.languages, function(key, value) {\n\t\t\t\tif (value === root[inside] && key != inside) {\n\t\t\t\t\tthis[key] = ret;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn root[inside] = ret;\n\t\t},\n\n\t\t// Traverse a language definition with Depth First Search\n\t\tDFS: function(o, callback, type, visited) {\n\t\t\tvisited = visited || {};\n\t\t\tfor (var i in o) {\n\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\tif (_.util.type(o[i]) === 'Object' && !visited[_.util.objId(o[i])]) {\n\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, null, visited);\n\t\t\t\t\t}\n\t\t\t\t\telse if (_.util.type(o[i]) === 'Array' && !visited[_.util.objId(o[i])]) {\n\t\t\t\t\t\tvisited[_.util.objId(o[i])] = true;\n\t\t\t\t\t\t_.languages.DFS(o[i], callback, i, visited);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tplugins: {},\n\n\thighlightAll: function(async, callback) {\n\t\t_.highlightAllUnder(document, async, callback);\n\t},\n\n\thighlightAllUnder: function(container, async, callback) {\n\t\tvar env = {\n\t\t\tcallback: callback,\n\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t};\n\n\t\t_.hooks.run(\"before-highlightall\", env);\n\n\t\tvar elements = env.elements || container.querySelectorAll(env.selector);\n\n\t\tfor (var i=0, element; element = elements[i++];) {\n\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t}\n\t},\n\n\thighlightElement: function(element, async, callback) {\n\t\t// Find language\n\t\tvar language, grammar, parent = element;\n\n\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\tif (parent) {\n\t\t\tlanguage = (parent.className.match(lang) || [,''])[1].toLowerCase();\n\t\t\tgrammar = _.languages[language];\n\t\t}\n\n\t\t// Set language on the element, if not present\n\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\tif (element.parentNode) {\n\t\t\t// Set language on the parent, for styling\n\t\t\tparent = element.parentNode;\n\n\t\t\tif (/pre/i.test(parent.nodeName)) {\n\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t\t}\n\t\t}\n\n\t\tvar code = element.textContent;\n\n\t\tvar env = {\n\t\t\telement: element,\n\t\t\tlanguage: language,\n\t\t\tgrammar: grammar,\n\t\t\tcode: code\n\t\t};\n\n\t\t_.hooks.run('before-sanity-check', env);\n\n\t\tif (!env.code || !env.grammar) {\n\t\t\tif (env.code) {\n\t\t\t\t_.hooks.run('before-highlight', env);\n\t\t\t\tenv.element.textContent = env.code;\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t}\n\t\t\t_.hooks.run('complete', env);\n\t\t\treturn;\n\t\t}\n\n\t\t_.hooks.run('before-highlight', env);\n\n\t\tif (async && _self.Worker) {\n\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\tworker.onmessage = function(evt) {\n\t\t\t\tenv.highlightedCode = evt.data;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t};\n\n\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\tlanguage: env.language,\n\t\t\t\tcode: env.code,\n\t\t\t\timmediateClose: true\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\tenv.highlightedCode = _.highlight(env.code, env.grammar, env.language);\n\n\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\tcallback && callback.call(element);\n\n\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t_.hooks.run('complete', env);\n\t\t}\n\t},\n\n\thighlight: function (text, grammar, language) {\n\t\tvar env = {\n\t\t\tcode: text,\n\t\t\tgrammar: grammar,\n\t\t\tlanguage: language\n\t\t};\n\t\t_.hooks.run('before-tokenize', env);\n\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t_.hooks.run('after-tokenize', env);\n\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t},\n\n\tmatchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n\t\tvar Token = _.Token;\n\n\t\tfor (var token in grammar) {\n\t\t\tif(!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (token == target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = (_.util.type(patterns) === \"Array\") ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tvar pattern = patterns[j],\n\t\t\t\t\tinside = pattern.inside,\n\t\t\t\t\tlookbehind = !!pattern.lookbehind,\n\t\t\t\t\tgreedy = !!pattern.greedy,\n\t\t\t\t\tlookbehindLength = 0,\n\t\t\t\t\talias = pattern.alias;\n\n\t\t\t\tif (greedy && !pattern.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n\t\t\t\t\tpattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n\t\t\t\t}\n\n\t\t\t\tpattern = pattern.pattern || pattern;\n\n\t\t\t\t// Don’t cache length as it changes during the loop\n\t\t\t\tfor (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n\n\t\t\t\t\tvar str = strarr[i];\n\n\t\t\t\t\tif (strarr.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (greedy && i != strarr.length - 1) {\n\t\t\t\t\t\tpattern.lastIndex = pos;\n\t\t\t\t\t\tvar match = pattern.exec(text);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index + (lookbehind ? match[1].length : 0),\n\t\t\t\t\t\t    to = match.index + match[0].length,\n\t\t\t\t\t\t    k = i,\n\t\t\t\t\t\t    p = pos;\n\n\t\t\t\t\t\tfor (var len = strarr.length; k < len && (p < to || (!strarr[k].type && !strarr[k - 1].greedy)); ++k) {\n\t\t\t\t\t\t\tp += strarr[k].length;\n\t\t\t\t\t\t\t// Move the index i to the element in strarr that is closest to from\n\t\t\t\t\t\t\tif (from >= p) {\n\t\t\t\t\t\t\t\t++i;\n\t\t\t\t\t\t\t\tpos = p;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (strarr[i] instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Number of tokens to delete and replace with the new match\n\t\t\t\t\t\tdelNum = k - i;\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpattern.lastIndex = 0;\n\n\t\t\t\t\t\tvar match = pattern.exec(str),\n\t\t\t\t\t\t\tdelNum = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tif (oneshot) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(lookbehind) {\n\t\t\t\t\t\tlookbehindLength = match[1] ? match[1].length : 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar from = match.index + lookbehindLength,\n\t\t\t\t\t    match = match[0].slice(lookbehindLength),\n\t\t\t\t\t    to = from + match.length,\n\t\t\t\t\t    before = str.slice(0, from),\n\t\t\t\t\t    after = str.slice(to);\n\n\t\t\t\t\tvar args = [i, delNum];\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\t++i;\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t\targs.push(before);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar wrapped = new Token(token, inside? _.tokenize(match, inside) : match, alias, match, greedy);\n\n\t\t\t\t\targs.push(wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\targs.push(after);\n\t\t\t\t\t}\n\n\t\t\t\t\tArray.prototype.splice.apply(strarr, args);\n\n\t\t\t\t\tif (delNum != 1)\n\t\t\t\t\t\t_.matchGrammar(text, strarr, grammar, i, pos, true, token);\n\n\t\t\t\t\tif (oneshot)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\ttokenize: function(text, grammar, language) {\n\t\tvar strarr = [text];\n\n\t\tvar rest = grammar.rest;\n\n\t\tif (rest) {\n\t\t\tfor (var token in rest) {\n\t\t\t\tgrammar[token] = rest[token];\n\t\t\t}\n\n\t\t\tdelete grammar.rest;\n\t\t}\n\n\t\t_.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n\t\treturn strarr;\n\t},\n\n\thooks: {\n\t\tall: {},\n\n\t\tadd: function (name, callback) {\n\t\t\tvar hooks = _.hooks.all;\n\n\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\thooks[name].push(callback);\n\t\t},\n\n\t\trun: function (name, env) {\n\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (var i=0, callback; callback = callbacks[i++];) {\n\t\t\t\tcallback(env);\n\t\t\t}\n\t\t}\n\t}\n};\n\nvar Token = _.Token = function(type, content, alias, matchedStr, greedy) {\n\tthis.type = type;\n\tthis.content = content;\n\tthis.alias = alias;\n\t// Copy of the full string this token was created from\n\tthis.length = (matchedStr || \"\").length|0;\n\tthis.greedy = !!greedy;\n};\n\nToken.stringify = function(o, language, parent) {\n\tif (typeof o == 'string') {\n\t\treturn o;\n\t}\n\n\tif (_.util.type(o) === 'Array') {\n\t\treturn o.map(function(element) {\n\t\t\treturn Token.stringify(element, language, o);\n\t\t}).join('');\n\t}\n\n\tvar env = {\n\t\ttype: o.type,\n\t\tcontent: Token.stringify(o.content, language, parent),\n\t\ttag: 'span',\n\t\tclasses: ['token', o.type],\n\t\tattributes: {},\n\t\tlanguage: language,\n\t\tparent: parent\n\t};\n\n\tif (o.alias) {\n\t\tvar aliases = _.util.type(o.alias) === 'Array' ? o.alias : [o.alias];\n\t\tArray.prototype.push.apply(env.classes, aliases);\n\t}\n\n\t_.hooks.run('wrap', env);\n\n\tvar attributes = Object.keys(env.attributes).map(function(name) {\n\t\treturn name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t}).join(' ');\n\n\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + (attributes ? ' ' + attributes : '') + '>' + env.content + '</' + env.tag + '>';\n\n};\n\nif (!_self.document) {\n\tif (!_self.addEventListener) {\n\t\t// in Node.js\n\t\treturn _self.Prism;\n\t}\n\n\tif (!_.disableWorkerMessageHandler) {\n\t\t// In worker\n\t\t_self.addEventListener('message', function (evt) {\n\t\t\tvar message = JSON.parse(evt.data),\n\t\t\t\tlang = message.language,\n\t\t\t\tcode = message.code,\n\t\t\t\timmediateClose = message.immediateClose;\n\n\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\tif (immediateClose) {\n\t\t\t\t_self.close();\n\t\t\t}\n\t\t}, false);\n\t}\n\n\treturn _self.Prism;\n}\n\n//Get current script and highlight\nvar script = document.currentScript || [].slice.call(document.getElementsByTagName(\"script\")).pop();\n\nif (script) {\n\t_.filename = script.src;\n\n\tif (!_.manual && !script.hasAttribute('data-manual')) {\n\t\tif(document.readyState !== \"loading\") {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(_.highlightAll);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(_.highlightAll, 16);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdocument.addEventListener('DOMContentLoaded', _.highlightAll);\n\t\t}\n\t}\n}\n\nreturn _self.Prism;\n\n})();\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': /<!--[\\s\\S]*?-->/,\n\t'prolog': /<\\?[\\s\\S]+?\\?>/,\n\t'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t/^=/,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /(^|[^\\\\])[\"']/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /&#?[\\da-z]{1,8};/i\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nPrism.languages.xml = Prism.languages.markup;\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\nPrism.languages.css = {\n\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t'atrule': {\n\t\tpattern: /@[\\w-]+?.*?(?:;|(?=\\s*\\{))/i,\n\t\tinside: {\n\t\t\t'rule': /@[\\w-]+/\n\t\t\t// See rest below\n\t\t}\n\t},\n\t'url': /url\\((?:([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,\n\t'selector': /[^{}\\s][^{};]*?(?=\\s*\\{)/,\n\t'string': {\n\t\tpattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n\t'important': /\\B!important\\b/i,\n\t'function': /[-a-z0-9]+(?=\\()/i,\n\t'punctuation': /[(){};:]/\n};\n\nPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'style': {\n\t\t\tpattern: /(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.css,\n\t\t\talias: 'language-css',\n\t\t\tgreedy: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('inside', 'attr-value', {\n\t\t'style-attr': {\n\t\t\tpattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n\t\t\tinside: {\n\t\t\t\t'attr-name': {\n\t\t\t\t\tpattern: /^\\s*style/i,\n\t\t\t\t\tinside: Prism.languages.markup.tag.inside\n\t\t\t\t},\n\t\t\t\t'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /.+/i,\n\t\t\t\t\tinside: Prism.languages.css\n\t\t\t\t}\n\t\t\t},\n\t\t\talias: 'language-css'\n\t\t}\n\t}, Prism.languages.markup.tag);\n}\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\tpunctuation: /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'function': /[a-z0-9_]+(?=\\()/i,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'keyword': /\\b(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|var|void|while|with|yield)\\b/,\n\t'number': /\\b(?:0[xX][\\dA-Fa-f]+|0[bB][01]+|0[oO][0-7]+|NaN|Infinity)\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*\\()/i,\n\t'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[[^\\]\\r\\n]+]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyu]{0,5}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n\t\tlookbehind: true,\n\t\tgreedy: true\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i,\n\t\talias: 'function'\n\t},\n\t'constant': /\\b[A-Z][A-Z\\d_]*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\${[^}]+}|[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\${[^}]+}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\${|}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: null // See below\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t}\n});\nPrism.languages.javascript['template-string'].inside['interpolation'].inside.rest = Prism.languages.javascript;\n\nif (Prism.languages.markup) {\n\tPrism.languages.insertBefore('markup', 'tag', {\n\t\t'script': {\n\t\t\tpattern: /(<script[\\s\\S]*?>)[\\s\\S]*?(?=<\\/script>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript,\n\t\t\talias: 'language-javascript',\n\t\t\tgreedy: true\n\t\t}\n\t});\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {\n\t\treturn;\n\t}\n\n\tself.Prism.fileHighlight = function() {\n\n\t\tvar Extensions = {\n\t\t\t'js': 'javascript',\n\t\t\t'py': 'python',\n\t\t\t'rb': 'ruby',\n\t\t\t'ps1': 'powershell',\n\t\t\t'psm1': 'powershell',\n\t\t\t'sh': 'bash',\n\t\t\t'bat': 'batch',\n\t\t\t'h': 'c',\n\t\t\t'tex': 'latex'\n\t\t};\n\n\t\tArray.prototype.slice.call(document.querySelectorAll('pre[data-src]')).forEach(function (pre) {\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language, parent = pre;\n\t\t\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n\t\t\twhile (parent && !lang.test(parent.className)) {\n\t\t\t\tparent = parent.parentNode;\n\t\t\t}\n\n\t\t\tif (parent) {\n\t\t\t\tlanguage = (pre.className.match(lang) || [, ''])[1];\n\t\t\t}\n\n\t\t\tif (!language) {\n\t\t\t\tvar extension = (src.match(/\\.(\\w+)$/) || [, ''])[1];\n\t\t\t\tlanguage = Extensions[extension] || extension;\n\t\t\t}\n\n\t\t\tvar code = document.createElement('code');\n\t\t\tcode.className = 'language-' + language;\n\n\t\t\tpre.textContent = '';\n\n\t\t\tcode.textContent = 'Loading…';\n\n\t\t\tpre.appendChild(code);\n\n\t\t\tvar xhr = new XMLHttpRequest();\n\n\t\t\txhr.open('GET', src, true);\n\n\t\t\txhr.onreadystatechange = function () {\n\t\t\t\tif (xhr.readyState == 4) {\n\n\t\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\t\tcode.textContent = xhr.responseText;\n\n\t\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t\t}\n\t\t\t\t\telse if (xhr.status >= 400) {\n\t\t\t\t\t\tcode.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcode.textContent = '✖ Error: File does not exist or is empty';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\txhr.send(null);\n\t\t});\n\n\t\tif (Prism.plugins.toolbar) {\n\t\t\tPrism.plugins.toolbar.registerButton('download-file', function (env) {\n\t\t\t\tvar pre = env.element.parentNode;\n\t\t\t\tif (!pre || !/pre/i.test(pre.nodeName) || !pre.hasAttribute('data-src') || !pre.hasAttribute('data-download-link')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar src = pre.getAttribute('data-src');\n\t\t\t\tvar a = document.createElement('a');\n\t\t\t\ta.textContent = pre.getAttribute('data-download-link-label') || 'Download';\n\t\t\t\ta.setAttribute('download', '');\n\t\t\t\ta.href = src;\n\t\t\t\treturn a;\n\t\t\t});\n\t\t}\n\n\t};\n\n\tdocument.addEventListener('DOMContentLoaded', self.Prism.fileHighlight);\n\n})();","export const resume:string = `# qiufeihong\n\nFront End Engineer\n\n# Availability\n\n* html, css, js, element-ui\n* vue, nodejs, jQuery\n* pm2, socket-io, echarts\n\n# Work Experience\n\n* 谷逸科技\n\n# Company Projects\n## DeepSphere-nas\n* 2019.01-至今 web前端\n描述：此项目主要展示系统信息、用户、磁盘信息和服务，实现查看服务信息/主机信息\n、网络名、IP设置、用户管理、用户组管理、共享文件夹管理、磁盘信息、S.M.A.R.T、RAID、文件系统、NFS、Samba等功能\n\n* 岗位职责：\n从0-1完成前端页面\n\n* 实现技术：\nvue全家桶+element-ui\n\n\n## xAlert\n* 2019.01-至今 web前端\n描述：此项目主要页面有资产(资产总览,漏洞检测,资产详情)、流量、安全、警报和配置，主页展示日志处理率、数据处理趋势、顶级用户（源站）、威胁活动图（本土化）、最高应用和按状态的案例趋势的子项.\n\n* 岗位职责：\n根据交互和视觉方案以及前端框架进行完成页面原型，兼容主流浏览器。\n\n* 实现技术：\nECharts+vue全家桶+element-ui\n\n## xShied\n* 2018.09-2018.12 web前端\n描述：1. XShied是一个基于FreeBSD，它被安装在计算机上作为网络中的防火墙和路由器存在。\n2. XShied通过WEB页面进行配置，升级和管理而不需要使用者具备FreeBSD底层知识。\n3. XShied通常被部署作为边界防火墙，路由器，无线接入点，DHCP服务器，DNS服务器和VPN端点。\n\n* 岗位职责：\n完成一系列工控页面的开发工作\n\n* 实现技术：\nvue全家桶+element-ui\n\n## DeepFileAi-web\n* 2018.08-2018.12 web前端\n描述：此项目主要完成文档抽取、文档审核、文档对比、文档标注、信息查询、文档配置、深度模型、权限管理等功能\n\n* 岗位职责：\n完成登录页面以及文档对比的同步滚动组件\n\n* 实现技术：\nnuxt+vue全家桶+elementui+node+ivew\n\n## DeepDefence-web\n* 2018.07-2018.12 web前端\n描述：clair的目标是能够从一个更加透明的维度去看待基于容器化的基础框架的安全性。\n1.Clair会定期从一组已配置的源中提取漏洞元数据，并将其存储在数据库中。\n2.客户端使用Clair API来索引其容器映像; 这将创建图像中存在的功能列表，并将它们存储在数据库中。\n3.客户端使用Clair API在数据库中查询特定映像的漏洞; 为每个请求关联漏洞和功能，避免重新扫描图像。\n4.发生漏洞元数据更新时，可以向警报系统发送更改已发生的通知\n\n* 项目功能: \n通过对容器的layer进行扫描，发现漏洞并进行预警，其使用数据是基于Common Vulnerabilities and Exposures数据库简称CVE, 各Linux发行版一般都有自己的CVE源，而Clair则是与其进行匹配以判断漏洞的存在与否，比如HeartBleed的CVE为：CVE-2014-0160\n\n* 岗位职责：\n从0-1完成前端页面\n\n## coder-interview-questions\n* 2018.05-2018.07 web前端\n描述：公司的一个笔试网站\n\n* 岗位职责：\n从0-1完成前端页面\n\n* 实现技术：\nvue全家桶+element-ui\n\n* 业绩：前后端面试者可以在线答题，答题通过即可过来技术面试，大大解放了技术人员的劳动力\n\n* 项目链接：http://gushenxing.f3322.net:11093/index\n\n* 实现技术：vue全家桶+element-ui+socket-io\n\n# Personal Project\n## vue-element-tack-out（个人项目）\n* 2018.11-至今 全栈工程师\n描述：此项目是一个外卖后台的管理系统，有买家管理、卖家管理、订单管理、管理员管理、添加商品、添加店铺等功能\n\n* 岗位职责：\n从0-1完成管理系统\n\n* 实现技术：\nvue全家桶+express+element-ui+MongoDB\n\n* 项目链接：http://106.14.169.12:1234\n\n## 波普大数据研究所门户网站\n* 2018.03-2018.07 web前端\n描述：学校的研究所网站，主要为了内部人员展示研究项目和讨论最新技术等。我们采用maven构建项目，项目分为前台和后台，放到同一个服务器上，共用一个数据库。\n\n* 功能如下：\n1. 前台的功能（登录、注册、查看文章、个人中心、聊天、忘记密码、更改密码、主页、评论留言、联系我们、研究所简介、错误页面等）；\n2. 后台的功能（轮播图管理、文章管理、关于我们管理等等）。\n\n* 责任描述：\n1. 主要负责业务需求分析\n2. 前端页面的设计与实现以及后台jsp的编写\n3. 实现查看文章、聊天、评论留言、文章管理等功能。\n\n* 项目技术：\nBootstrap+jQuery+UEditor+Maven+layUI\n\n* 项目链接：http://111.231.55.41/\n`\n","import {isMobile} from '../scripts/animateResume/untils/untils'\n\nconst is_mobile: boolean = isMobile()\n\nexport const style1:string = `/**\n *\n * Hey. My name's qiufeihong. I'm a web developer.\n *\n * I build a animating resume\n *\n * Let's begin. We start by animating...\n * yes, everything.\n */\n\n* {\n  transition: all 1s;\n}\n\n/**\n * It seems to do noting. But you'll see.\n *\n * Black on white is really boring,\n * change threm first.\n */\n\nhtml {\n  background: #216583;\n  font-size: 10px;\n  overflow: hidden;\n}\n\n/***\n * Hold on...\n */\n\npre, a {\n  color: #ffffff;\n}\n\n/**\n * That's better.\n *\n * Working in this big rempty space is tough.\n *\n * I'm going to make a nice area to show the content.\n */\n\npre:not(:empty) {\n  ${is_mobile ?\n  `height:46%;\n  width: calc(100% - 2rem);`\n  :\n  `height: 100%;`}\n  font-size: 1.4rem;\n  overflow: auto;\n  background: rgb(48, 48, 48);\n  border: 1px solid #ccc;\n  padding: 1rem 1rem 2rem;\n  white-space: pre-wrap;\n  outline: 0;\n}\n\n#style-container {\n  height:92%;${is_mobile ? 'width:100%;' : 'width: 49%;transform: translateX(95%);'}\n  position: absolute;\n  left: 1rem;\n  top: 1rem;\n}\n\n/**\n * This is good, but all the text is white!\n * Let's make it more readable.\n */\n\n#style-container  { color: #DEDEDE }\n.comment       { color: #857F6B; font-style: italic; }\n.selector      { color: #D7BA7D; }\n.keyword       { color: #569CD6; }\n.property      { color: #569CD6; }\n.function      { color: #C366A3; }\n.punctuation   { color: #FFCF00; }\n\n/**\n * It\\`s time to get a little perspective.\n */\n\nbody {\n  perspective: 100rem;\n}\n\n#style-container {\n  ${is_mobile ? 'transform: rotateX(-10deg);' : 'transform: translateX(98.5%) rotateY(-10deg);'}\n  transform-origin: right;\n}\n\n/**\n * Okey, it is time to show the resume.\n * You must not just come to see the pretty colors.\n */\n\n #resume-container {\n  height:92%;${is_mobile?'width:100%;':'width: 49%;'}\n  white-space: normal;\n ${is_mobile ? \n  ` position: absolute;\n  left: 1rem;\n  top:50%;`\n  : ` position: absolute;\n  left: 1rem;\n  top: 1rem;\n  transform: rotateY(10deg);\n  transform-origin: left;`}\n}\n`\n\nexport const style2 = `/**\n * That markdown on the left doesn't look great. Let's render it.\n */\n\n#resume-container{\n  font-size: 1.4rem;\n}\n#resume-container h1{\n  display: inline-block;\n  border-bottom: 1px solid;\n  margin: .5rem 0 1rem;\n  font-size: 2.6rem;\n}\n#resume-container a{\n  color: #ffffff;\n  text-decoration: none;\n}\n#resume-container ul> li{\n  margin-bottom: .3rem;\n}\n#resume-container ul> li::before{\n  content: '•';\n  margin-right: .5rem;\n  color: '#ffffff';\n}\n\n/**\n * Okey, this is almost done.\n *\n * This page is inspired by http://strml.net/， which was what I met when I was a beginner of js.\n *\n * It is really surprise me, and now I can code it by myself.\n *\n * Ertainly，most of sentences is from that, my English is very poor~ after all.\n *\n */`\n","import {Core, CoreOptions, LoadParams} from \"./interface\";\nimport {\n  getInterval,\n  handleStyle,\n  getStyleEl,\n  createContainer,\n  isMobile\n} from \"./untils/untils\";\nimport mobileEndAnimate from './untils/mobileEndAnimate'\nimport * as Prism from 'prismjs';\nimport * as marked from 'marked'\n\nexport default class AnimateResume implements Core {\n  container: Element\n  options: CoreOptions\n  isSkip: boolean\n\n  constructor(container: Element, options: CoreOptions) {\n    this.container = container\n    this.options = options\n    this.isSkip = false\n  }\n\n  private load(contents: Array<LoadParams>,fn?:Function) {\n    if (contents.length) {\n      this.loadItem(contents[0])\n        .then(() => this.load(contents.slice(1),fn))\n        .catch(() => this.skipAnimate())\n    } else {\n\n      if (isMobile()) {\n        mobileEndAnimate(this.options.mobileAnimate.styleID, this.options.mobileAnimate.resumeID)\n      }\n\n      fn && fn()\n    }\n  }\n\n  private loadItem(item: LoadParams): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const container = createContainer(this.container, item.id)\n      let num = 0\n      const sum = item.load.length\n      let originContent = item.rewrite ? '' : container.innerHTML\n      const interval = 16\n\n      let styleEl: Element\n      if (item.type === 'css') {\n        styleEl = getStyleEl()\n      }\n\n      const startLoad = (): void => {\n        setTimeout(() => {\n          num += 1\n          if (num <= sum) {\n\n            let str = item.load.substr(0, num)\n\n            let code: string\n\n            switch (item.type) {\n              case 'css':\n                handleStyle(str, styleEl)\n                code = Prism.highlight(str, Prism.languages.css)\n                break\n              case 'md':\n                code = marked(str)\n                break\n            }\n\n            let nextInterval = getInterval(str, interval)\n\n            container.scrollTop = 100000\n\n            container.innerHTML = originContent + code\n\n            if (this.isSkip) {\n              reject()\n            } else {\n              setTimeout(() => {\n                startLoad()\n              }, nextInterval)\n            }\n\n          } else {\n            return resolve()\n          }\n        }, interval)\n      }\n\n      startLoad()\n    })\n  }\n\n  private skipAnimate() {\n    this.options.content.forEach((item) => {\n      const container = createContainer(this.container, item.id)\n\n      switch (item.type) {\n        case 'css':\n          this.skipStyle(item, container)\n          break\n        case 'md':\n          this.skipMd(item, container)\n          break\n      }\n    })\n\n    if (isMobile()) {\n      mobileEndAnimate(this.options.mobileAnimate.styleID, this.options.mobileAnimate.resumeID)\n    }\n  }\n\n  private skipStyle(item: LoadParams, container: Element) {\n    const styleStr = item.load\n    const styleEl = getStyleEl()\n    let originContent = ''\n    const code = Prism.highlight(styleStr, Prism.languages.css)\n\n    if (!item.rewrite) {\n      originContent = container.innerHTML\n    }\n\n    styleEl.innerHTML = styleStr\n    container.innerHTML = originContent + code\n  }\n\n  private skipMd(item: LoadParams, container: Element) {\n    container.innerHTML = marked(item.load)\n  }\n\n  public animate(fn?:Function) {\n    this.load(this.options.content,fn)\n  }\n\n  public skip() {\n    this.isSkip = true\n  }\n}\n","import * as BScroll from 'better-scroll'\n\nexport default function mobileEndAnimate(styleID: string, resumeID: string): void {\n  const body: HTMLElement = document.querySelector('body')\n  const styleContainer: HTMLElement = document.querySelector(`#${styleID}`)\n  const style: HTMLElement = document.querySelector(`#${styleID}-pre`)\n  const mdContainer: HTMLElement = document.querySelector(`#${resumeID}`)\n  const md: HTMLElement = document.querySelector(`#${resumeID}-pre`)\n\n  body.style.cssText = 'overflow:hidden'\n\n  let css = {\n    width: 'calc(100% - 2rem)',\n    height: 'calc(100% - 4rem)',\n    overflow: 'hidden',\n    border: '1px solid #ccc',\n    background: 'rgb(48, 48, 48)',\n    position: 'absolute',\n    left: '1rem',\n  }\n  const cssStr = (<any>Object).entries(css).map((v: Array<string>) => v.join(':')).join(';')\n\n  styleContainer.style.cssText = cssStr\n  mdContainer.style.cssText = cssStr\n\n  styleContainer.style.top = '1rem'\n  mdContainer.style.top = 'calc(100% + 1rem)'\n\n  const preCss = {\n    transition: 'all 0s',\n    maxHeight: 'none',\n    overflow: 'visible',\n    position: 'static',\n    width: '100%',\n    border: 'none',\n    height: 'auto',\n  }\n  let preCssStr = (<any>Object).entries(preCss).map((v: Array<string>) => v.join(':')).join(';')\n\n  style.style.cssText = preCssStr\n  md.style.cssText = preCssStr\n\n  style.style.transform = 'rotateX(0deg)'\n  md.style.paddingBottom = '10rem'\n\n\n  setTimeout(() => {\n    mdContainer.style.transition = 'transform .5s ease-out'\n    styleContainer.style.transition = 'transform .5s ease-out'\n    mdContainer.style.transform = 'translateY(calc(-100% - 4rem))'\n    styleContainer.style.transform = 'translateY(calc(-100% - 1rem))'\n  }, 500)\n\n  const styleScroll = new (<any>BScroll)(styleContainer, {\n    pullUpLoad: {\n      threshold: 20\n    }\n  })\n\n  const mdScroll = new (<any>BScroll)(mdContainer, {\n    pullDownRefresh: {\n      threshold: 20,\n    }\n  })\n\n  styleScroll.on('pullingUp', function () {\n    mdContainer.style.transform = 'translateY(calc(-100% - 4rem))'\n    styleContainer.style.transform = 'translateY(calc(-100% - 1rem))'\n    styleScroll.finishPullUp()\n  })\n  mdScroll.on('pullingDown', function () {\n    mdContainer.style.transform = 'translateY(0)'\n    styleContainer.style.transform = 'translateY(0)'\n    mdScroll.finishPullDown()\n  })\n}\n","// 根据字符结束设置间隔时间\nexport function getInterval(str: string, interval = 16): number {\n  if (/\\D[\\,]\\s$/.test(str)) return interval * 20\n  if (/[^\\/]\\n\\n$/.test(str)) return interval * 40\n  if (/[\\.\\?\\!]\\s$/.test(str)) return interval * 60\n  return 0\n}\n\n// css 写入 style\nexport function handleStyle(style: string, el: Element): void {\n  el.innerHTML = style\n}\n\n// 新建并返回容器\nexport function createContainer(container: Element, id: string): Element {\n\n  if (container.querySelector(`#${id}`) === null) {\n    let el = document.createElement('div')\n    el.id = id\n\n    let pre = document.createElement('pre')\n    pre.id = `${id}-pre`\n\n    el.append(pre)\n\n    container.append(el)\n  }\n\n  return container.querySelector(`#${id}-pre`)\n}\n\n// 判断是否为移动设备\nexport function isMobile(): boolean {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ? true : false\n}\n\n// 设置并获取 style 标签\nexport function getStyleEl(): Element {\n  const newStyle = document.createElement('style')\n  const head = document.querySelector('head')\n  head.appendChild(newStyle)\n  const allStyle = document.querySelectorAll('style')\n\n  return allStyle[allStyle.length - 1]\n}\n","import {LoadParams} from \"./animateResume/interface\";\nimport AnimateResume from './animateResume/index'\nimport {style1, style2} from '../load/style'\nimport {resume} from \"../load/resume\";\n\nconst load1: LoadParams = {\n  load: style1,\n  type: 'css',\n  id: 'style-container',\n  rewrite: true\n}\nconst load2: LoadParams = {\n  load: resume,\n  type: 'md',\n  id: 'resume-container',\n  rewrite: true\n}\nconst load3: LoadParams = {\n  load: style2,\n  type: 'css',\n  id: 'style-container',\n  rewrite: false\n}\n\nconst container = document.querySelector('.animate-container')\n\nconst ar = new AnimateResume(container, {\n  content: [load1, load2, load3],\n  mobileAnimate: {\n    styleID: 'style-container',\n    resumeID: 'resume-container'\n  }\n})\n\nconst skipBtn: HTMLElement = document.querySelector('#skip-btn')\n\nskipBtn.addEventListener('click', function () {\n  ar.skip()\n  skipBtn.style.display = 'none'\n})\n\nar.animate(() => {\n  skipBtn.style.display = 'none'\n})\n\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmV0dGVyLXNjcm9sbC9kaXN0L2JzY3JvbGwuanMiLCJub2RlX21vZHVsZXMvbWFya2VkL2xpYi9tYXJrZWQuanMiLCJub2RlX21vZHVsZXMvcHJpc21qcy9wcmlzbS5qcyIsInNyYy9sb2FkL3Jlc3VtZS50cyIsInNyYy9sb2FkL3N0eWxlLnRzIiwic3JjL3NjcmlwdHMvYW5pbWF0ZVJlc3VtZS9pbmRleC50cyIsInNyYy9zY3JpcHRzL2FuaW1hdGVSZXN1bWUvdW50aWxzL21vYmlsZUVuZEFuaW1hdGUudHMiLCJzcmMvc2NyaXB0cy9hbmltYXRlUmVzdW1lL3VudGlscy91bnRpbHMudHMiLCJzcmMvc2NyaXB0cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3R3R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDOWtEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUMxMkJhLFFBQUEsTUFBTSxHQUFVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXVINUIsQ0FBQTs7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QU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7SUFDaEMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ1QsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFBO0FBQ2hDLENBQUMsQ0FBQyxDQUFBO0FBRUYsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7SUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUE7QUFDaEMsQ0FBQyxDQUFDLENBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKiFcbiAqIGJldHRlci1ub3JtYWwtc2Nyb2xsIHYxLjEyLjZcbiAqIChjKSAyMDE2LTIwMTggdXN0Ymh1YW5neWlcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkJTY3JvbGwgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBzbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkge1xuICAgIHZhciBfYXJyID0gW107XG4gICAgdmFyIF9uID0gdHJ1ZTtcbiAgICB2YXIgX2QgPSBmYWxzZTtcbiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kID0gdHJ1ZTtcbiAgICAgIF9lID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2FycjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkge1xuICAgICAgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG4gICAgfVxuICB9O1xufSgpO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgdG9Db25zdW1hYmxlQXJyYXkgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oYXJyKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZXZlbnRNaXhpbihCU2Nyb2xsKSB7XG4gIEJTY3JvbGwucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgdmFyIGNvbnRleHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2goW2ZuLCBjb250ZXh0XSk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIHZhciBjb250ZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0aGlzO1xuXG4gICAgZnVuY3Rpb24gbWFnaWMoKSB7XG4gICAgICB0aGlzLm9mZih0eXBlLCBtYWdpYyk7XG5cbiAgICAgIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIC8vIFRvIGV4cG9zZSB0aGUgY29ycmVzcG9uZGluZyBmdW5jdGlvbiBtZXRob2QgaW4gb3JkZXIgdG8gZXhlY3V0ZSB0aGUgb2ZmIG1ldGhvZFxuICAgIG1hZ2ljLmZuID0gZm47XG5cbiAgICB0aGlzLm9uKHR5cGUsIG1hZ2ljKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgICB2YXIgX2V2ZW50cyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAoIV9ldmVudHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY291bnQgPSBfZXZlbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoY291bnQtLSkge1xuICAgICAgaWYgKF9ldmVudHNbY291bnRdWzBdID09PSBmbiB8fCBfZXZlbnRzW2NvdW50XVswXSAmJiBfZXZlbnRzW2NvdW50XVswXS5mbiA9PT0gZm4pIHtcbiAgICAgICAgX2V2ZW50c1tjb3VudF1bMF0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKCFldmVudHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGVuID0gZXZlbnRzLmxlbmd0aDtcbiAgICB2YXIgZXZlbnRzQ29weSA9IFtdLmNvbmNhdCh0b0NvbnN1bWFibGVBcnJheShldmVudHMpKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgZXZlbnQgPSBldmVudHNDb3B5W2ldO1xuXG4gICAgICB2YXIgX2V2ZW50ID0gc2xpY2VkVG9BcnJheShldmVudCwgMiksXG4gICAgICAgICAgZm4gPSBfZXZlbnRbMF0sXG4gICAgICAgICAgY29udGV4dCA9IF9ldmVudFsxXTtcblxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIGZuLmFwcGx5KGNvbnRleHQsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vLyBzc3Igc3VwcG9ydFxudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIHVhID0gaW5Ccm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbnZhciBpc1dlQ2hhdERldlRvb2xzID0gdWEgJiYgL3dlY2hhdGRldnRvb2xzLy50ZXN0KHVhKTtcbnZhciBpc0FuZHJvaWQgPSB1YSAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPiAwO1xuXG5mdW5jdGlvbiBnZXROb3coKSB7XG4gIHJldHVybiB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vdyA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSArIHdpbmRvdy5wZXJmb3JtYW5jZS50aW1pbmcubmF2aWdhdGlvblN0YXJ0IDogK25ldyBEYXRlKCk7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcmVzdFtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gcmVzdFtpXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXREaXN0YW5jZSh4LCB5KSB7XG4gIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG59XG5cbnZhciBlbGVtZW50U3R5bGUgPSBpbkJyb3dzZXIgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbnZhciB2ZW5kb3IgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0cmFuc2Zvcm1OYW1lcyA9IHtcbiAgICB3ZWJraXQ6ICd3ZWJraXRUcmFuc2Zvcm0nLFxuICAgIE1vejogJ01velRyYW5zZm9ybScsXG4gICAgTzogJ09UcmFuc2Zvcm0nLFxuICAgIG1zOiAnbXNUcmFuc2Zvcm0nLFxuICAgIHN0YW5kYXJkOiAndHJhbnNmb3JtJ1xuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiB0cmFuc2Zvcm1OYW1lcykge1xuICAgIGlmIChlbGVtZW50U3R5bGVbdHJhbnNmb3JtTmFtZXNba2V5XV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59KCk7XG5cbmZ1bmN0aW9uIHByZWZpeFN0eWxlKHN0eWxlKSB7XG4gIGlmICh2ZW5kb3IgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHZlbmRvciA9PT0gJ3N0YW5kYXJkJykge1xuICAgIGlmIChzdHlsZSA9PT0gJ3RyYW5zaXRpb25FbmQnKSB7XG4gICAgICByZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICByZXR1cm4gdmVuZG9yICsgc3R5bGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHlsZS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50KGVsLCB0eXBlLCBmbiwgY2FwdHVyZSkge1xuICBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZuLCB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiAhIWNhcHR1cmUgfSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50KGVsLCB0eXBlLCBmbiwgY2FwdHVyZSkge1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZuLCB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiAhIWNhcHR1cmUgfSk7XG59XG5cbmZ1bmN0aW9uIG9mZnNldChlbCkge1xuICB2YXIgbGVmdCA9IDA7XG4gIHZhciB0b3AgPSAwO1xuXG4gIHdoaWxlIChlbCkge1xuICAgIGxlZnQgLT0gZWwub2Zmc2V0TGVmdDtcbiAgICB0b3AgLT0gZWwub2Zmc2V0VG9wO1xuICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHRvcDogdG9wXG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mZnNldFRvQm9keShlbCkge1xuICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogLShyZWN0LmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQpLFxuICAgIHRvcDogLShyZWN0LnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldClcbiAgfTtcbn1cblxudmFyIHRyYW5zZm9ybSA9IHByZWZpeFN0eWxlKCd0cmFuc2Zvcm0nKTtcblxudmFyIGhhc1BlcnNwZWN0aXZlID0gaW5Ccm93c2VyICYmIHByZWZpeFN0eWxlKCdwZXJzcGVjdGl2ZScpIGluIGVsZW1lbnRTdHlsZTtcbi8vIGZpeCBpc3N1ZSAjMzYxXG52YXIgaGFzVG91Y2ggPSBpbkJyb3dzZXIgJiYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCBpc1dlQ2hhdERldlRvb2xzKTtcbnZhciBoYXNUcmFuc2Zvcm0gPSB0cmFuc2Zvcm0gIT09IGZhbHNlO1xudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgcHJlZml4U3R5bGUoJ3RyYW5zaXRpb24nKSBpbiBlbGVtZW50U3R5bGU7XG5cbnZhciBzdHlsZSA9IHtcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogcHJlZml4U3R5bGUoJ3RyYW5zaXRpb25UaW1pbmdGdW5jdGlvbicpLFxuICB0cmFuc2l0aW9uRHVyYXRpb246IHByZWZpeFN0eWxlKCd0cmFuc2l0aW9uRHVyYXRpb24nKSxcbiAgdHJhbnNpdGlvbkRlbGF5OiBwcmVmaXhTdHlsZSgndHJhbnNpdGlvbkRlbGF5JyksXG4gIHRyYW5zZm9ybU9yaWdpbjogcHJlZml4U3R5bGUoJ3RyYW5zZm9ybU9yaWdpbicpLFxuICB0cmFuc2l0aW9uRW5kOiBwcmVmaXhTdHlsZSgndHJhbnNpdGlvbkVuZCcpXG59O1xuXG52YXIgVE9VQ0hfRVZFTlQgPSAxO1xudmFyIE1PVVNFX0VWRU5UID0gMjtcblxudmFyIGV2ZW50VHlwZSA9IHtcbiAgdG91Y2hzdGFydDogVE9VQ0hfRVZFTlQsXG4gIHRvdWNobW92ZTogVE9VQ0hfRVZFTlQsXG4gIHRvdWNoZW5kOiBUT1VDSF9FVkVOVCxcblxuICBtb3VzZWRvd246IE1PVVNFX0VWRU5ULFxuICBtb3VzZW1vdmU6IE1PVVNFX0VWRU5ULFxuICBtb3VzZXVwOiBNT1VTRV9FVkVOVFxufTtcblxuZnVuY3Rpb24gZ2V0UmVjdChlbCkge1xuICBpZiAoZWwgaW5zdGFuY2VvZiB3aW5kb3cuU1ZHRWxlbWVudCkge1xuICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGVsLm9mZnNldFRvcCxcbiAgICAgIGxlZnQ6IGVsLm9mZnNldExlZnQsXG4gICAgICB3aWR0aDogZWwub2Zmc2V0V2lkdGgsXG4gICAgICBoZWlnaHQ6IGVsLm9mZnNldEhlaWdodFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJldmVudERlZmF1bHRFeGNlcHRpb24oZWwsIGV4Y2VwdGlvbnMpIHtcbiAgZm9yICh2YXIgaSBpbiBleGNlcHRpb25zKSB7XG4gICAgaWYgKGV4Y2VwdGlvbnNbaV0udGVzdChlbFtpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHRhcChlLCBldmVudE5hbWUpIHtcbiAgdmFyIGV2ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gIGV2LmluaXRFdmVudChldmVudE5hbWUsIHRydWUsIHRydWUpO1xuICBldi5wYWdlWCA9IGUucGFnZVg7XG4gIGV2LnBhZ2VZID0gZS5wYWdlWTtcbiAgZS50YXJnZXQuZGlzcGF0Y2hFdmVudChldik7XG59XG5cbmZ1bmN0aW9uIGNsaWNrKGUpIHtcbiAgdmFyIGV2ZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnY2xpY2snO1xuXG4gIHZhciBldmVudFNvdXJjZSA9IHZvaWQgMDtcbiAgaWYgKGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ21vdXNlY2FuY2VsJykge1xuICAgIGV2ZW50U291cmNlID0gZTtcbiAgfSBlbHNlIGlmIChlLnR5cGUgPT09ICd0b3VjaGVuZCcgfHwgZS50eXBlID09PSAndG91Y2hjYW5jZWwnKSB7XG4gICAgZXZlbnRTb3VyY2UgPSBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICB9XG4gIHZhciBwb3NTcmMgPSB7fTtcbiAgaWYgKGV2ZW50U291cmNlKSB7XG4gICAgcG9zU3JjLnNjcmVlblggPSBldmVudFNvdXJjZS5zY3JlZW5YIHx8IDA7XG4gICAgcG9zU3JjLnNjcmVlblkgPSBldmVudFNvdXJjZS5zY3JlZW5ZIHx8IDA7XG4gICAgcG9zU3JjLmNsaWVudFggPSBldmVudFNvdXJjZS5jbGllbnRYIHx8IDA7XG4gICAgcG9zU3JjLmNsaWVudFkgPSBldmVudFNvdXJjZS5jbGllbnRZIHx8IDA7XG4gIH1cbiAgdmFyIGV2ID0gdm9pZCAwO1xuICB2YXIgYnViYmxlcyA9IHRydWU7XG4gIHZhciBjYW5jZWxhYmxlID0gdHJ1ZTtcbiAgaWYgKHR5cGVvZiBNb3VzZUV2ZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRyeSB7XG4gICAgICBldiA9IG5ldyBNb3VzZUV2ZW50KGV2ZW50LCBleHRlbmQoe1xuICAgICAgICBidWJibGVzOiBidWJibGVzLFxuICAgICAgICBjYW5jZWxhYmxlOiBjYW5jZWxhYmxlXG4gICAgICB9LCBwb3NTcmMpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjcmVhdGVFdmVudCgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjcmVhdGVFdmVudCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRXZlbnQoKSB7XG4gICAgZXYgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldi5pbml0RXZlbnQoZXZlbnQsIGJ1YmJsZXMsIGNhbmNlbGFibGUpO1xuICAgIGV4dGVuZChldiwgcG9zU3JjKTtcbiAgfVxuXG4gIC8vIGZvcndhcmRlZFRvdWNoRXZlbnQgc2V0IHRvIHRydWUgaW4gY2FzZSBvZiB0aGUgY29uZmxpY3Qgd2l0aCBmYXN0Y2xpY2tcbiAgZXYuZm9yd2FyZGVkVG91Y2hFdmVudCA9IHRydWU7XG4gIGV2Ll9jb25zdHJ1Y3RlZCA9IHRydWU7XG4gIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXYpO1xufVxuXG5mdW5jdGlvbiBkYmxjbGljayhlKSB7XG4gIGNsaWNrKGUsICdkYmxjbGljaycpO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kKGVsLCB0YXJnZXQpIHtcbiAgaWYgKHRhcmdldC5maXJzdENoaWxkKSB7XG4gICAgYmVmb3JlKGVsLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKGVsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiZWZvcmUoZWwsIHRhcmdldCkge1xuICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIHRhcmdldCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkKGVsLCBjaGlsZCkge1xuICBlbC5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHN0YXJ0WDogMCxcbiAgc3RhcnRZOiAwLFxuICBzY3JvbGxYOiBmYWxzZSxcbiAgc2Nyb2xsWTogdHJ1ZSxcbiAgZnJlZVNjcm9sbDogZmFsc2UsXG4gIGRpcmVjdGlvbkxvY2tUaHJlc2hvbGQ6IDUsXG4gIGV2ZW50UGFzc3Rocm91Z2g6ICcnLFxuICBjbGljazogZmFsc2UsXG4gIHRhcDogZmFsc2UsXG4gIC8qKlxuICAgKiBzdXBwb3J0IGFueSBzaWRlXG4gICAqIGJvdW5jZToge1xuICAgKiAgIHRvcDogdHJ1ZSxcbiAgICogICBib3R0b206IHRydWUsXG4gICAqICAgbGVmdDogdHJ1ZSxcbiAgICogICByaWdodDogdHJ1ZVxuICAgKiB9XG4gICAqL1xuICBib3VuY2U6IHRydWUsXG4gIGJvdW5jZVRpbWU6IDgwMCxcbiAgbW9tZW50dW06IHRydWUsXG4gIG1vbWVudHVtTGltaXRUaW1lOiAzMDAsXG4gIG1vbWVudHVtTGltaXREaXN0YW5jZTogMTUsXG4gIHN3aXBlVGltZTogMjUwMCxcbiAgc3dpcGVCb3VuY2VUaW1lOiA1MDAsXG4gIGRlY2VsZXJhdGlvbjogMC4wMDE1LFxuICBmbGlja0xpbWl0VGltZTogMjAwLFxuICBmbGlja0xpbWl0RGlzdGFuY2U6IDEwMCxcbiAgcmVzaXplUG9sbGluZzogNjAsXG4gIHByb2JlVHlwZTogMCxcbiAgcHJldmVudERlZmF1bHQ6IHRydWUsXG4gIHByZXZlbnREZWZhdWx0RXhjZXB0aW9uOiB7XG4gICAgdGFnTmFtZTogL14oSU5QVVR8VEVYVEFSRUF8QlVUVE9OfFNFTEVDVCkkL1xuICB9LFxuICBIV0NvbXBvc2l0aW5nOiB0cnVlLFxuICB1c2VUcmFuc2l0aW9uOiB0cnVlLFxuICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gIGJpbmRUb1dyYXBwZXI6IGZhbHNlLFxuICBkaXNhYmxlTW91c2U6IGhhc1RvdWNoLFxuICBkaXNhYmxlVG91Y2g6ICFoYXNUb3VjaCxcbiAgb2JzZXJ2ZURPTTogdHJ1ZSxcbiAgYXV0b0JsdXI6IHRydWUsXG4gIC8qKlxuICAgKiBmb3IgcGlja2VyXG4gICAqIHdoZWVsOiB7XG4gICAqICAgc2VsZWN0ZWRJbmRleDogMCxcbiAgICogICByb3RhdGU6IDI1LFxuICAgKiAgIGFkanVzdFRpbWU6IDQwMFxuICAgKiAgIHdoZWVsV3JhcHBlckNsYXNzOiAnd2hlZWwtc2Nyb2xsJyxcbiAgICogICB3aGVlbEl0ZW1DbGFzczogJ3doZWVsLWl0ZW0nXG4gICAqIH1cbiAgICovXG4gIHdoZWVsOiBmYWxzZSxcbiAgLyoqXG4gICAqIGZvciBzbGlkZVxuICAgKiBzbmFwOiB7XG4gICAqICAgbG9vcDogZmFsc2UsXG4gICAqICAgZWw6IGRvbUVsLFxuICAgKiAgIHRocmVzaG9sZDogMC4xLFxuICAgKiAgIHN0ZXBYOiAxMDAsXG4gICAqICAgc3RlcFk6IDEwMCxcbiAgICogICBzcGVlZDogNDAwLFxuICAgKiAgIGVhc2luZzoge1xuICAgKiAgICAgc3R5bGU6ICdjdWJpYy1iZXppZXIoMC4yNSwgMC40NiwgMC40NSwgMC45NCknLFxuICAgKiAgICAgZm46IGZ1bmN0aW9uICh0KSB7XG4gICAqICAgICAgIHJldHVybiB0ICogKDIgLSB0KVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICogICBsaXN0ZW5GbGljazogdHJ1ZVxuICAgKiB9XG4gICAqL1xuICBzbmFwOiBmYWxzZSxcbiAgLyoqXG4gICAqIGZvciBzY3JvbGxiYXJcbiAgICogc2Nyb2xsYmFyOiB7XG4gICAqICAgZmFkZTogdHJ1ZSxcbiAgICogICBpbnRlcmFjdGl2ZTogZmFsc2VcbiAgICogfVxuICAgKi9cbiAgc2Nyb2xsYmFyOiBmYWxzZSxcbiAgLyoqXG4gICAqIGZvciBwdWxsIGRvd24gYW5kIHJlZnJlc2hcbiAgICogcHVsbERvd25SZWZyZXNoOiB7XG4gICAqICAgdGhyZXNob2xkOiA1MCxcbiAgICogICBzdG9wOiAyMFxuICAgKiB9XG4gICAqL1xuICBwdWxsRG93blJlZnJlc2g6IGZhbHNlLFxuICAvKipcbiAgICogZm9yIHB1bGwgdXAgYW5kIGxvYWRcbiAgICogcHVsbFVwTG9hZDoge1xuICAgKiAgIHRocmVzaG9sZDogNTBcbiAgICogfVxuICAgKi9cbiAgcHVsbFVwTG9hZDogZmFsc2UsXG4gIC8qKlxuICAgKiBmb3IgbW91c2Ugd2hlZWxcbiAgICogbW91c2VXaGVlbDoge1xuICAgKiAgIHNwZWVkOiAyMCxcbiAgICogICBpbnZlcnQ6IGZhbHNlLFxuICAgKiAgIGVhc2VUaW1lOiAzMDBcbiAgICogfVxuICAgKi9cbiAgbW91c2VXaGVlbDogZmFsc2UsXG4gIHN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIC8qKlxuICAgKiBmb3Igem9vbVxuICAgKiB6b29tOiB7XG4gICAqICAgc3RhcnQ6IDEsXG4gICAqICAgbWluOiAxLFxuICAgKiAgIG1heDogNFxuICAgKiB9XG4gICAqL1xuICB6b29tOiBmYWxzZSxcbiAgLyoqXG4gICAqIGZvciBpbmZpbml0eVxuICAgKiBpbmZpbml0eToge1xuICAgKiAgIHJlbmRlcihpdGVtLCBkaXYpIHtcbiAgICogICB9LFxuICAgKiAgIGNyZWF0ZVRvbWJzdG9uZSgpIHtcbiAgICogICB9LFxuICAgKiAgIGZldGNoKGNvdW50KSB7XG4gICAqICAgfVxuICAgKiB9XG4gICAqL1xuICBpbmZpbml0eTogZmFsc2UsXG4gIC8qKlxuICAgKiBmb3IgZG91YmxlIGNsaWNrXG4gICAqIGRibGNsaWNrOiB7XG4gICAqICAgZGVsYXk6IDMwMFxuICAgKiB9XG4gICAqL1xuICBkYmxjbGljazogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGluaXRNaXhpbihCU2Nyb2xsKSB7XG4gIEJTY3JvbGwucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XG4gICAgdGhpcy5faGFuZGxlT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIC8vIGluaXQgcHJpdmF0ZSBjdXN0b20gZXZlbnRzXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IDA7XG4gICAgdGhpcy5kaXJlY3Rpb25YID0gMDtcbiAgICB0aGlzLmRpcmVjdGlvblkgPSAwO1xuXG4gICAgdGhpcy5zZXRTY2FsZSgxKTtcblxuICAgIHRoaXMuX2FkZERPTUV2ZW50cygpO1xuXG4gICAgdGhpcy5faW5pdEV4dEZlYXR1cmVzKCk7XG5cbiAgICB0aGlzLl93YXRjaFRyYW5zaXRpb24oKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMub2JzZXJ2ZURPTSkge1xuICAgICAgdGhpcy5faW5pdERPTU9ic2VydmVyKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvQmx1cikge1xuICAgICAgdGhpcy5faGFuZGxlQXV0b0JsdXIoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLnNuYXApIHtcbiAgICAgIHRoaXMuc2Nyb2xsVG8odGhpcy5vcHRpb25zLnN0YXJ0WCwgdGhpcy5vcHRpb25zLnN0YXJ0WSk7XG4gICAgfVxuXG4gICAgdGhpcy5lbmFibGUoKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5zZXRTY2FsZSA9IGZ1bmN0aW9uIChzY2FsZSkge1xuICAgIHRoaXMubGFzdFNjYWxlID0gaXNVbmRlZih0aGlzLnNjYWxlKSA/IHNjYWxlIDogdGhpcy5zY2FsZTtcbiAgICB0aGlzLnNjYWxlID0gc2NhbGU7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX2hhbmRsZU9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZCh7fSwgREVGQVVMVF9PUFRJT05TLCBvcHRpb25zKTtcblxuICAgIHRoaXMudHJhbnNsYXRlWiA9IHRoaXMub3B0aW9ucy5IV0NvbXBvc2l0aW5nICYmIGhhc1BlcnNwZWN0aXZlID8gJyB0cmFuc2xhdGVaKDApJyA6ICcnO1xuXG4gICAgdGhpcy5vcHRpb25zLnVzZVRyYW5zaXRpb24gPSB0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbiAmJiBoYXNUcmFuc2l0aW9uO1xuICAgIHRoaXMub3B0aW9ucy51c2VUcmFuc2Zvcm0gPSB0aGlzLm9wdGlvbnMudXNlVHJhbnNmb3JtICYmIGhhc1RyYW5zZm9ybTtcblxuICAgIHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdCA9ICF0aGlzLm9wdGlvbnMuZXZlbnRQYXNzdGhyb3VnaCAmJiB0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHQ7XG5cbiAgICAvLyBJZiB5b3Ugd2FudCBldmVudFBhc3N0aHJvdWdoIEkgaGF2ZSB0byBsb2NrIG9uZSBvZiB0aGUgYXhlc1xuICAgIHRoaXMub3B0aW9ucy5zY3JvbGxYID0gdGhpcy5vcHRpb25zLmV2ZW50UGFzc3Rocm91Z2ggPT09ICdob3Jpem9udGFsJyA/IGZhbHNlIDogdGhpcy5vcHRpb25zLnNjcm9sbFg7XG4gICAgdGhpcy5vcHRpb25zLnNjcm9sbFkgPSB0aGlzLm9wdGlvbnMuZXZlbnRQYXNzdGhyb3VnaCA9PT0gJ3ZlcnRpY2FsJyA/IGZhbHNlIDogdGhpcy5vcHRpb25zLnNjcm9sbFk7XG5cbiAgICAvLyBXaXRoIGV2ZW50UGFzc3Rocm91Z2ggd2UgYWxzbyBuZWVkIGxvY2tEaXJlY3Rpb24gbWVjaGFuaXNtXG4gICAgdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgPSB0aGlzLm9wdGlvbnMuZnJlZVNjcm9sbCAmJiAhdGhpcy5vcHRpb25zLmV2ZW50UGFzc3Rocm91Z2g7XG4gICAgdGhpcy5vcHRpb25zLmRpcmVjdGlvbkxvY2tUaHJlc2hvbGQgPSB0aGlzLm9wdGlvbnMuZXZlbnRQYXNzdGhyb3VnaCA/IDAgOiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uTG9ja1RocmVzaG9sZDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMudGFwID09PSB0cnVlKSB7XG4gICAgICB0aGlzLm9wdGlvbnMudGFwID0gJ3RhcCc7XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLl9hZGRET01FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50T3BlcmF0aW9uID0gYWRkRXZlbnQ7XG4gICAgdGhpcy5faGFuZGxlRE9NRXZlbnRzKGV2ZW50T3BlcmF0aW9uKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fcmVtb3ZlRE9NRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBldmVudE9wZXJhdGlvbiA9IHJlbW92ZUV2ZW50O1xuICAgIHRoaXMuX2hhbmRsZURPTUV2ZW50cyhldmVudE9wZXJhdGlvbik7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX2hhbmRsZURPTUV2ZW50cyA9IGZ1bmN0aW9uIChldmVudE9wZXJhdGlvbikge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLm9wdGlvbnMuYmluZFRvV3JhcHBlciA/IHRoaXMud3JhcHBlciA6IHdpbmRvdztcbiAgICBldmVudE9wZXJhdGlvbih3aW5kb3csICdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMpO1xuICAgIGV2ZW50T3BlcmF0aW9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbGljaykge1xuICAgICAgZXZlbnRPcGVyYXRpb24odGhpcy53cmFwcGVyLCAnY2xpY2snLCB0aGlzLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlTW91c2UpIHtcbiAgICAgIGV2ZW50T3BlcmF0aW9uKHRoaXMud3JhcHBlciwgJ21vdXNlZG93bicsIHRoaXMpO1xuICAgICAgZXZlbnRPcGVyYXRpb24odGFyZ2V0LCAnbW91c2Vtb3ZlJywgdGhpcyk7XG4gICAgICBldmVudE9wZXJhdGlvbih0YXJnZXQsICdtb3VzZWNhbmNlbCcsIHRoaXMpO1xuICAgICAgZXZlbnRPcGVyYXRpb24odGFyZ2V0LCAnbW91c2V1cCcsIHRoaXMpO1xuICAgIH1cblxuICAgIGlmIChoYXNUb3VjaCAmJiAhdGhpcy5vcHRpb25zLmRpc2FibGVUb3VjaCkge1xuICAgICAgZXZlbnRPcGVyYXRpb24odGhpcy53cmFwcGVyLCAndG91Y2hzdGFydCcsIHRoaXMpO1xuICAgICAgZXZlbnRPcGVyYXRpb24odGFyZ2V0LCAndG91Y2htb3ZlJywgdGhpcyk7XG4gICAgICBldmVudE9wZXJhdGlvbih0YXJnZXQsICd0b3VjaGNhbmNlbCcsIHRoaXMpO1xuICAgICAgZXZlbnRPcGVyYXRpb24odGFyZ2V0LCAndG91Y2hlbmQnLCB0aGlzKTtcbiAgICB9XG5cbiAgICBldmVudE9wZXJhdGlvbih0aGlzLnNjcm9sbGVyLCBzdHlsZS50cmFuc2l0aW9uRW5kLCB0aGlzKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5faW5pdEV4dEZlYXR1cmVzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc25hcCkge1xuICAgICAgdGhpcy5faW5pdFNuYXAoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zY3JvbGxiYXIpIHtcbiAgICAgIHRoaXMuX2luaXRTY3JvbGxiYXIoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5wdWxsVXBMb2FkKSB7XG4gICAgICB0aGlzLl9pbml0UHVsbFVwKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMucHVsbERvd25SZWZyZXNoKSB7XG4gICAgICB0aGlzLl9pbml0UHVsbERvd24oKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy53aGVlbCkge1xuICAgICAgdGhpcy5faW5pdFdoZWVsKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMubW91c2VXaGVlbCkge1xuICAgICAgdGhpcy5faW5pdE1vdXNlV2hlZWwoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy56b29tKSB7XG4gICAgICB0aGlzLl9pbml0Wm9vbSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmluZmluaXR5KSB7XG4gICAgICB0aGlzLl9pbml0SW5maW5pdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX3dhdGNoVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbWUgPSB0aGlzO1xuICAgIHZhciBpc0luVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgIHZhciBrZXkgPSB0aGlzLnVzZVRyYW5zaXRpb24gPyAnaXNJblRyYW5zaXRpb24nIDogJ2lzQW5pbWF0aW5nJztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5UcmFuc2l0aW9uO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbCkge1xuICAgICAgICBpc0luVHJhbnNpdGlvbiA9IG5ld1ZhbDtcbiAgICAgICAgLy8gZml4IGlzc3VlICMzNTlcbiAgICAgICAgdmFyIGVsID0gbWUuc2Nyb2xsZXIuY2hpbGRyZW4ubGVuZ3RoID8gbWUuc2Nyb2xsZXIuY2hpbGRyZW4gOiBbbWUuc2Nyb2xsZXJdO1xuICAgICAgICB2YXIgcG9pbnRlckV2ZW50cyA9IGlzSW5UcmFuc2l0aW9uICYmICFtZS5wdWxsaW5nID8gJ25vbmUnIDogJ2F1dG8nO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZWxbaV0uc3R5bGUucG9pbnRlckV2ZW50cyA9IHBvaW50ZXJFdmVudHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5faGFuZGxlQXV0b0JsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vbignc2Nyb2xsU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICBpZiAoYWN0aXZlRWxlbWVudCAmJiAoYWN0aXZlRWxlbWVudC50YWdOYW1lID09PSAnSU5QVVQnIHx8IGFjdGl2ZUVsZW1lbnQudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJykpIHtcbiAgICAgICAgYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX2luaXRET01PYnNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHRpbWVyID0gdm9pZCAwO1xuICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAvLyBkb24ndCBkbyBhbnkgcmVmcmVzaCBkdXJpbmcgdGhlIHRyYW5zaXRpb24sIG9yIG91dHNpZGUgb2YgdGhlIGJvdW5kYXJpZXNcbiAgICAgICAgaWYgKF90aGlzLl9zaG91bGROb3RSZWZyZXNoKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGltbWVkaWF0ZVJlZnJlc2ggPSBmYWxzZTtcbiAgICAgICAgdmFyIGRlZmVycmVkUmVmcmVzaCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11dGF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBtdXRhdGlvbiA9IG11dGF0aW9uc1tpXTtcbiAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSAhPT0gJ2F0dHJpYnV0ZXMnKSB7XG4gICAgICAgICAgICBpbW1lZGlhdGVSZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24udGFyZ2V0ICE9PSBfdGhpcy5zY3JvbGxlcikge1xuICAgICAgICAgICAgICBkZWZlcnJlZFJlZnJlc2ggPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGltbWVkaWF0ZVJlZnJlc2gpIHtcbiAgICAgICAgICBfdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGVmZXJyZWRSZWZyZXNoKSB7XG4gICAgICAgICAgLy8gYXR0cmlidXRlcyBjaGFuZ2VzIHRvbyBvZnRlblxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuX3Nob3VsZE5vdFJlZnJlc2goKSkge1xuICAgICAgICAgICAgICBfdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgNjApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUodGhpcy5zY3JvbGxlciwgY29uZmlnKTtcblxuICAgICAgdGhpcy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NoZWNrRE9NVXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLl9zaG91bGROb3RSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvdXRzaWRlQm91bmRhcmllcyA9IHRoaXMueCA+IHRoaXMubWluU2Nyb2xsWCB8fCB0aGlzLnggPCB0aGlzLm1heFNjcm9sbFggfHwgdGhpcy55ID4gdGhpcy5taW5TY3JvbGxZIHx8IHRoaXMueSA8IHRoaXMubWF4U2Nyb2xsWTtcblxuICAgIHJldHVybiB0aGlzLmlzSW5UcmFuc2l0aW9uIHx8IHRoaXMuc3RvcEZyb21UcmFuc2l0aW9uIHx8IG91dHNpZGVCb3VuZGFyaWVzO1xuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLl9jaGVja0RPTVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2Nyb2xsZXJSZWN0ID0gZ2V0UmVjdCh0aGlzLnNjcm9sbGVyKTtcbiAgICB2YXIgb2xkV2lkdGggPSBzY3JvbGxlclJlY3Qud2lkdGg7XG4gICAgdmFyIG9sZEhlaWdodCA9IHNjcm9sbGVyUmVjdC5oZWlnaHQ7XG5cbiAgICBmdW5jdGlvbiBjaGVjaygpIHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzY3JvbGxlclJlY3QgPSBnZXRSZWN0KHRoaXMuc2Nyb2xsZXIpO1xuICAgICAgdmFyIG5ld1dpZHRoID0gc2Nyb2xsZXJSZWN0LndpZHRoO1xuICAgICAgdmFyIG5ld0hlaWdodCA9IHNjcm9sbGVyUmVjdC5oZWlnaHQ7XG5cbiAgICAgIGlmIChvbGRXaWR0aCAhPT0gbmV3V2lkdGggfHwgb2xkSGVpZ2h0ICE9PSBuZXdIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICB9XG4gICAgICBvbGRXaWR0aCA9IG5ld1dpZHRoO1xuICAgICAgb2xkSGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXG4gICAgICBuZXh0LmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2hlY2suY2FsbChfdGhpczIpO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgbmV4dC5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzd2l0Y2ggKGUudHlwZSkge1xuICAgICAgY2FzZSAndG91Y2hzdGFydCc6XG4gICAgICBjYXNlICdtb3VzZWRvd24nOlxuICAgICAgICB0aGlzLl9zdGFydChlKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy56b29tICYmIGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHRoaXMuX3pvb21TdGFydChlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvdWNobW92ZSc6XG4gICAgICBjYXNlICdtb3VzZW1vdmUnOlxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnpvb20gJiYgZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdGhpcy5fem9vbShlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9tb3ZlKGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG91Y2hlbmQnOlxuICAgICAgY2FzZSAnbW91c2V1cCc6XG4gICAgICBjYXNlICd0b3VjaGNhbmNlbCc6XG4gICAgICBjYXNlICdtb3VzZWNhbmNlbCc6XG4gICAgICAgIGlmICh0aGlzLnNjYWxlZCkge1xuICAgICAgICAgIHRoaXMuX3pvb21FbmQoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZW5kKGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3JpZW50YXRpb25jaGFuZ2UnOlxuICAgICAgY2FzZSAncmVzaXplJzpcbiAgICAgICAgdGhpcy5fcmVzaXplKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndHJhbnNpdGlvbmVuZCc6XG4gICAgICBjYXNlICd3ZWJraXRUcmFuc2l0aW9uRW5kJzpcbiAgICAgIGNhc2UgJ29UcmFuc2l0aW9uRW5kJzpcbiAgICAgIGNhc2UgJ01TVHJhbnNpdGlvbkVuZCc6XG4gICAgICAgIHRoaXMuX3RyYW5zaXRpb25FbmQoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICBpZiAodGhpcy5lbmFibGVkICYmICFlLl9jb25zdHJ1Y3RlZCkge1xuICAgICAgICAgIGlmICghcHJldmVudERlZmF1bHRFeGNlcHRpb24oZS50YXJnZXQsIHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV4Y2VwdGlvbikpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnd2hlZWwnOlxuICAgICAgY2FzZSAnRE9NTW91c2VTY3JvbGwnOlxuICAgICAgY2FzZSAnbW91c2V3aGVlbCc6XG4gICAgICAgIHRoaXMuX29uTW91c2VXaGVlbChlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlzV3JhcHBlclN0YXRpYyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMud3JhcHBlciwgbnVsbCkucG9zaXRpb24gPT09ICdzdGF0aWMnO1xuICAgIHZhciB3cmFwcGVyUmVjdCA9IGdldFJlY3QodGhpcy53cmFwcGVyKTtcbiAgICB0aGlzLndyYXBwZXJXaWR0aCA9IHdyYXBwZXJSZWN0LndpZHRoO1xuICAgIHRoaXMud3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWN0LmhlaWdodDtcblxuICAgIHZhciBzY3JvbGxlclJlY3QgPSBnZXRSZWN0KHRoaXMuc2Nyb2xsZXIpO1xuICAgIHRoaXMuc2Nyb2xsZXJXaWR0aCA9IE1hdGgucm91bmQoc2Nyb2xsZXJSZWN0LndpZHRoICogdGhpcy5zY2FsZSk7XG4gICAgdGhpcy5zY3JvbGxlckhlaWdodCA9IE1hdGgucm91bmQoc2Nyb2xsZXJSZWN0LmhlaWdodCAqIHRoaXMuc2NhbGUpO1xuXG4gICAgdGhpcy5yZWxhdGl2ZVggPSBzY3JvbGxlclJlY3QubGVmdDtcbiAgICB0aGlzLnJlbGF0aXZlWSA9IHNjcm9sbGVyUmVjdC50b3A7XG5cbiAgICBpZiAoaXNXcmFwcGVyU3RhdGljKSB7XG4gICAgICB0aGlzLnJlbGF0aXZlWCAtPSB3cmFwcGVyUmVjdC5sZWZ0O1xuICAgICAgdGhpcy5yZWxhdGl2ZVkgLT0gd3JhcHBlclJlY3QudG9wO1xuICAgIH1cblxuICAgIHRoaXMubWluU2Nyb2xsWCA9IDA7XG4gICAgdGhpcy5taW5TY3JvbGxZID0gMDtcblxuICAgIHZhciB3aGVlbCA9IHRoaXMub3B0aW9ucy53aGVlbDtcbiAgICBpZiAod2hlZWwpIHtcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLnNjcm9sbGVyLmNoaWxkcmVuO1xuICAgICAgdGhpcy5vcHRpb25zLml0ZW1IZWlnaHQgPSB0aGlzLml0ZW1IZWlnaHQgPSB0aGlzLml0ZW1zLmxlbmd0aCA/IHRoaXMuc2Nyb2xsZXJIZWlnaHQgLyB0aGlzLml0ZW1zLmxlbmd0aCA6IDA7XG4gICAgICBpZiAodGhpcy5zZWxlY3RlZEluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gd2hlZWwuc2VsZWN0ZWRJbmRleCB8fCAwO1xuICAgICAgfVxuICAgICAgdGhpcy5vcHRpb25zLnN0YXJ0WSA9IC10aGlzLnNlbGVjdGVkSW5kZXggKiB0aGlzLml0ZW1IZWlnaHQ7XG4gICAgICB0aGlzLm1heFNjcm9sbFggPSAwO1xuICAgICAgdGhpcy5tYXhTY3JvbGxZID0gLXRoaXMuaXRlbUhlaWdodCAqICh0aGlzLml0ZW1zLmxlbmd0aCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1heFNjcm9sbFggPSB0aGlzLndyYXBwZXJXaWR0aCAtIHRoaXMuc2Nyb2xsZXJXaWR0aDtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmluZmluaXR5KSB7XG4gICAgICAgIHRoaXMubWF4U2Nyb2xsWSA9IHRoaXMud3JhcHBlckhlaWdodCAtIHRoaXMuc2Nyb2xsZXJIZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tYXhTY3JvbGxYIDwgMCkge1xuICAgICAgICB0aGlzLm1heFNjcm9sbFggLT0gdGhpcy5yZWxhdGl2ZVg7XG4gICAgICAgIHRoaXMubWluU2Nyb2xsWCA9IC10aGlzLnJlbGF0aXZlWDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zY2FsZSA+IDEpIHtcbiAgICAgICAgdGhpcy5tYXhTY3JvbGxYID0gdGhpcy5tYXhTY3JvbGxYIC8gMiAtIHRoaXMucmVsYXRpdmVYO1xuICAgICAgICB0aGlzLm1pblNjcm9sbFggPSB0aGlzLm1heFNjcm9sbFg7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tYXhTY3JvbGxZIDwgMCkge1xuICAgICAgICB0aGlzLm1heFNjcm9sbFkgLT0gdGhpcy5yZWxhdGl2ZVk7XG4gICAgICAgIHRoaXMubWluU2Nyb2xsWSA9IC10aGlzLnJlbGF0aXZlWTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zY2FsZSA+IDEpIHtcbiAgICAgICAgdGhpcy5tYXhTY3JvbGxZID0gdGhpcy5tYXhTY3JvbGxZIC8gMiAtIHRoaXMucmVsYXRpdmVZO1xuICAgICAgICB0aGlzLm1pblNjcm9sbFkgPSB0aGlzLm1heFNjcm9sbFk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5oYXNIb3Jpem9udGFsU2Nyb2xsID0gdGhpcy5vcHRpb25zLnNjcm9sbFggJiYgdGhpcy5tYXhTY3JvbGxYIDwgdGhpcy5taW5TY3JvbGxYO1xuICAgIHRoaXMuaGFzVmVydGljYWxTY3JvbGwgPSB0aGlzLm9wdGlvbnMuc2Nyb2xsWSAmJiB0aGlzLm1heFNjcm9sbFkgPCB0aGlzLm1pblNjcm9sbFk7XG5cbiAgICBpZiAoIXRoaXMuaGFzSG9yaXpvbnRhbFNjcm9sbCkge1xuICAgICAgdGhpcy5tYXhTY3JvbGxYID0gdGhpcy5taW5TY3JvbGxYO1xuICAgICAgdGhpcy5zY3JvbGxlcldpZHRoID0gdGhpcy53cmFwcGVyV2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsKSB7XG4gICAgICB0aGlzLm1heFNjcm9sbFkgPSB0aGlzLm1pblNjcm9sbFk7XG4gICAgICB0aGlzLnNjcm9sbGVySGVpZ2h0ID0gdGhpcy53cmFwcGVySGVpZ2h0O1xuICAgIH1cblxuICAgIHRoaXMuZW5kVGltZSA9IDA7XG4gICAgdGhpcy5kaXJlY3Rpb25YID0gMDtcbiAgICB0aGlzLmRpcmVjdGlvblkgPSAwO1xuICAgIHRoaXMud3JhcHBlck9mZnNldCA9IG9mZnNldCh0aGlzLndyYXBwZXIpO1xuXG4gICAgdGhpcy50cmlnZ2VyKCdyZWZyZXNoJyk7XG5cbiAgICAhdGhpcy5zY2FsZWQgJiYgdGhpcy5yZXNldFBvc2l0aW9uKCk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgfTtcbn1cblxudmFyIGVhc2UgPSB7XG4gIC8vIGVhc2VPdXRRdWludFxuICBzd2lwZToge1xuICAgIHN0eWxlOiAnY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpJyxcbiAgICBmbjogZnVuY3Rpb24gZm4odCkge1xuICAgICAgcmV0dXJuIDEgKyAtLXQgKiB0ICogdCAqIHQgKiB0O1xuICAgIH1cbiAgfSxcbiAgLy8gZWFzZU91dFF1YXJkXG4gIHN3aXBlQm91bmNlOiB7XG4gICAgc3R5bGU6ICdjdWJpYy1iZXppZXIoMC4yNSwgMC40NiwgMC40NSwgMC45NCknLFxuICAgIGZuOiBmdW5jdGlvbiBmbih0KSB7XG4gICAgICByZXR1cm4gdCAqICgyIC0gdCk7XG4gICAgfVxuICB9LFxuICAvLyBlYXNlT3V0UXVhcnRcbiAgYm91bmNlOiB7XG4gICAgc3R5bGU6ICdjdWJpYy1iZXppZXIoMC4xNjUsIDAuODQsIDAuNDQsIDEpJyxcbiAgICBmbjogZnVuY3Rpb24gZm4odCkge1xuICAgICAgcmV0dXJuIDEgLSAtLXQgKiB0ICogdCAqIHQ7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBtb21lbnR1bShjdXJyZW50LCBzdGFydCwgdGltZSwgbG93ZXJNYXJnaW4sIHVwcGVyTWFyZ2luLCB3cmFwcGVyU2l6ZSwgb3B0aW9ucykge1xuICB2YXIgZGlzdGFuY2UgPSBjdXJyZW50IC0gc3RhcnQ7XG4gIHZhciBzcGVlZCA9IE1hdGguYWJzKGRpc3RhbmNlKSAvIHRpbWU7XG5cbiAgdmFyIGRlY2VsZXJhdGlvbiA9IG9wdGlvbnMuZGVjZWxlcmF0aW9uLFxuICAgICAgaXRlbUhlaWdodCA9IG9wdGlvbnMuaXRlbUhlaWdodCxcbiAgICAgIHN3aXBlQm91bmNlVGltZSA9IG9wdGlvbnMuc3dpcGVCb3VuY2VUaW1lLFxuICAgICAgd2hlZWwgPSBvcHRpb25zLndoZWVsLFxuICAgICAgc3dpcGVUaW1lID0gb3B0aW9ucy5zd2lwZVRpbWU7XG5cbiAgdmFyIGR1cmF0aW9uID0gc3dpcGVUaW1lO1xuICB2YXIgcmF0ZSA9IHdoZWVsID8gNCA6IDE1O1xuXG4gIHZhciBkZXN0aW5hdGlvbiA9IGN1cnJlbnQgKyBzcGVlZCAvIGRlY2VsZXJhdGlvbiAqIChkaXN0YW5jZSA8IDAgPyAtMSA6IDEpO1xuXG4gIGlmICh3aGVlbCAmJiBpdGVtSGVpZ2h0KSB7XG4gICAgZGVzdGluYXRpb24gPSBNYXRoLnJvdW5kKGRlc3RpbmF0aW9uIC8gaXRlbUhlaWdodCkgKiBpdGVtSGVpZ2h0O1xuICB9XG5cbiAgaWYgKGRlc3RpbmF0aW9uIDwgbG93ZXJNYXJnaW4pIHtcbiAgICBkZXN0aW5hdGlvbiA9IHdyYXBwZXJTaXplID8gTWF0aC5tYXgobG93ZXJNYXJnaW4gLSB3cmFwcGVyU2l6ZSAvIDQsIGxvd2VyTWFyZ2luIC0gd3JhcHBlclNpemUgLyByYXRlICogc3BlZWQpIDogbG93ZXJNYXJnaW47XG4gICAgZHVyYXRpb24gPSBzd2lwZUJvdW5jZVRpbWU7XG4gIH0gZWxzZSBpZiAoZGVzdGluYXRpb24gPiB1cHBlck1hcmdpbikge1xuICAgIGRlc3RpbmF0aW9uID0gd3JhcHBlclNpemUgPyBNYXRoLm1pbih1cHBlck1hcmdpbiArIHdyYXBwZXJTaXplIC8gNCwgdXBwZXJNYXJnaW4gKyB3cmFwcGVyU2l6ZSAvIHJhdGUgKiBzcGVlZCkgOiB1cHBlck1hcmdpbjtcbiAgICBkdXJhdGlvbiA9IHN3aXBlQm91bmNlVGltZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZGVzdGluYXRpb246IE1hdGgucm91bmQoZGVzdGluYXRpb24pLFxuICAgIGR1cmF0aW9uOiBkdXJhdGlvblxuICB9O1xufVxuXG52YXIgREVGQVVMVF9JTlRFUlZBTCA9IDEwMCAvIDYwO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICByZXR1cm4gbm9vcDtcbiAgfVxuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgLy8gaWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBzZXRUaW1lb3V0XG4gIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgKGNhbGxiYWNrLmludGVydmFsIHx8IERFRkFVTFRfSU5URVJWQUwpIC8gMik7IC8vIG1ha2UgaW50ZXJ2YWwgYXMgcHJlY2lzZSBhcyBwb3NzaWJsZS5cbiAgfTtcbn0oKTtcblxudmFyIGNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIHJldHVybiBub29wO1xuICB9XG4gIHJldHVybiB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uIChpZCkge1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaWQpO1xuICB9O1xufSgpO1xuXG52YXIgRElSRUNUSU9OX1VQID0gMTtcbnZhciBESVJFQ1RJT05fRE9XTiA9IC0xO1xudmFyIERJUkVDVElPTl9MRUZUID0gMTtcbnZhciBESVJFQ1RJT05fUklHSFQgPSAtMTtcblxudmFyIFBST0JFX0RFQk9VTkNFID0gMTtcblxudmFyIFBST0JFX1JFQUxUSU1FID0gMztcblxuZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgY29uc29sZS5lcnJvcignW0JTY3JvbGwgd2Fybl06ICcgKyBtc2cpO1xufVxuXG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtc2cpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tCU2Nyb2xsXSAnICsgbXNnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3JlTWl4aW4oQlNjcm9sbCkge1xuICBCU2Nyb2xsLnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBfZXZlbnRUeXBlID0gZXZlbnRUeXBlW2UudHlwZV07XG4gICAgaWYgKF9ldmVudFR5cGUgIT09IFRPVUNIX0VWRU5UKSB7XG4gICAgICBpZiAoZS5idXR0b24gIT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRoaXMuZW5hYmxlZCB8fCB0aGlzLmRlc3Ryb3llZCB8fCB0aGlzLmluaXRpYXRlZCAmJiB0aGlzLmluaXRpYXRlZCAhPT0gX2V2ZW50VHlwZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmluaXRpYXRlZCA9IF9ldmVudFR5cGU7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnByZXZlbnREZWZhdWx0ICYmICFwcmV2ZW50RGVmYXVsdEV4Y2VwdGlvbihlLnRhcmdldCwgdGhpcy5vcHRpb25zLnByZXZlbnREZWZhdWx0RXhjZXB0aW9uKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICB0aGlzLm1vdmVkID0gZmFsc2U7XG4gICAgdGhpcy5kaXN0WCA9IDA7XG4gICAgdGhpcy5kaXN0WSA9IDA7XG4gICAgdGhpcy5kaXJlY3Rpb25YID0gMDtcbiAgICB0aGlzLmRpcmVjdGlvblkgPSAwO1xuICAgIHRoaXMubW92aW5nRGlyZWN0aW9uWCA9IDA7XG4gICAgdGhpcy5tb3ZpbmdEaXJlY3Rpb25ZID0gMDtcbiAgICB0aGlzLmRpcmVjdGlvbkxvY2tlZCA9IDA7XG5cbiAgICB0aGlzLl90cmFuc2l0aW9uVGltZSgpO1xuICAgIHRoaXMuc3RhcnRUaW1lID0gZ2V0Tm93KCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLndoZWVsKSB7XG4gICAgICB0aGlzLnRhcmdldCA9IGUudGFyZ2V0O1xuICAgIH1cblxuICAgIHRoaXMuc3RvcCgpO1xuXG4gICAgdmFyIHBvaW50ID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcblxuICAgIHRoaXMuc3RhcnRYID0gdGhpcy54O1xuICAgIHRoaXMuc3RhcnRZID0gdGhpcy55O1xuICAgIHRoaXMuYWJzU3RhcnRYID0gdGhpcy54O1xuICAgIHRoaXMuYWJzU3RhcnRZID0gdGhpcy55O1xuICAgIHRoaXMucG9pbnRYID0gcG9pbnQucGFnZVg7XG4gICAgdGhpcy5wb2ludFkgPSBwb2ludC5wYWdlWTtcblxuICAgIHRoaXMudHJpZ2dlcignYmVmb3JlU2Nyb2xsU3RhcnQnKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fbW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCF0aGlzLmVuYWJsZWQgfHwgdGhpcy5kZXN0cm95ZWQgfHwgZXZlbnRUeXBlW2UudHlwZV0gIT09IHRoaXMuaW5pdGlhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICB2YXIgcG9pbnQgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuICAgIHZhciBkZWx0YVggPSBwb2ludC5wYWdlWCAtIHRoaXMucG9pbnRYO1xuICAgIHZhciBkZWx0YVkgPSBwb2ludC5wYWdlWSAtIHRoaXMucG9pbnRZO1xuXG4gICAgdGhpcy5wb2ludFggPSBwb2ludC5wYWdlWDtcbiAgICB0aGlzLnBvaW50WSA9IHBvaW50LnBhZ2VZO1xuXG4gICAgdGhpcy5kaXN0WCArPSBkZWx0YVg7XG4gICAgdGhpcy5kaXN0WSArPSBkZWx0YVk7XG5cbiAgICB2YXIgYWJzRGlzdFggPSBNYXRoLmFicyh0aGlzLmRpc3RYKTtcbiAgICB2YXIgYWJzRGlzdFkgPSBNYXRoLmFicyh0aGlzLmRpc3RZKTtcblxuICAgIHZhciB0aW1lc3RhbXAgPSBnZXROb3coKTtcblxuICAgIC8vIFdlIG5lZWQgdG8gbW92ZSBhdCBsZWFzdCBtb21lbnR1bUxpbWl0RGlzdGFuY2UgcGl4ZWxzIGZvciB0aGUgc2Nyb2xsaW5nIHRvIGluaXRpYXRlXG4gICAgaWYgKHRpbWVzdGFtcCAtIHRoaXMuZW5kVGltZSA+IHRoaXMub3B0aW9ucy5tb21lbnR1bUxpbWl0VGltZSAmJiBhYnNEaXN0WSA8IHRoaXMub3B0aW9ucy5tb21lbnR1bUxpbWl0RGlzdGFuY2UgJiYgYWJzRGlzdFggPCB0aGlzLm9wdGlvbnMubW9tZW50dW1MaW1pdERpc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgeW91IGFyZSBzY3JvbGxpbmcgaW4gb25lIGRpcmVjdGlvbiBsb2NrIHRoZSBvdGhlclxuICAgIGlmICghdGhpcy5kaXJlY3Rpb25Mb2NrZWQgJiYgIXRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsKSB7XG4gICAgICBpZiAoYWJzRGlzdFggPiBhYnNEaXN0WSArIHRoaXMub3B0aW9ucy5kaXJlY3Rpb25Mb2NrVGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uTG9ja2VkID0gJ2gnOyAvLyBsb2NrIGhvcml6b250YWxseVxuICAgICAgfSBlbHNlIGlmIChhYnNEaXN0WSA+PSBhYnNEaXN0WCArIHRoaXMub3B0aW9ucy5kaXJlY3Rpb25Mb2NrVGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uTG9ja2VkID0gJ3YnOyAvLyBsb2NrIHZlcnRpY2FsbHlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uTG9ja2VkID0gJ24nOyAvLyBubyBsb2NrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGlyZWN0aW9uTG9ja2VkID09PSAnaCcpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXZlbnRQYXNzdGhyb3VnaCA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5ldmVudFBhc3N0aHJvdWdoID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgdGhpcy5pbml0aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGVsdGFZID0gMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGlyZWN0aW9uTG9ja2VkID09PSAndicpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXZlbnRQYXNzdGhyb3VnaCA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmV2ZW50UGFzc3Rocm91Z2ggPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgdGhpcy5pbml0aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGVsdGFYID0gMDtcbiAgICB9XG5cbiAgICBkZWx0YVggPSB0aGlzLmhhc0hvcml6b250YWxTY3JvbGwgPyBkZWx0YVggOiAwO1xuICAgIGRlbHRhWSA9IHRoaXMuaGFzVmVydGljYWxTY3JvbGwgPyBkZWx0YVkgOiAwO1xuICAgIHRoaXMubW92aW5nRGlyZWN0aW9uWCA9IGRlbHRhWCA+IDAgPyBESVJFQ1RJT05fUklHSFQgOiBkZWx0YVggPCAwID8gRElSRUNUSU9OX0xFRlQgOiAwO1xuICAgIHRoaXMubW92aW5nRGlyZWN0aW9uWSA9IGRlbHRhWSA+IDAgPyBESVJFQ1RJT05fRE9XTiA6IGRlbHRhWSA8IDAgPyBESVJFQ1RJT05fVVAgOiAwO1xuXG4gICAgdmFyIG5ld1ggPSB0aGlzLnggKyBkZWx0YVg7XG4gICAgdmFyIG5ld1kgPSB0aGlzLnkgKyBkZWx0YVk7XG5cbiAgICB2YXIgdG9wID0gZmFsc2U7XG4gICAgdmFyIGJvdHRvbSA9IGZhbHNlO1xuICAgIHZhciBsZWZ0ID0gZmFsc2U7XG4gICAgdmFyIHJpZ2h0ID0gZmFsc2U7XG4gICAgLy8gU2xvdyBkb3duIG9yIHN0b3AgaWYgb3V0c2lkZSBvZiB0aGUgYm91bmRhcmllc1xuICAgIHZhciBib3VuY2UgPSB0aGlzLm9wdGlvbnMuYm91bmNlO1xuICAgIGlmIChib3VuY2UgIT09IGZhbHNlKSB7XG4gICAgICB0b3AgPSBib3VuY2UudG9wID09PSB1bmRlZmluZWQgPyB0cnVlIDogYm91bmNlLnRvcDtcbiAgICAgIGJvdHRvbSA9IGJvdW5jZS5ib3R0b20gPT09IHVuZGVmaW5lZCA/IHRydWUgOiBib3VuY2UuYm90dG9tO1xuICAgICAgbGVmdCA9IGJvdW5jZS5sZWZ0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogYm91bmNlLmxlZnQ7XG4gICAgICByaWdodCA9IGJvdW5jZS5yaWdodCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGJvdW5jZS5yaWdodDtcbiAgICB9XG4gICAgaWYgKG5ld1ggPiB0aGlzLm1pblNjcm9sbFggfHwgbmV3WCA8IHRoaXMubWF4U2Nyb2xsWCkge1xuICAgICAgaWYgKG5ld1ggPiB0aGlzLm1pblNjcm9sbFggJiYgbGVmdCB8fCBuZXdYIDwgdGhpcy5tYXhTY3JvbGxYICYmIHJpZ2h0KSB7XG4gICAgICAgIG5ld1ggPSB0aGlzLnggKyBkZWx0YVggLyAzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3WCA9IG5ld1ggPiB0aGlzLm1pblNjcm9sbFggPyB0aGlzLm1pblNjcm9sbFggOiB0aGlzLm1heFNjcm9sbFg7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZXdZID4gdGhpcy5taW5TY3JvbGxZIHx8IG5ld1kgPCB0aGlzLm1heFNjcm9sbFkpIHtcbiAgICAgIGlmIChuZXdZID4gdGhpcy5taW5TY3JvbGxZICYmIHRvcCB8fCBuZXdZIDwgdGhpcy5tYXhTY3JvbGxZICYmIGJvdHRvbSkge1xuICAgICAgICBuZXdZID0gdGhpcy55ICsgZGVsdGFZIC8gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1kgPSBuZXdZID4gdGhpcy5taW5TY3JvbGxZID8gdGhpcy5taW5TY3JvbGxZIDogdGhpcy5tYXhTY3JvbGxZO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5tb3ZlZCkge1xuICAgICAgdGhpcy5tb3ZlZCA9IHRydWU7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3Njcm9sbFN0YXJ0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhbnNsYXRlKG5ld1gsIG5ld1kpO1xuXG4gICAgaWYgKHRpbWVzdGFtcCAtIHRoaXMuc3RhcnRUaW1lID4gdGhpcy5vcHRpb25zLm1vbWVudHVtTGltaXRUaW1lKSB7XG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IHRpbWVzdGFtcDtcbiAgICAgIHRoaXMuc3RhcnRYID0gdGhpcy54O1xuICAgICAgdGhpcy5zdGFydFkgPSB0aGlzLnk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJvYmVUeXBlID09PSBQUk9CRV9ERUJPVU5DRSkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ3Njcm9sbCcsIHtcbiAgICAgICAgICB4OiB0aGlzLngsXG4gICAgICAgICAgeTogdGhpcy55XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMucHJvYmVUeXBlID4gUFJPQkVfREVCT1VOQ0UpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignc2Nyb2xsJywge1xuICAgICAgICB4OiB0aGlzLngsXG4gICAgICAgIHk6IHRoaXMueVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbExlZnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCB8fCB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0O1xuICAgIHZhciBzY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcblxuICAgIHZhciBwWCA9IHRoaXMucG9pbnRYIC0gc2Nyb2xsTGVmdDtcbiAgICB2YXIgcFkgPSB0aGlzLnBvaW50WSAtIHNjcm9sbFRvcDtcblxuICAgIGlmIChwWCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIHRoaXMub3B0aW9ucy5tb21lbnR1bUxpbWl0RGlzdGFuY2UgfHwgcFggPCB0aGlzLm9wdGlvbnMubW9tZW50dW1MaW1pdERpc3RhbmNlIHx8IHBZIDwgdGhpcy5vcHRpb25zLm1vbWVudHVtTGltaXREaXN0YW5jZSB8fCBwWSA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSB0aGlzLm9wdGlvbnMubW9tZW50dW1MaW1pdERpc3RhbmNlKSB7XG4gICAgICB0aGlzLl9lbmQoZSk7XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLl9lbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICghdGhpcy5lbmFibGVkIHx8IHRoaXMuZGVzdHJveWVkIHx8IGV2ZW50VHlwZVtlLnR5cGVdICE9PSB0aGlzLmluaXRpYXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmluaXRpYXRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdCAmJiAhcHJldmVudERlZmF1bHRFeGNlcHRpb24oZS50YXJnZXQsIHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV4Y2VwdGlvbikpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCd0b3VjaEVuZCcsIHtcbiAgICAgIHg6IHRoaXMueCxcbiAgICAgIHk6IHRoaXMueVxuICAgIH0pO1xuXG4gICAgdGhpcy5pc0luVHJhbnNpdGlvbiA9IGZhbHNlO1xuXG4gICAgLy8gZW5zdXJlcyB0aGF0IHRoZSBsYXN0IHBvc2l0aW9uIGlzIHJvdW5kZWRcbiAgICB2YXIgbmV3WCA9IE1hdGgucm91bmQodGhpcy54KTtcbiAgICB2YXIgbmV3WSA9IE1hdGgucm91bmQodGhpcy55KTtcblxuICAgIHZhciBkZWx0YVggPSBuZXdYIC0gdGhpcy5hYnNTdGFydFg7XG4gICAgdmFyIGRlbHRhWSA9IG5ld1kgLSB0aGlzLmFic1N0YXJ0WTtcbiAgICB0aGlzLmRpcmVjdGlvblggPSBkZWx0YVggPiAwID8gRElSRUNUSU9OX1JJR0hUIDogZGVsdGFYIDwgMCA/IERJUkVDVElPTl9MRUZUIDogMDtcbiAgICB0aGlzLmRpcmVjdGlvblkgPSBkZWx0YVkgPiAwID8gRElSRUNUSU9OX0RPV04gOiBkZWx0YVkgPCAwID8gRElSRUNUSU9OX1VQIDogMDtcblxuICAgIC8vIGlmIGNvbmZpZ3VyZSBwdWxsIGRvd24gcmVmcmVzaCwgY2hlY2sgaXQgZmlyc3RcbiAgICBpZiAodGhpcy5vcHRpb25zLnB1bGxEb3duUmVmcmVzaCAmJiB0aGlzLl9jaGVja1B1bGxEb3duKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBpdCBpcyBhIGNsaWNrIG9wZXJhdGlvblxuICAgIGlmICh0aGlzLl9jaGVja0NsaWNrKGUpKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3Njcm9sbENhbmNlbCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHJlc2V0IGlmIHdlIGFyZSBvdXRzaWRlIG9mIHRoZSBib3VuZGFyaWVzXG4gICAgaWYgKHRoaXMucmVzZXRQb3NpdGlvbih0aGlzLm9wdGlvbnMuYm91bmNlVGltZSwgZWFzZS5ib3VuY2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhbnNsYXRlKG5ld1gsIG5ld1kpO1xuXG4gICAgdGhpcy5lbmRUaW1lID0gZ2V0Tm93KCk7XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy5lbmRUaW1lIC0gdGhpcy5zdGFydFRpbWU7XG4gICAgdmFyIGFic0Rpc3RYID0gTWF0aC5hYnMobmV3WCAtIHRoaXMuc3RhcnRYKTtcbiAgICB2YXIgYWJzRGlzdFkgPSBNYXRoLmFicyhuZXdZIC0gdGhpcy5zdGFydFkpO1xuXG4gICAgLy8gZmxpY2tcbiAgICBpZiAodGhpcy5fZXZlbnRzLmZsaWNrICYmIGR1cmF0aW9uIDwgdGhpcy5vcHRpb25zLmZsaWNrTGltaXRUaW1lICYmIGFic0Rpc3RYIDwgdGhpcy5vcHRpb25zLmZsaWNrTGltaXREaXN0YW5jZSAmJiBhYnNEaXN0WSA8IHRoaXMub3B0aW9ucy5mbGlja0xpbWl0RGlzdGFuY2UpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZmxpY2snKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGltZSA9IDA7XG4gICAgLy8gc3RhcnQgbW9tZW50dW0gYW5pbWF0aW9uIGlmIG5lZWRlZFxuICAgIGlmICh0aGlzLm9wdGlvbnMubW9tZW50dW0gJiYgZHVyYXRpb24gPCB0aGlzLm9wdGlvbnMubW9tZW50dW1MaW1pdFRpbWUgJiYgKGFic0Rpc3RZID4gdGhpcy5vcHRpb25zLm1vbWVudHVtTGltaXREaXN0YW5jZSB8fCBhYnNEaXN0WCA+IHRoaXMub3B0aW9ucy5tb21lbnR1bUxpbWl0RGlzdGFuY2UpKSB7XG4gICAgICB2YXIgdG9wID0gZmFsc2U7XG4gICAgICB2YXIgYm90dG9tID0gZmFsc2U7XG4gICAgICB2YXIgbGVmdCA9IGZhbHNlO1xuICAgICAgdmFyIHJpZ2h0ID0gZmFsc2U7XG4gICAgICB2YXIgYm91bmNlID0gdGhpcy5vcHRpb25zLmJvdW5jZTtcbiAgICAgIGlmIChib3VuY2UgIT09IGZhbHNlKSB7XG4gICAgICAgIHRvcCA9IGJvdW5jZS50b3AgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBib3VuY2UudG9wO1xuICAgICAgICBib3R0b20gPSBib3VuY2UuYm90dG9tID09PSB1bmRlZmluZWQgPyB0cnVlIDogYm91bmNlLmJvdHRvbTtcbiAgICAgICAgbGVmdCA9IGJvdW5jZS5sZWZ0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogYm91bmNlLmxlZnQ7XG4gICAgICAgIHJpZ2h0ID0gYm91bmNlLnJpZ2h0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogYm91bmNlLnJpZ2h0O1xuICAgICAgfVxuICAgICAgdmFyIHdyYXBwZXJXaWR0aCA9IHRoaXMuZGlyZWN0aW9uWCA9PT0gRElSRUNUSU9OX1JJR0hUICYmIGxlZnQgfHwgdGhpcy5kaXJlY3Rpb25YID09PSBESVJFQ1RJT05fTEVGVCAmJiByaWdodCA/IHRoaXMud3JhcHBlcldpZHRoIDogMDtcbiAgICAgIHZhciB3cmFwcGVySGVpZ2h0ID0gdGhpcy5kaXJlY3Rpb25ZID09PSBESVJFQ1RJT05fRE9XTiAmJiB0b3AgfHwgdGhpcy5kaXJlY3Rpb25ZID09PSBESVJFQ1RJT05fVVAgJiYgYm90dG9tID8gdGhpcy53cmFwcGVySGVpZ2h0IDogMDtcbiAgICAgIHZhciBtb21lbnR1bVggPSB0aGlzLmhhc0hvcml6b250YWxTY3JvbGwgPyBtb21lbnR1bSh0aGlzLngsIHRoaXMuc3RhcnRYLCBkdXJhdGlvbiwgdGhpcy5tYXhTY3JvbGxYLCB0aGlzLm1pblNjcm9sbFgsIHdyYXBwZXJXaWR0aCwgdGhpcy5vcHRpb25zKSA6IHsgZGVzdGluYXRpb246IG5ld1gsIGR1cmF0aW9uOiAwIH07XG4gICAgICB2YXIgbW9tZW50dW1ZID0gdGhpcy5oYXNWZXJ0aWNhbFNjcm9sbCA/IG1vbWVudHVtKHRoaXMueSwgdGhpcy5zdGFydFksIGR1cmF0aW9uLCB0aGlzLm1heFNjcm9sbFksIHRoaXMubWluU2Nyb2xsWSwgd3JhcHBlckhlaWdodCwgdGhpcy5vcHRpb25zKSA6IHsgZGVzdGluYXRpb246IG5ld1ksIGR1cmF0aW9uOiAwIH07XG4gICAgICBuZXdYID0gbW9tZW50dW1YLmRlc3RpbmF0aW9uO1xuICAgICAgbmV3WSA9IG1vbWVudHVtWS5kZXN0aW5hdGlvbjtcbiAgICAgIHRpbWUgPSBNYXRoLm1heChtb21lbnR1bVguZHVyYXRpb24sIG1vbWVudHVtWS5kdXJhdGlvbik7XG4gICAgICB0aGlzLmlzSW5UcmFuc2l0aW9uID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy53aGVlbCkge1xuICAgICAgICBuZXdZID0gTWF0aC5yb3VuZChuZXdZIC8gdGhpcy5pdGVtSGVpZ2h0KSAqIHRoaXMuaXRlbUhlaWdodDtcbiAgICAgICAgdGltZSA9IHRoaXMub3B0aW9ucy53aGVlbC5hZGp1c3RUaW1lIHx8IDQwMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZWFzaW5nID0gZWFzZS5zd2lwZTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnNuYXApIHtcbiAgICAgIHZhciBzbmFwID0gdGhpcy5fbmVhcmVzdFNuYXAobmV3WCwgbmV3WSk7XG4gICAgICB0aGlzLmN1cnJlbnRQYWdlID0gc25hcDtcbiAgICAgIHRpbWUgPSB0aGlzLm9wdGlvbnMuc25hcFNwZWVkIHx8IE1hdGgubWF4KE1hdGgubWF4KE1hdGgubWluKE1hdGguYWJzKG5ld1ggLSBzbmFwLngpLCAxMDAwKSwgTWF0aC5taW4oTWF0aC5hYnMobmV3WSAtIHNuYXAueSksIDEwMDApKSwgMzAwKTtcbiAgICAgIG5ld1ggPSBzbmFwLng7XG4gICAgICBuZXdZID0gc25hcC55O1xuXG4gICAgICB0aGlzLmRpcmVjdGlvblggPSAwO1xuICAgICAgdGhpcy5kaXJlY3Rpb25ZID0gMDtcbiAgICAgIGVhc2luZyA9IHRoaXMub3B0aW9ucy5zbmFwLmVhc2luZyB8fCBlYXNlLmJvdW5jZTtcbiAgICB9XG5cbiAgICBpZiAobmV3WCAhPT0gdGhpcy54IHx8IG5ld1kgIT09IHRoaXMueSkge1xuICAgICAgLy8gY2hhbmdlIGVhc2luZyBmdW5jdGlvbiB3aGVuIHNjcm9sbGVyIGdvZXMgb3V0IG9mIHRoZSBib3VuZGFyaWVzXG4gICAgICBpZiAobmV3WCA+IHRoaXMubWluU2Nyb2xsWCB8fCBuZXdYIDwgdGhpcy5tYXhTY3JvbGxYIHx8IG5ld1kgPiB0aGlzLm1pblNjcm9sbFkgfHwgbmV3WSA8IHRoaXMubWF4U2Nyb2xsWSkge1xuICAgICAgICBlYXNpbmcgPSBlYXNlLnN3aXBlQm91bmNlO1xuICAgICAgfVxuICAgICAgdGhpcy5zY3JvbGxUbyhuZXdYLCBuZXdZLCB0aW1lLCBlYXNpbmcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMud2hlZWwpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IE1hdGgucm91bmQoTWF0aC5hYnModGhpcy55IC8gdGhpcy5pdGVtSGVpZ2h0KSk7XG4gICAgfVxuICAgIHRoaXMudHJpZ2dlcignc2Nyb2xsRW5kJywge1xuICAgICAgeDogdGhpcy54LFxuICAgICAgeTogdGhpcy55XG4gICAgfSk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX2NoZWNrQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgIC8vIHdoZW4gaW4gdGhlIHByb2Nlc3Mgb2YgcHVsbGluZyBkb3duLCBpdCBzaG91bGQgbm90IHByZXZlbnQgY2xpY2tcbiAgICB2YXIgcHJldmVudENsaWNrID0gdGhpcy5zdG9wRnJvbVRyYW5zaXRpb24gJiYgIXRoaXMucHVsbGluZztcbiAgICB0aGlzLnN0b3BGcm9tVHJhbnNpdGlvbiA9IGZhbHNlO1xuXG4gICAgLy8gd2Ugc2Nyb2xsZWQgbGVzcyB0aGFuIDE1IHBpeGVsc1xuICAgIGlmICghdGhpcy5tb3ZlZCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy53aGVlbCkge1xuICAgICAgICBpZiAodGhpcy50YXJnZXQgJiYgdGhpcy50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMub3B0aW9ucy53aGVlbC53aGVlbFdyYXBwZXJDbGFzcykpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBNYXRoLmFicyhNYXRoLnJvdW5kKHRoaXMueSAvIHRoaXMuaXRlbUhlaWdodCkpO1xuICAgICAgICAgIHZhciBfb2Zmc2V0ID0gTWF0aC5yb3VuZCgodGhpcy5wb2ludFkgKyBvZmZzZXRUb0JvZHkodGhpcy53cmFwcGVyKS50b3AgLSB0aGlzLndyYXBwZXJIZWlnaHQgLyAyKSAvIHRoaXMuaXRlbUhlaWdodCk7XG4gICAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLml0ZW1zW2luZGV4ICsgX29mZnNldF07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY3JvbGxUb0VsZW1lbnQodGhpcy50YXJnZXQsIHRoaXMub3B0aW9ucy53aGVlbC5hZGp1c3RUaW1lIHx8IDQwMCwgdHJ1ZSwgdHJ1ZSwgZWFzZS5zd2lwZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFwcmV2ZW50Q2xpY2spIHtcbiAgICAgICAgICB2YXIgX2RibGNsaWNrID0gdGhpcy5vcHRpb25zLmRibGNsaWNrO1xuICAgICAgICAgIHZhciBkYmxjbGlja1RyaWdnZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoX2RibGNsaWNrICYmIHRoaXMubGFzdENsaWNrVGltZSkge1xuICAgICAgICAgICAgdmFyIF9kYmxjbGljayRkZWxheSA9IF9kYmxjbGljay5kZWxheSxcbiAgICAgICAgICAgICAgICBkZWxheSA9IF9kYmxjbGljayRkZWxheSA9PT0gdW5kZWZpbmVkID8gMzAwIDogX2RibGNsaWNrJGRlbGF5O1xuXG4gICAgICAgICAgICBpZiAoZ2V0Tm93KCkgLSB0aGlzLmxhc3RDbGlja1RpbWUgPCBkZWxheSkge1xuICAgICAgICAgICAgICBkYmxjbGlja1RyaWdnZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBkYmxjbGljayhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50YXApIHtcbiAgICAgICAgICAgIHRhcChlLCB0aGlzLm9wdGlvbnMudGFwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrICYmICFwcmV2ZW50RGVmYXVsdEV4Y2VwdGlvbihlLnRhcmdldCwgdGhpcy5vcHRpb25zLnByZXZlbnREZWZhdWx0RXhjZXB0aW9uKSkge1xuICAgICAgICAgICAgY2xpY2soZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubGFzdENsaWNrVGltZSA9IGRibGNsaWNrVHJpZ2dlZCA/IG51bGwgOiBnZXROb3coKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fcmVzaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMuZW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmaXggYSBzY3JvbGwgcHJvYmxlbSB1bmRlciBBbmRyb2lkIGNvbmRpdGlvblxuICAgIGlmIChpc0FuZHJvaWQpIHtcbiAgICAgIHRoaXMud3JhcHBlci5zY3JvbGxUb3AgPSAwO1xuICAgIH1cbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lb3V0KTtcbiAgICB0aGlzLnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnJlZnJlc2goKTtcbiAgICB9LCB0aGlzLm9wdGlvbnMucmVzaXplUG9sbGluZyk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX3N0YXJ0UHJvYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5wcm9iZVRpbWVyKTtcbiAgICB0aGlzLnByb2JlVGltZXIgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocHJvYmUpO1xuXG4gICAgdmFyIG1lID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHByb2JlKCkge1xuICAgICAgdmFyIHBvcyA9IG1lLmdldENvbXB1dGVkUG9zaXRpb24oKTtcbiAgICAgIG1lLnRyaWdnZXIoJ3Njcm9sbCcsIHBvcyk7XG4gICAgICBpZiAoIW1lLmlzSW5UcmFuc2l0aW9uKSB7XG4gICAgICAgIG1lLnRyaWdnZXIoJ3Njcm9sbEVuZCcsIHBvcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG1lLnByb2JlVGltZXIgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocHJvYmUpO1xuICAgIH1cbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fdHJhbnNpdGlvblRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDA7XG5cbiAgICB0aGlzLnNjcm9sbGVyU3R5bGVbc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uXSA9IHRpbWUgKyAnbXMnO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy53aGVlbCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuaXRlbXNbaV0uc3R5bGVbc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uXSA9IHRpbWUgKyAnbXMnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmluZGljYXRvcnMpIHtcbiAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGlzLmluZGljYXRvcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHRoaXMuaW5kaWNhdG9yc1tfaV0udHJhbnNpdGlvblRpbWUodGltZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLl90cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSBmdW5jdGlvbiAoZWFzaW5nKSB7XG4gICAgdGhpcy5zY3JvbGxlclN0eWxlW3N0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbl0gPSBlYXNpbmc7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLndoZWVsKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5pdGVtc1tpXS5zdHlsZVtzdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25dID0gZWFzaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmluZGljYXRvcnMpIHtcbiAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHRoaXMuaW5kaWNhdG9ycy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHRoaXMuaW5kaWNhdG9yc1tfaTJdLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbihlYXNpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fdHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzLnNjcm9sbGVyIHx8ICF0aGlzLmlzSW5UcmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fdHJhbnNpdGlvblRpbWUoKTtcbiAgICB2YXIgbmVlZFJlc2V0ID0gIXRoaXMucHVsbGluZyB8fCB0aGlzLm1vdmluZ0RpcmVjdGlvblkgPT09IERJUkVDVElPTl9VUDtcbiAgICBpZiAobmVlZFJlc2V0ICYmICF0aGlzLnJlc2V0UG9zaXRpb24odGhpcy5vcHRpb25zLmJvdW5jZVRpbWUsIGVhc2UuYm91bmNlKSkge1xuICAgICAgdGhpcy5pc0luVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wcm9iZVR5cGUgIT09IFBST0JFX1JFQUxUSU1FKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignc2Nyb2xsRW5kJywge1xuICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICB5OiB0aGlzLnlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLl90cmFuc2xhdGUgPSBmdW5jdGlvbiAoeCwgeSwgc2NhbGUpIHtcbiAgICBhc3NlcnQoIWlzVW5kZWYoeCkgJiYgIWlzVW5kZWYoeSksICdUcmFuc2xhdGUgeCBvciB5IGlzIG51bGwgb3IgdW5kZWZpbmVkLicpO1xuICAgIGlmIChpc1VuZGVmKHNjYWxlKSkge1xuICAgICAgc2NhbGUgPSB0aGlzLnNjYWxlO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnVzZVRyYW5zZm9ybSkge1xuICAgICAgdGhpcy5zY3JvbGxlclN0eWxlW3N0eWxlLnRyYW5zZm9ybV0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJ3B4LCcgKyB5ICsgJ3B4KSBzY2FsZSgnICsgc2NhbGUgKyAnKScgKyB0aGlzLnRyYW5zbGF0ZVo7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSBNYXRoLnJvdW5kKHgpO1xuICAgICAgeSA9IE1hdGgucm91bmQoeSk7XG4gICAgICB0aGlzLnNjcm9sbGVyU3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgdGhpcy5zY3JvbGxlclN0eWxlLnRvcCA9IHkgKyAncHgnO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMud2hlZWwpIHtcbiAgICAgIHZhciBfb3B0aW9ucyR3aGVlbCRyb3RhdGUgPSB0aGlzLm9wdGlvbnMud2hlZWwucm90YXRlLFxuICAgICAgICAgIHJvdGF0ZSA9IF9vcHRpb25zJHdoZWVsJHJvdGF0ZSA9PT0gdW5kZWZpbmVkID8gMjUgOiBfb3B0aW9ucyR3aGVlbCRyb3RhdGU7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVnID0gcm90YXRlICogKHkgLyB0aGlzLml0ZW1IZWlnaHQgKyBpKTtcbiAgICAgICAgdGhpcy5pdGVtc1tpXS5zdHlsZVtzdHlsZS50cmFuc2Zvcm1dID0gJ3JvdGF0ZVgoJyArIGRlZyArICdkZWcpJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5zZXRTY2FsZShzY2FsZSk7XG5cbiAgICBpZiAodGhpcy5pbmRpY2F0b3JzKSB7XG4gICAgICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCB0aGlzLmluZGljYXRvcnMubGVuZ3RoOyBfaTMrKykge1xuICAgICAgICB0aGlzLmluZGljYXRvcnNbX2kzXS51cGRhdGVQb3NpdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fYW5pbWF0ZSA9IGZ1bmN0aW9uIChkZXN0WCwgZGVzdFksIGR1cmF0aW9uLCBlYXNpbmdGbikge1xuICAgIHZhciBtZSA9IHRoaXM7XG4gICAgdmFyIHN0YXJ0WCA9IHRoaXMueDtcbiAgICB2YXIgc3RhcnRZID0gdGhpcy55O1xuICAgIHZhciBzdGFydFNjYWxlID0gdGhpcy5sYXN0U2NhbGU7XG4gICAgdmFyIGRlc3RTY2FsZSA9IHRoaXMuc2NhbGU7XG4gICAgdmFyIHN0YXJ0VGltZSA9IGdldE5vdygpO1xuICAgIHZhciBkZXN0VGltZSA9IHN0YXJ0VGltZSArIGR1cmF0aW9uO1xuXG4gICAgZnVuY3Rpb24gc3RlcCgpIHtcbiAgICAgIHZhciBub3cgPSBnZXROb3coKTtcblxuICAgICAgaWYgKG5vdyA+PSBkZXN0VGltZSkge1xuICAgICAgICBtZS5pc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICBtZS5fdHJhbnNsYXRlKGRlc3RYLCBkZXN0WSwgZGVzdFNjYWxlKTtcblxuICAgICAgICBtZS50cmlnZ2VyKCdzY3JvbGwnLCB7XG4gICAgICAgICAgeDogbWUueCxcbiAgICAgICAgICB5OiBtZS55XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghbWUucHVsbGluZyAmJiAhbWUucmVzZXRQb3NpdGlvbihtZS5vcHRpb25zLmJvdW5jZVRpbWUpKSB7XG4gICAgICAgICAgbWUudHJpZ2dlcignc2Nyb2xsRW5kJywge1xuICAgICAgICAgICAgeDogbWUueCxcbiAgICAgICAgICAgIHk6IG1lLnlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub3cgPSAobm93IC0gc3RhcnRUaW1lKSAvIGR1cmF0aW9uO1xuICAgICAgdmFyIGVhc2luZyA9IGVhc2luZ0ZuKG5vdyk7XG4gICAgICB2YXIgbmV3WCA9IChkZXN0WCAtIHN0YXJ0WCkgKiBlYXNpbmcgKyBzdGFydFg7XG4gICAgICB2YXIgbmV3WSA9IChkZXN0WSAtIHN0YXJ0WSkgKiBlYXNpbmcgKyBzdGFydFk7XG4gICAgICB2YXIgbmV3U2NhbGUgPSAoZGVzdFNjYWxlIC0gc3RhcnRTY2FsZSkgKiBlYXNpbmcgKyBzdGFydFNjYWxlO1xuXG4gICAgICBtZS5fdHJhbnNsYXRlKG5ld1gsIG5ld1ksIG5ld1NjYWxlKTtcblxuICAgICAgaWYgKG1lLmlzQW5pbWF0aW5nKSB7XG4gICAgICAgIG1lLmFuaW1hdGVUaW1lciA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lLm9wdGlvbnMucHJvYmVUeXBlID09PSBQUk9CRV9SRUFMVElNRSkge1xuICAgICAgICBtZS50cmlnZ2VyKCdzY3JvbGwnLCB7XG4gICAgICAgICAgeDogbWUueCxcbiAgICAgICAgICB5OiBtZS55XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaXNBbmltYXRpbmcgPSB0cnVlO1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZVRpbWVyKTtcbiAgICBzdGVwKCk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuc2Nyb2xsQnkgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgIHZhciBlYXNpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGVhc2UuYm91bmNlO1xuXG4gICAgeCA9IHRoaXMueCArIHg7XG4gICAgeSA9IHRoaXMueSArIHk7XG5cbiAgICB0aGlzLnNjcm9sbFRvKHgsIHksIHRpbWUsIGVhc2luZyk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuc2Nyb2xsVG8gPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgIHZhciBlYXNpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGVhc2UuYm91bmNlO1xuXG4gICAgdGhpcy5pc0luVHJhbnNpdGlvbiA9IHRoaXMub3B0aW9ucy51c2VUcmFuc2l0aW9uICYmIHRpbWUgPiAwICYmICh4ICE9PSB0aGlzLnggfHwgeSAhPT0gdGhpcy55KTtcblxuICAgIGlmICghdGltZSB8fCB0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbikge1xuICAgICAgdGhpcy5fdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uKGVhc2luZy5zdHlsZSk7XG4gICAgICB0aGlzLl90cmFuc2l0aW9uVGltZSh0aW1lKTtcbiAgICAgIHRoaXMuX3RyYW5zbGF0ZSh4LCB5KTtcblxuICAgICAgaWYgKHRpbWUgJiYgdGhpcy5vcHRpb25zLnByb2JlVHlwZSA9PT0gUFJPQkVfUkVBTFRJTUUpIHtcbiAgICAgICAgdGhpcy5fc3RhcnRQcm9iZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRpbWUgJiYgKHggIT09IHRoaXMueCB8fCB5ICE9PSB0aGlzLnkpKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignc2Nyb2xsJywge1xuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgeTogeVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBpZiAoIXRoaXMucmVzZXRQb3NpdGlvbih0aGlzLm9wdGlvbnMuYm91bmNlVGltZSwgZWFzZS5ib3VuY2UpKSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdzY3JvbGxFbmQnLCB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMud2hlZWwpIHtcbiAgICAgICAgaWYgKHkgPiB0aGlzLm1pblNjcm9sbFkpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHkgPCB0aGlzLm1heFNjcm9sbFkpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gTWF0aC5yb3VuZChNYXRoLmFicyh5IC8gdGhpcy5pdGVtSGVpZ2h0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fYW5pbWF0ZSh4LCB5LCB0aW1lLCBlYXNpbmcuZm4pO1xuICAgIH1cbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5zY3JvbGxUb0VsZW1lbnQgPSBmdW5jdGlvbiAoZWwsIHRpbWUsIG9mZnNldFgsIG9mZnNldFksIGVhc2luZykge1xuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWwgPSBlbC5ub2RlVHlwZSA/IGVsIDogdGhpcy5zY3JvbGxlci5xdWVyeVNlbGVjdG9yKGVsKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMud2hlZWwgJiYgIWVsLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLm9wdGlvbnMud2hlZWwud2hlZWxJdGVtQ2xhc3MpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBvcyA9IG9mZnNldChlbCk7XG4gICAgcG9zLmxlZnQgLT0gdGhpcy53cmFwcGVyT2Zmc2V0LmxlZnQ7XG4gICAgcG9zLnRvcCAtPSB0aGlzLndyYXBwZXJPZmZzZXQudG9wO1xuXG4gICAgLy8gaWYgb2Zmc2V0WC9ZIGFyZSB0cnVlIHdlIGNlbnRlciB0aGUgZWxlbWVudCB0byB0aGUgc2NyZWVuXG4gICAgaWYgKG9mZnNldFggPT09IHRydWUpIHtcbiAgICAgIG9mZnNldFggPSBNYXRoLnJvdW5kKGVsLm9mZnNldFdpZHRoIC8gMiAtIHRoaXMud3JhcHBlci5vZmZzZXRXaWR0aCAvIDIpO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0WSA9PT0gdHJ1ZSkge1xuICAgICAgb2Zmc2V0WSA9IE1hdGgucm91bmQoZWwub2Zmc2V0SGVpZ2h0IC8gMiAtIHRoaXMud3JhcHBlci5vZmZzZXRIZWlnaHQgLyAyKTtcbiAgICB9XG5cbiAgICBwb3MubGVmdCAtPSBvZmZzZXRYIHx8IDA7XG4gICAgcG9zLnRvcCAtPSBvZmZzZXRZIHx8IDA7XG4gICAgcG9zLmxlZnQgPSBwb3MubGVmdCA+IHRoaXMubWluU2Nyb2xsWCA/IHRoaXMubWluU2Nyb2xsWCA6IHBvcy5sZWZ0IDwgdGhpcy5tYXhTY3JvbGxYID8gdGhpcy5tYXhTY3JvbGxYIDogcG9zLmxlZnQ7XG4gICAgcG9zLnRvcCA9IHBvcy50b3AgPiB0aGlzLm1pblNjcm9sbFkgPyB0aGlzLm1pblNjcm9sbFkgOiBwb3MudG9wIDwgdGhpcy5tYXhTY3JvbGxZID8gdGhpcy5tYXhTY3JvbGxZIDogcG9zLnRvcDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMud2hlZWwpIHtcbiAgICAgIHBvcy50b3AgPSBNYXRoLnJvdW5kKHBvcy50b3AgLyB0aGlzLml0ZW1IZWlnaHQpICogdGhpcy5pdGVtSGVpZ2h0O1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsVG8ocG9zLmxlZnQsIHBvcy50b3AsIHRpbWUsIGVhc2luZyk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUucmVzZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGltZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgICB2YXIgZWFzZWluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZWFzZS5ib3VuY2U7XG5cbiAgICB2YXIgeCA9IHRoaXMueDtcbiAgICB2YXIgcm91bmRYID0gTWF0aC5yb3VuZCh4KTtcbiAgICBpZiAoIXRoaXMuaGFzSG9yaXpvbnRhbFNjcm9sbCB8fCByb3VuZFggPiB0aGlzLm1pblNjcm9sbFgpIHtcbiAgICAgIHggPSB0aGlzLm1pblNjcm9sbFg7XG4gICAgfSBlbHNlIGlmIChyb3VuZFggPCB0aGlzLm1heFNjcm9sbFgpIHtcbiAgICAgIHggPSB0aGlzLm1heFNjcm9sbFg7XG4gICAgfVxuXG4gICAgdmFyIHkgPSB0aGlzLnk7XG4gICAgdmFyIHJvdW5kWSA9IE1hdGgucm91bmQoeSk7XG4gICAgaWYgKCF0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsIHx8IHJvdW5kWSA+IHRoaXMubWluU2Nyb2xsWSkge1xuICAgICAgeSA9IHRoaXMubWluU2Nyb2xsWTtcbiAgICB9IGVsc2UgaWYgKHJvdW5kWSA8IHRoaXMubWF4U2Nyb2xsWSkge1xuICAgICAgeSA9IHRoaXMubWF4U2Nyb2xsWTtcbiAgICB9XG5cbiAgICBpZiAoeCA9PT0gdGhpcy54ICYmIHkgPT09IHRoaXMueSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsVG8oeCwgeSwgdGltZSwgZWFzZWluZyk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5nZXRDb21wdXRlZFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXRyaXggPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnNjcm9sbGVyLCBudWxsKTtcbiAgICB2YXIgeCA9IHZvaWQgMDtcbiAgICB2YXIgeSA9IHZvaWQgMDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMudXNlVHJhbnNmb3JtKSB7XG4gICAgICBtYXRyaXggPSBtYXRyaXhbc3R5bGUudHJhbnNmb3JtXS5zcGxpdCgnKScpWzBdLnNwbGl0KCcsICcpO1xuICAgICAgeCA9ICsobWF0cml4WzEyXSB8fCBtYXRyaXhbNF0pO1xuICAgICAgeSA9ICsobWF0cml4WzEzXSB8fCBtYXRyaXhbNV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gK21hdHJpeC5sZWZ0LnJlcGxhY2UoL1teLVxcZC5dL2csICcnKTtcbiAgICAgIHkgPSArbWF0cml4LnRvcC5yZXBsYWNlKC9bXi1cXGQuXS9nLCAnJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbiAmJiB0aGlzLmlzSW5UcmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLmlzSW5UcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnByb2JlVGltZXIpO1xuICAgICAgdmFyIHBvcyA9IHRoaXMuZ2V0Q29tcHV0ZWRQb3NpdGlvbigpO1xuICAgICAgdGhpcy5fdHJhbnNsYXRlKHBvcy54LCBwb3MueSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLndoZWVsKSB7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGhpcy5pdGVtc1tNYXRoLnJvdW5kKC1wb3MueSAvIHRoaXMuaXRlbUhlaWdodCldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdzY3JvbGxFbmQnLCB7XG4gICAgICAgICAgeDogdGhpcy54LFxuICAgICAgICAgIHk6IHRoaXMueVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RvcEZyb21UcmFuc2l0aW9uID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbiAmJiB0aGlzLmlzQW5pbWF0aW5nKSB7XG4gICAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGVUaW1lcik7XG4gICAgICB0aGlzLnRyaWdnZXIoJ3Njcm9sbEVuZCcsIHtcbiAgICAgICAgeDogdGhpcy54LFxuICAgICAgICB5OiB0aGlzLnlcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdG9wRnJvbVRyYW5zaXRpb24gPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB0aGlzLnRyaWdnZXIoJ2Rlc3Ryb3knKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnVzZVRyYW5zaXRpb24pIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMucHJvYmVUaW1lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZVRpbWVyKTtcbiAgICB9XG4gICAgdGhpcy5fcmVtb3ZlRE9NRXZlbnRzKCk7XG4gICAgLy8gcmVtb3ZlIGN1c3RvbSBldmVudHNcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc25hcE1peGluKEJTY3JvbGwpIHtcbiAgQlNjcm9sbC5wcm90b3R5cGUuX2luaXRTbmFwID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmN1cnJlbnRQYWdlID0ge307XG4gICAgdmFyIHNuYXAgPSB0aGlzLm9wdGlvbnMuc25hcDtcblxuICAgIGlmIChzbmFwLmxvb3ApIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuc2Nyb2xsZXIuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICBwcmVwZW5kKGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLmNsb25lTm9kZSh0cnVlKSwgdGhpcy5zY3JvbGxlcik7XG4gICAgICAgIHRoaXMuc2Nyb2xsZXIuYXBwZW5kQ2hpbGQoY2hpbGRyZW5bMV0uY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExvb3AgZG9lcyBub3QgbWFrZSBhbnkgc2Vuc2UgaWYgdGhlcmUgaXMgb25seSBvbmUgY2hpbGQuXG4gICAgICAgIHNuYXAubG9vcCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlbCA9IHNuYXAuZWw7XG4gICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gdGhpcy5zY3JvbGxlci5xdWVyeVNlbGVjdG9yQWxsKGVsKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uKCdyZWZyZXNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucGFnZXMgPSBbXTtcblxuICAgICAgaWYgKCFfdGhpcy53cmFwcGVyV2lkdGggfHwgIV90aGlzLndyYXBwZXJIZWlnaHQgfHwgIV90aGlzLnNjcm9sbGVyV2lkdGggfHwgIV90aGlzLnNjcm9sbGVySGVpZ2h0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0ZXBYID0gc25hcC5zdGVwWCB8fCBfdGhpcy53cmFwcGVyV2lkdGg7XG4gICAgICB2YXIgc3RlcFkgPSBzbmFwLnN0ZXBZIHx8IF90aGlzLndyYXBwZXJIZWlnaHQ7XG5cbiAgICAgIHZhciB4ID0gMDtcbiAgICAgIHZhciB5ID0gdm9pZCAwO1xuICAgICAgdmFyIGN4ID0gdm9pZCAwO1xuICAgICAgdmFyIGN5ID0gdm9pZCAwO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGwgPSB2b2lkIDA7XG4gICAgICB2YXIgbSA9IDA7XG4gICAgICB2YXIgbiA9IHZvaWQgMDtcbiAgICAgIHZhciByZWN0ID0gdm9pZCAwO1xuICAgICAgaWYgKCFlbCkge1xuICAgICAgICBjeCA9IE1hdGgucm91bmQoc3RlcFggLyAyKTtcbiAgICAgICAgY3kgPSBNYXRoLnJvdW5kKHN0ZXBZIC8gMik7XG5cbiAgICAgICAgd2hpbGUgKHggPiAtX3RoaXMuc2Nyb2xsZXJXaWR0aCkge1xuICAgICAgICAgIF90aGlzLnBhZ2VzW2ldID0gW107XG4gICAgICAgICAgbCA9IDA7XG4gICAgICAgICAgeSA9IDA7XG5cbiAgICAgICAgICB3aGlsZSAoeSA+IC1fdGhpcy5zY3JvbGxlckhlaWdodCkge1xuICAgICAgICAgICAgX3RoaXMucGFnZXNbaV1bbF0gPSB7XG4gICAgICAgICAgICAgIHg6IE1hdGgubWF4KHgsIF90aGlzLm1heFNjcm9sbFgpLFxuICAgICAgICAgICAgICB5OiBNYXRoLm1heCh5LCBfdGhpcy5tYXhTY3JvbGxZKSxcbiAgICAgICAgICAgICAgd2lkdGg6IHN0ZXBYLFxuICAgICAgICAgICAgICBoZWlnaHQ6IHN0ZXBZLFxuICAgICAgICAgICAgICBjeDogeCAtIGN4LFxuICAgICAgICAgICAgICBjeTogeSAtIGN5XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB5IC09IHN0ZXBZO1xuICAgICAgICAgICAgbCsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHggLT0gc3RlcFg7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsID0gZWwubGVuZ3RoO1xuICAgICAgICBuID0gLTE7XG5cbiAgICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICByZWN0ID0gZ2V0UmVjdChlbFtpXSk7XG4gICAgICAgICAgaWYgKGkgPT09IDAgfHwgcmVjdC5sZWZ0IDw9IGdldFJlY3QoZWxbaSAtIDFdKS5sZWZ0KSB7XG4gICAgICAgICAgICBtID0gMDtcbiAgICAgICAgICAgIG4rKztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIV90aGlzLnBhZ2VzW21dKSB7XG4gICAgICAgICAgICBfdGhpcy5wYWdlc1ttXSA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHggPSBNYXRoLm1heCgtcmVjdC5sZWZ0LCBfdGhpcy5tYXhTY3JvbGxYKTtcbiAgICAgICAgICB5ID0gTWF0aC5tYXgoLXJlY3QudG9wLCBfdGhpcy5tYXhTY3JvbGxZKTtcbiAgICAgICAgICBjeCA9IHggLSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgICAgICBjeSA9IHkgLSBNYXRoLnJvdW5kKHJlY3QuaGVpZ2h0IC8gMik7XG5cbiAgICAgICAgICBfdGhpcy5wYWdlc1ttXVtuXSA9IHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgICAgICAgICAgY3g6IGN4LFxuICAgICAgICAgICAgY3k6IGN5XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmICh4ID4gX3RoaXMubWF4U2Nyb2xsWCkge1xuICAgICAgICAgICAgbSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpcy5fY2hlY2tTbmFwTG9vcCgpO1xuXG4gICAgICB2YXIgaW5pdFBhZ2VYID0gc25hcC5fbG9vcFggPyAxIDogMDtcbiAgICAgIHZhciBpbml0UGFnZVkgPSBzbmFwLl9sb29wWSA/IDEgOiAwO1xuICAgICAgX3RoaXMuX2dvVG9QYWdlKF90aGlzLmN1cnJlbnRQYWdlLnBhZ2VYIHx8IGluaXRQYWdlWCwgX3RoaXMuY3VycmVudFBhZ2UucGFnZVkgfHwgaW5pdFBhZ2VZLCAwKTtcblxuICAgICAgLy8gVXBkYXRlIHNuYXAgdGhyZXNob2xkIGlmIG5lZWRlZC5cbiAgICAgIHZhciBzbmFwVGhyZXNob2xkID0gc25hcC50aHJlc2hvbGQ7XG4gICAgICBpZiAoc25hcFRocmVzaG9sZCAlIDEgPT09IDApIHtcbiAgICAgICAgX3RoaXMuc25hcFRocmVzaG9sZFggPSBzbmFwVGhyZXNob2xkO1xuICAgICAgICBfdGhpcy5zbmFwVGhyZXNob2xkWSA9IHNuYXBUaHJlc2hvbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zbmFwVGhyZXNob2xkWCA9IE1hdGgucm91bmQoX3RoaXMucGFnZXNbX3RoaXMuY3VycmVudFBhZ2UucGFnZVhdW190aGlzLmN1cnJlbnRQYWdlLnBhZ2VZXS53aWR0aCAqIHNuYXBUaHJlc2hvbGQpO1xuICAgICAgICBfdGhpcy5zbmFwVGhyZXNob2xkWSA9IE1hdGgucm91bmQoX3RoaXMucGFnZXNbX3RoaXMuY3VycmVudFBhZ2UucGFnZVhdW190aGlzLmN1cnJlbnRQYWdlLnBhZ2VZXS5oZWlnaHQgKiBzbmFwVGhyZXNob2xkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub24oJ3Njcm9sbEVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzbmFwLmxvb3ApIHtcbiAgICAgICAgaWYgKHNuYXAuX2xvb3BYKSB7XG4gICAgICAgICAgaWYgKF90aGlzLmN1cnJlbnRQYWdlLnBhZ2VYID09PSAwKSB7XG4gICAgICAgICAgICBfdGhpcy5fZ29Ub1BhZ2UoX3RoaXMucGFnZXMubGVuZ3RoIC0gMiwgX3RoaXMuY3VycmVudFBhZ2UucGFnZVksIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudFBhZ2UucGFnZVggPT09IF90aGlzLnBhZ2VzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIF90aGlzLl9nb1RvUGFnZSgxLCBfdGhpcy5jdXJyZW50UGFnZS5wYWdlWSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChfdGhpcy5jdXJyZW50UGFnZS5wYWdlWSA9PT0gMCkge1xuICAgICAgICAgICAgX3RoaXMuX2dvVG9QYWdlKF90aGlzLmN1cnJlbnRQYWdlLnBhZ2VYLCBfdGhpcy5wYWdlc1swXS5sZW5ndGggLSAyLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzLmN1cnJlbnRQYWdlLnBhZ2VZID09PSBfdGhpcy5wYWdlc1swXS5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBfdGhpcy5fZ29Ub1BhZ2UoX3RoaXMuY3VycmVudFBhZ2UucGFnZVgsIDEsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHNuYXAubGlzdGVuRmxpY2sgIT09IGZhbHNlKSB7XG4gICAgICB0aGlzLm9uKCdmbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBzbmFwLnNwZWVkIHx8IE1hdGgubWF4KE1hdGgubWF4KE1hdGgubWluKE1hdGguYWJzKF90aGlzLnggLSBfdGhpcy5zdGFydFgpLCAxMDAwKSwgTWF0aC5taW4oTWF0aC5hYnMoX3RoaXMueSAtIF90aGlzLnN0YXJ0WSksIDEwMDApKSwgMzAwKTtcblxuICAgICAgICBfdGhpcy5fZ29Ub1BhZ2UoX3RoaXMuY3VycmVudFBhZ2UucGFnZVggKyBfdGhpcy5kaXJlY3Rpb25YLCBfdGhpcy5jdXJyZW50UGFnZS5wYWdlWSArIF90aGlzLmRpcmVjdGlvblksIHRpbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5vbignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzbmFwLmxvb3ApIHtcbiAgICAgICAgdmFyIF9jaGlsZHJlbiA9IF90aGlzLnNjcm9sbGVyLmNoaWxkcmVuO1xuICAgICAgICBpZiAoX2NoaWxkcmVuLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICByZW1vdmVDaGlsZChfdGhpcy5zY3JvbGxlciwgX2NoaWxkcmVuW19jaGlsZHJlbi5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgcmVtb3ZlQ2hpbGQoX3RoaXMuc2Nyb2xsZXIsIF9jaGlsZHJlblswXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fY2hlY2tTbmFwTG9vcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc25hcCA9IHRoaXMub3B0aW9ucy5zbmFwO1xuXG4gICAgaWYgKCFzbmFwLmxvb3AgfHwgIXRoaXMucGFnZXMgfHwgIXRoaXMucGFnZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFnZXMubGVuZ3RoID4gMSkge1xuICAgICAgc25hcC5fbG9vcFggPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodGhpcy5wYWdlc1swXSAmJiB0aGlzLnBhZ2VzWzBdLmxlbmd0aCA+IDEpIHtcbiAgICAgIHNuYXAuX2xvb3BZID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHNuYXAuX2xvb3BYICYmIHNuYXAuX2xvb3BZKSB7XG4gICAgICB3YXJuKCdMb29wIGRvZXMgbm90IHN1cHBvcnQgdHdvIGRpcmVjdGlvbiBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fbmVhcmVzdFNuYXAgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGlmICghdGhpcy5wYWdlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7IHg6IDAsIHk6IDAsIHBhZ2VYOiAwLCBwYWdlWTogMCB9O1xuICAgIH1cblxuICAgIHZhciBpID0gMDtcbiAgICAvLyBDaGVjayBpZiB3ZSBleGNlZWRlZCB0aGUgc25hcCB0aHJlc2hvbGRcbiAgICBpZiAoTWF0aC5hYnMoeCAtIHRoaXMuYWJzU3RhcnRYKSA8PSB0aGlzLnNuYXBUaHJlc2hvbGRYICYmIE1hdGguYWJzKHkgLSB0aGlzLmFic1N0YXJ0WSkgPD0gdGhpcy5zbmFwVGhyZXNob2xkWSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFBhZ2U7XG4gICAgfVxuXG4gICAgaWYgKHggPiB0aGlzLm1pblNjcm9sbFgpIHtcbiAgICAgIHggPSB0aGlzLm1pblNjcm9sbFg7XG4gICAgfSBlbHNlIGlmICh4IDwgdGhpcy5tYXhTY3JvbGxYKSB7XG4gICAgICB4ID0gdGhpcy5tYXhTY3JvbGxYO1xuICAgIH1cblxuICAgIGlmICh5ID4gdGhpcy5taW5TY3JvbGxZKSB7XG4gICAgICB5ID0gdGhpcy5taW5TY3JvbGxZO1xuICAgIH0gZWxzZSBpZiAoeSA8IHRoaXMubWF4U2Nyb2xsWSkge1xuICAgICAgeSA9IHRoaXMubWF4U2Nyb2xsWTtcbiAgICB9XG5cbiAgICB2YXIgbCA9IHRoaXMucGFnZXMubGVuZ3RoO1xuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoeCA+PSB0aGlzLnBhZ2VzW2ldWzBdLmN4KSB7XG4gICAgICAgIHggPSB0aGlzLnBhZ2VzW2ldWzBdLng7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGwgPSB0aGlzLnBhZ2VzW2ldLmxlbmd0aDtcblxuICAgIHZhciBtID0gMDtcbiAgICBmb3IgKDsgbSA8IGw7IG0rKykge1xuICAgICAgaWYgKHkgPj0gdGhpcy5wYWdlc1swXVttXS5jeSkge1xuICAgICAgICB5ID0gdGhpcy5wYWdlc1swXVttXS55O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSA9PT0gdGhpcy5jdXJyZW50UGFnZS5wYWdlWCkge1xuICAgICAgaSArPSB0aGlzLmRpcmVjdGlvblg7XG5cbiAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICBpID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoaSA+PSB0aGlzLnBhZ2VzLmxlbmd0aCkge1xuICAgICAgICBpID0gdGhpcy5wYWdlcy5sZW5ndGggLSAxO1xuICAgICAgfVxuXG4gICAgICB4ID0gdGhpcy5wYWdlc1tpXVswXS54O1xuICAgIH1cblxuICAgIGlmIChtID09PSB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VZKSB7XG4gICAgICBtICs9IHRoaXMuZGlyZWN0aW9uWTtcblxuICAgICAgaWYgKG0gPCAwKSB7XG4gICAgICAgIG0gPSAwO1xuICAgICAgfSBlbHNlIGlmIChtID49IHRoaXMucGFnZXNbMF0ubGVuZ3RoKSB7XG4gICAgICAgIG0gPSB0aGlzLnBhZ2VzWzBdLmxlbmd0aCAtIDE7XG4gICAgICB9XG5cbiAgICAgIHkgPSB0aGlzLnBhZ2VzWzBdW21dLnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5LFxuICAgICAgcGFnZVg6IGksXG4gICAgICBwYWdlWTogbVxuICAgIH07XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX2dvVG9QYWdlID0gZnVuY3Rpb24gKHgpIHtcbiAgICB2YXIgeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICB2YXIgdGltZSA9IGFyZ3VtZW50c1syXTtcbiAgICB2YXIgZWFzaW5nID0gYXJndW1lbnRzWzNdO1xuXG4gICAgdmFyIHNuYXAgPSB0aGlzLm9wdGlvbnMuc25hcDtcblxuICAgIGlmICghc25hcCB8fCAhdGhpcy5wYWdlcyB8fCAhdGhpcy5wYWdlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlYXNpbmcgPSBlYXNpbmcgfHwgc25hcC5lYXNpbmcgfHwgZWFzZS5ib3VuY2U7XG5cbiAgICBpZiAoeCA+PSB0aGlzLnBhZ2VzLmxlbmd0aCkge1xuICAgICAgeCA9IHRoaXMucGFnZXMubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2UgaWYgKHggPCAwKSB7XG4gICAgICB4ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucGFnZXNbeF0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoeSA+PSB0aGlzLnBhZ2VzW3hdLmxlbmd0aCkge1xuICAgICAgeSA9IHRoaXMucGFnZXNbeF0ubGVuZ3RoIC0gMTtcbiAgICB9IGVsc2UgaWYgKHkgPCAwKSB7XG4gICAgICB5ID0gMDtcbiAgICB9XG5cbiAgICB2YXIgcG9zWCA9IHRoaXMucGFnZXNbeF1beV0ueDtcbiAgICB2YXIgcG9zWSA9IHRoaXMucGFnZXNbeF1beV0ueTtcblxuICAgIHRpbWUgPSB0aW1lID09PSB1bmRlZmluZWQgPyBzbmFwLnNwZWVkIHx8IE1hdGgubWF4KE1hdGgubWF4KE1hdGgubWluKE1hdGguYWJzKHBvc1ggLSB0aGlzLngpLCAxMDAwKSwgTWF0aC5taW4oTWF0aC5hYnMocG9zWSAtIHRoaXMueSksIDEwMDApKSwgMzAwKSA6IHRpbWU7XG5cbiAgICB0aGlzLmN1cnJlbnRQYWdlID0ge1xuICAgICAgeDogcG9zWCxcbiAgICAgIHk6IHBvc1ksXG4gICAgICBwYWdlWDogeCxcbiAgICAgIHBhZ2VZOiB5XG4gICAgfTtcbiAgICB0aGlzLnNjcm9sbFRvKHBvc1gsIHBvc1ksIHRpbWUsIGVhc2luZyk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuZ29Ub1BhZ2UgPSBmdW5jdGlvbiAoeCwgeSwgdGltZSwgZWFzaW5nKSB7XG4gICAgdmFyIHNuYXAgPSB0aGlzLm9wdGlvbnMuc25hcDtcbiAgICBpZiAoIXNuYXAgfHwgIXRoaXMucGFnZXMgfHwgIXRoaXMucGFnZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHNuYXAubG9vcCkge1xuICAgICAgdmFyIGxlbiA9IHZvaWQgMDtcbiAgICAgIGlmIChzbmFwLl9sb29wWCkge1xuICAgICAgICBsZW4gPSB0aGlzLnBhZ2VzLmxlbmd0aCAtIDI7XG4gICAgICAgIGlmICh4ID49IGxlbikge1xuICAgICAgICAgIHggPSBsZW4gLSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHggPCAwKSB7XG4gICAgICAgICAgeCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgeCArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gdGhpcy5wYWdlc1swXS5sZW5ndGggLSAyO1xuICAgICAgICBpZiAoeSA+PSBsZW4pIHtcbiAgICAgICAgICB5ID0gbGVuIC0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh5IDwgMCkge1xuICAgICAgICAgIHkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHkgKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fZ29Ub1BhZ2UoeCwgeSwgdGltZSwgZWFzaW5nKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHRpbWUsIGVhc2luZykge1xuICAgIHZhciBzbmFwID0gdGhpcy5vcHRpb25zLnNuYXA7XG4gICAgaWYgKCFzbmFwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHggPSB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VYO1xuICAgIHZhciB5ID0gdGhpcy5jdXJyZW50UGFnZS5wYWdlWTtcblxuICAgIHgrKztcbiAgICBpZiAoeCA+PSB0aGlzLnBhZ2VzLmxlbmd0aCAmJiB0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsKSB7XG4gICAgICB4ID0gMDtcbiAgICAgIHkrKztcbiAgICB9XG5cbiAgICB0aGlzLl9nb1RvUGFnZSh4LCB5LCB0aW1lLCBlYXNpbmcpO1xuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAodGltZSwgZWFzaW5nKSB7XG4gICAgdmFyIHNuYXAgPSB0aGlzLm9wdGlvbnMuc25hcDtcbiAgICBpZiAoIXNuYXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgeCA9IHRoaXMuY3VycmVudFBhZ2UucGFnZVg7XG4gICAgdmFyIHkgPSB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VZO1xuXG4gICAgeC0tO1xuICAgIGlmICh4IDwgMCAmJiB0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsKSB7XG4gICAgICB4ID0gMDtcbiAgICAgIHktLTtcbiAgICB9XG5cbiAgICB0aGlzLl9nb1RvUGFnZSh4LCB5LCB0aW1lLCBlYXNpbmcpO1xuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLmdldEN1cnJlbnRQYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzbmFwID0gdGhpcy5vcHRpb25zLnNuYXA7XG4gICAgaWYgKCFzbmFwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoc25hcC5sb29wKSB7XG4gICAgICB2YXIgY3VycmVudFBhZ2UgPSB2b2lkIDA7XG4gICAgICBpZiAoc25hcC5fbG9vcFgpIHtcbiAgICAgICAgY3VycmVudFBhZ2UgPSBleHRlbmQoe30sIHRoaXMuY3VycmVudFBhZ2UsIHtcbiAgICAgICAgICBwYWdlWDogdGhpcy5jdXJyZW50UGFnZS5wYWdlWCAtIDFcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50UGFnZSA9IGV4dGVuZCh7fSwgdGhpcy5jdXJyZW50UGFnZSwge1xuICAgICAgICAgIHBhZ2VZOiB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VZIC0gMVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50UGFnZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFBhZ2U7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHdoZWVsTWl4aW4oQlNjcm9sbCkge1xuICBCU2Nyb2xsLnByb3RvdHlwZS53aGVlbFRvID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMud2hlZWwpIHtcbiAgICAgIHRoaXMueSA9IC1pbmRleCAqIHRoaXMuaXRlbUhlaWdodDtcbiAgICAgIHRoaXMuc2Nyb2xsVG8oMCwgdGhpcy55KTtcbiAgICB9XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuZ2V0U2VsZWN0ZWRJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLndoZWVsICYmIHRoaXMuc2VsZWN0ZWRJbmRleDtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5faW5pdFdoZWVsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3aGVlbCA9IHRoaXMub3B0aW9ucy53aGVlbDtcbiAgICBpZiAoIXdoZWVsLndoZWVsV3JhcHBlckNsYXNzKSB7XG4gICAgICB3aGVlbC53aGVlbFdyYXBwZXJDbGFzcyA9ICd3aGVlbC1zY3JvbGwnO1xuICAgIH1cbiAgICBpZiAoIXdoZWVsLndoZWVsSXRlbUNsYXNzKSB7XG4gICAgICB3aGVlbC53aGVlbEl0ZW1DbGFzcyA9ICd3aGVlbC1pdGVtJztcbiAgICB9XG4gICAgaWYgKHdoZWVsLnNlbGVjdGVkSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgd2hlZWwuc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICB3YXJuKCd3aGVlbCBvcHRpb24gc2VsZWN0ZWRJbmRleCBpcyByZXF1aXJlZCEnKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBJTkRJQ0FUT1JfTUlOX0xFTiA9IDg7XG5cbmZ1bmN0aW9uIHNjcm9sbGJhck1peGluKEJTY3JvbGwpIHtcbiAgQlNjcm9sbC5wcm90b3R5cGUuX2luaXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfb3B0aW9ucyRzY3JvbGxiYXIgPSB0aGlzLm9wdGlvbnMuc2Nyb2xsYmFyLFxuICAgICAgICBfb3B0aW9ucyRzY3JvbGxiYXIkZmEgPSBfb3B0aW9ucyRzY3JvbGxiYXIuZmFkZSxcbiAgICAgICAgZmFkZSA9IF9vcHRpb25zJHNjcm9sbGJhciRmYSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IF9vcHRpb25zJHNjcm9sbGJhciRmYSxcbiAgICAgICAgX29wdGlvbnMkc2Nyb2xsYmFyJGluID0gX29wdGlvbnMkc2Nyb2xsYmFyLmludGVyYWN0aXZlLFxuICAgICAgICBpbnRlcmFjdGl2ZSA9IF9vcHRpb25zJHNjcm9sbGJhciRpbiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzY3JvbGxiYXIkaW47XG5cbiAgICB0aGlzLmluZGljYXRvcnMgPSBbXTtcbiAgICB2YXIgaW5kaWNhdG9yID0gdm9pZCAwO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zY3JvbGxYKSB7XG4gICAgICBpbmRpY2F0b3IgPSB7XG4gICAgICAgIGVsOiBjcmVhdGVTY3JvbGxiYXIoJ2hvcml6b250YWwnKSxcbiAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIGZhZGU6IGZhZGUsXG4gICAgICAgIGludGVyYWN0aXZlOiBpbnRlcmFjdGl2ZVxuICAgICAgfTtcbiAgICAgIHRoaXMuX2luc2VydFNjcm9sbEJhcihpbmRpY2F0b3IuZWwpO1xuXG4gICAgICB0aGlzLmluZGljYXRvcnMucHVzaChuZXcgSW5kaWNhdG9yKHRoaXMsIGluZGljYXRvcikpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuc2Nyb2xsWSkge1xuICAgICAgaW5kaWNhdG9yID0ge1xuICAgICAgICBlbDogY3JlYXRlU2Nyb2xsYmFyKCd2ZXJ0aWNhbCcpLFxuICAgICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXG4gICAgICAgIGZhZGU6IGZhZGUsXG4gICAgICAgIGludGVyYWN0aXZlOiBpbnRlcmFjdGl2ZVxuICAgICAgfTtcbiAgICAgIHRoaXMuX2luc2VydFNjcm9sbEJhcihpbmRpY2F0b3IuZWwpO1xuICAgICAgdGhpcy5pbmRpY2F0b3JzLnB1c2gobmV3IEluZGljYXRvcih0aGlzLCBpbmRpY2F0b3IpKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uKCdyZWZyZXNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5pbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF90aGlzLmluZGljYXRvcnNbaV0ucmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGZhZGUpIHtcbiAgICAgIHRoaXMub24oJ3Njcm9sbEVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfdGhpcy5pbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgX3RoaXMuaW5kaWNhdG9yc1tpXS5mYWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLm9uKCdzY3JvbGxDYW5jZWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXMuaW5kaWNhdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIF90aGlzLmluZGljYXRvcnNbaV0uZmFkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5vbignc2Nyb2xsU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXMuaW5kaWNhdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIF90aGlzLmluZGljYXRvcnNbaV0uZmFkZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMub24oJ2JlZm9yZVNjcm9sbFN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzLmluZGljYXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBfdGhpcy5pbmRpY2F0b3JzW2ldLmZhZGUodHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5fcmVtb3ZlU2Nyb2xsQmFycygpO1xuICAgIH0pO1xuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLl9pbnNlcnRTY3JvbGxCYXIgPSBmdW5jdGlvbiAoc2Nyb2xsYmFyKSB7XG4gICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKHNjcm9sbGJhcik7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX3JlbW92ZVNjcm9sbEJhcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmluZGljYXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuaW5kaWNhdG9yc1tpXS5kZXN0cm95KCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTY3JvbGxiYXIoZGlyZWN0aW9uKSB7XG4gIHZhciBzY3JvbGxiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIGluZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIHNjcm9sbGJhci5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6OTk5OTtwb2ludGVyRXZlbnRzOm5vbmUnO1xuICBpbmRpY2F0b3Iuc3R5bGUuY3NzVGV4dCA9ICdib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuNSk7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDI1NSwyNTUsMjU1LDAuOSk7Ym9yZGVyLXJhZGl1czozcHg7JztcblxuICBpbmRpY2F0b3IuY2xhc3NOYW1lID0gJ2JzY3JvbGwtaW5kaWNhdG9yJztcblxuICBpZiAoZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICBzY3JvbGxiYXIuc3R5bGUuY3NzVGV4dCArPSAnO2hlaWdodDo3cHg7bGVmdDoycHg7cmlnaHQ6MnB4O2JvdHRvbTowJztcbiAgICBpbmRpY2F0b3Iuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgIHNjcm9sbGJhci5jbGFzc05hbWUgPSAnYnNjcm9sbC1ob3Jpem9udGFsLXNjcm9sbGJhcic7XG4gIH0gZWxzZSB7XG4gICAgc2Nyb2xsYmFyLnN0eWxlLmNzc1RleHQgKz0gJzt3aWR0aDo3cHg7Ym90dG9tOjJweDt0b3A6MnB4O3JpZ2h0OjFweCc7XG4gICAgaW5kaWNhdG9yLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgIHNjcm9sbGJhci5jbGFzc05hbWUgPSAnYnNjcm9sbC12ZXJ0aWNhbC1zY3JvbGxiYXInO1xuICB9XG5cbiAgc2Nyb2xsYmFyLnN0eWxlLmNzc1RleHQgKz0gJztvdmVyZmxvdzpoaWRkZW4nO1xuICBzY3JvbGxiYXIuYXBwZW5kQ2hpbGQoaW5kaWNhdG9yKTtcblxuICByZXR1cm4gc2Nyb2xsYmFyO1xufVxuXG5mdW5jdGlvbiBJbmRpY2F0b3Ioc2Nyb2xsZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy53cmFwcGVyID0gb3B0aW9ucy5lbDtcbiAgdGhpcy53cmFwcGVyU3R5bGUgPSB0aGlzLndyYXBwZXIuc3R5bGU7XG4gIHRoaXMuaW5kaWNhdG9yID0gdGhpcy53cmFwcGVyLmNoaWxkcmVuWzBdO1xuICB0aGlzLmluZGljYXRvclN0eWxlID0gdGhpcy5pbmRpY2F0b3Iuc3R5bGU7XG4gIHRoaXMuc2Nyb2xsZXIgPSBzY3JvbGxlcjtcbiAgdGhpcy5kaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbjtcbiAgaWYgKG9wdGlvbnMuZmFkZSkge1xuICAgIHRoaXMudmlzaWJsZSA9IDA7XG4gICAgdGhpcy53cmFwcGVyU3R5bGUub3BhY2l0eSA9ICcwJztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnZpc2libGUgPSAxO1xuICB9XG5cbiAgdGhpcy5zaXplUmF0aW9YID0gMTtcbiAgdGhpcy5zaXplUmF0aW9ZID0gMTtcbiAgdGhpcy5tYXhQb3NYID0gMDtcbiAgdGhpcy5tYXhQb3NZID0gMDtcbiAgdGhpcy54ID0gMDtcbiAgdGhpcy55ID0gMDtcblxuICBpZiAob3B0aW9ucy5pbnRlcmFjdGl2ZSkge1xuICAgIHRoaXMuX2FkZERPTUV2ZW50cygpO1xuICB9XG59XG5cbkluZGljYXRvci5wcm90b3R5cGUuaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiAoZSkge1xuICBzd2l0Y2ggKGUudHlwZSkge1xuICAgIGNhc2UgJ3RvdWNoc3RhcnQnOlxuICAgIGNhc2UgJ21vdXNlZG93bic6XG4gICAgICB0aGlzLl9zdGFydChlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RvdWNobW92ZSc6XG4gICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICAgIHRoaXMuX21vdmUoZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0b3VjaGVuZCc6XG4gICAgY2FzZSAnbW91c2V1cCc6XG4gICAgY2FzZSAndG91Y2hjYW5jZWwnOlxuICAgIGNhc2UgJ21vdXNlY2FuY2VsJzpcbiAgICAgIHRoaXMuX2VuZChlKTtcbiAgICAgIGJyZWFrO1xuICB9XG59O1xuXG5JbmRpY2F0b3IucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9zaG91bGRTaG93KCkpIHtcbiAgICB0aGlzLnRyYW5zaXRpb25UaW1lKCk7XG4gICAgdGhpcy5fY2FsY3VsYXRlKCk7XG4gICAgdGhpcy51cGRhdGVQb3NpdGlvbigpO1xuICB9XG59O1xuXG5JbmRpY2F0b3IucHJvdG90eXBlLmZhZGUgPSBmdW5jdGlvbiAodmlzaWJsZSwgaG9sZCkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBpZiAoaG9sZCAmJiAhdGhpcy52aXNpYmxlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRpbWUgPSB2aXNpYmxlID8gMjUwIDogNTAwO1xuXG4gIHZpc2libGUgPSB2aXNpYmxlID8gJzEnIDogJzAnO1xuXG4gIHRoaXMud3JhcHBlclN0eWxlW3N0eWxlLnRyYW5zaXRpb25EdXJhdGlvbl0gPSB0aW1lICsgJ21zJztcblxuICBjbGVhclRpbWVvdXQodGhpcy5mYWRlVGltZW91dCk7XG4gIHRoaXMuZmFkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIud3JhcHBlclN0eWxlLm9wYWNpdHkgPSB2aXNpYmxlO1xuICAgIF90aGlzMi52aXNpYmxlID0gK3Zpc2libGU7XG4gIH0sIDApO1xufTtcblxuSW5kaWNhdG9yLnByb3RvdHlwZS51cGRhdGVQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgdmFyIHkgPSBNYXRoLnJvdW5kKHRoaXMuc2l6ZVJhdGlvWSAqIHRoaXMuc2Nyb2xsZXIueSk7XG5cbiAgICBpZiAoeSA8IDApIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvblRpbWUoNTAwKTtcbiAgICAgIHZhciBoZWlnaHQgPSBNYXRoLm1heCh0aGlzLmluZGljYXRvckhlaWdodCArIHkgKiAzLCBJTkRJQ0FUT1JfTUlOX0xFTik7XG4gICAgICB0aGlzLmluZGljYXRvclN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgICB5ID0gMDtcbiAgICB9IGVsc2UgaWYgKHkgPiB0aGlzLm1heFBvc1kpIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvblRpbWUoNTAwKTtcbiAgICAgIHZhciBfaGVpZ2h0ID0gTWF0aC5tYXgodGhpcy5pbmRpY2F0b3JIZWlnaHQgLSAoeSAtIHRoaXMubWF4UG9zWSkgKiAzLCBJTkRJQ0FUT1JfTUlOX0xFTik7XG4gICAgICB0aGlzLmluZGljYXRvclN0eWxlLmhlaWdodCA9IF9oZWlnaHQgKyAncHgnO1xuICAgICAgeSA9IHRoaXMubWF4UG9zWSArIHRoaXMuaW5kaWNhdG9ySGVpZ2h0IC0gX2hlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbmRpY2F0b3JTdHlsZS5oZWlnaHQgPSB0aGlzLmluZGljYXRvckhlaWdodCArICdweCc7XG4gICAgfVxuICAgIHRoaXMueSA9IHk7XG5cbiAgICBpZiAodGhpcy5zY3JvbGxlci5vcHRpb25zLnVzZVRyYW5zZm9ybSkge1xuICAgICAgdGhpcy5pbmRpY2F0b3JTdHlsZVtzdHlsZS50cmFuc2Zvcm1dID0gJ3RyYW5zbGF0ZVkoJyArIHkgKyAncHgpJyArIHRoaXMuc2Nyb2xsZXIudHJhbnNsYXRlWjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbmRpY2F0b3JTdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHggPSBNYXRoLnJvdW5kKHRoaXMuc2l6ZVJhdGlvWCAqIHRoaXMuc2Nyb2xsZXIueCk7XG5cbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvblRpbWUoNTAwKTtcbiAgICAgIHZhciB3aWR0aCA9IE1hdGgubWF4KHRoaXMuaW5kaWNhdG9yV2lkdGggKyB4ICogMywgSU5ESUNBVE9SX01JTl9MRU4pO1xuICAgICAgdGhpcy5pbmRpY2F0b3JTdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICAgIHggPSAwO1xuICAgIH0gZWxzZSBpZiAoeCA+IHRoaXMubWF4UG9zWCkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uVGltZSg1MDApO1xuICAgICAgdmFyIF93aWR0aCA9IE1hdGgubWF4KHRoaXMuaW5kaWNhdG9yV2lkdGggLSAoeCAtIHRoaXMubWF4UG9zWCkgKiAzLCBJTkRJQ0FUT1JfTUlOX0xFTik7XG4gICAgICB0aGlzLmluZGljYXRvclN0eWxlLndpZHRoID0gX3dpZHRoICsgJ3B4JztcbiAgICAgIHggPSB0aGlzLm1heFBvc1ggKyB0aGlzLmluZGljYXRvcldpZHRoIC0gX3dpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluZGljYXRvclN0eWxlLndpZHRoID0gdGhpcy5pbmRpY2F0b3JXaWR0aCArICdweCc7XG4gICAgfVxuXG4gICAgdGhpcy54ID0geDtcblxuICAgIGlmICh0aGlzLnNjcm9sbGVyLm9wdGlvbnMudXNlVHJhbnNmb3JtKSB7XG4gICAgICB0aGlzLmluZGljYXRvclN0eWxlW3N0eWxlLnRyYW5zZm9ybV0gPSAndHJhbnNsYXRlWCgnICsgeCArICdweCknICsgdGhpcy5zY3JvbGxlci50cmFuc2xhdGVaO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluZGljYXRvclN0eWxlLmxlZnQgPSB4ICsgJ3B4JztcbiAgICB9XG4gIH1cbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUudHJhbnNpdGlvblRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gIHRoaXMuaW5kaWNhdG9yU3R5bGVbc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uXSA9IHRpbWUgKyAnbXMnO1xufTtcblxuSW5kaWNhdG9yLnByb3RvdHlwZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSBmdW5jdGlvbiAoZWFzaW5nKSB7XG4gIHRoaXMuaW5kaWNhdG9yU3R5bGVbc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXSA9IGVhc2luZztcbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcmVtb3ZlRE9NRXZlbnRzKCk7XG4gIHRoaXMud3JhcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMud3JhcHBlcik7XG59O1xuXG5JbmRpY2F0b3IucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uIChlKSB7XG4gIHZhciBwb2ludCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG5cbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gIHRoaXMudHJhbnNpdGlvblRpbWUoKTtcblxuICB0aGlzLmluaXRpYXRlZCA9IHRydWU7XG4gIHRoaXMubW92ZWQgPSBmYWxzZTtcbiAgdGhpcy5sYXN0UG9pbnRYID0gcG9pbnQucGFnZVg7XG4gIHRoaXMubGFzdFBvaW50WSA9IHBvaW50LnBhZ2VZO1xuXG4gIHRoaXMuc3RhcnRUaW1lID0gZ2V0Tm93KCk7XG5cbiAgdGhpcy5faGFuZGxlTW92ZUV2ZW50cyhhZGRFdmVudCk7XG4gIHRoaXMuc2Nyb2xsZXIudHJpZ2dlcignYmVmb3JlU2Nyb2xsU3RhcnQnKTtcbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUuX21vdmUgPSBmdW5jdGlvbiAoZSkge1xuICB2YXIgcG9pbnQgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuXG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICBpZiAoIXRoaXMubW92ZWQpIHtcbiAgICB0aGlzLnNjcm9sbGVyLnRyaWdnZXIoJ3Njcm9sbFN0YXJ0Jyk7XG4gIH1cblxuICB0aGlzLm1vdmVkID0gdHJ1ZTtcblxuICB2YXIgZGVsdGFYID0gcG9pbnQucGFnZVggLSB0aGlzLmxhc3RQb2ludFg7XG4gIHRoaXMubGFzdFBvaW50WCA9IHBvaW50LnBhZ2VYO1xuXG4gIHZhciBkZWx0YVkgPSBwb2ludC5wYWdlWSAtIHRoaXMubGFzdFBvaW50WTtcbiAgdGhpcy5sYXN0UG9pbnRZID0gcG9pbnQucGFnZVk7XG5cbiAgdmFyIG5ld1ggPSB0aGlzLnggKyBkZWx0YVg7XG4gIHZhciBuZXdZID0gdGhpcy55ICsgZGVsdGFZO1xuXG4gIHRoaXMuX3BvcyhuZXdYLCBuZXdZKTtcbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUuX2VuZCA9IGZ1bmN0aW9uIChlKSB7XG4gIGlmICghdGhpcy5pbml0aWF0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5pbml0aWF0ZWQgPSBmYWxzZTtcblxuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgdGhpcy5faGFuZGxlTW92ZUV2ZW50cyhyZW1vdmVFdmVudCk7XG5cbiAgdmFyIHNuYXBPcHRpb24gPSB0aGlzLnNjcm9sbGVyLm9wdGlvbnMuc25hcDtcbiAgaWYgKHNuYXBPcHRpb24pIHtcbiAgICB2YXIgc3BlZWQgPSBzbmFwT3B0aW9uLnNwZWVkLFxuICAgICAgICBfc25hcE9wdGlvbiRlYXNpbmcgPSBzbmFwT3B0aW9uLmVhc2luZyxcbiAgICAgICAgZWFzaW5nID0gX3NuYXBPcHRpb24kZWFzaW5nID09PSB1bmRlZmluZWQgPyBlYXNlLmJvdW5jZSA6IF9zbmFwT3B0aW9uJGVhc2luZztcblxuICAgIHZhciBzbmFwID0gdGhpcy5zY3JvbGxlci5fbmVhcmVzdFNuYXAodGhpcy5zY3JvbGxlci54LCB0aGlzLnNjcm9sbGVyLnkpO1xuXG4gICAgdmFyIHRpbWUgPSBzcGVlZCB8fCBNYXRoLm1heChNYXRoLm1heChNYXRoLm1pbihNYXRoLmFicyh0aGlzLnNjcm9sbGVyLnggLSBzbmFwLngpLCAxMDAwKSwgTWF0aC5taW4oTWF0aC5hYnModGhpcy5zY3JvbGxlci55IC0gc25hcC55KSwgMTAwMCkpLCAzMDApO1xuXG4gICAgaWYgKHRoaXMuc2Nyb2xsZXIueCAhPT0gc25hcC54IHx8IHRoaXMuc2Nyb2xsZXIueSAhPT0gc25hcC55KSB7XG4gICAgICB0aGlzLnNjcm9sbGVyLmRpcmVjdGlvblggPSAwO1xuICAgICAgdGhpcy5zY3JvbGxlci5kaXJlY3Rpb25ZID0gMDtcbiAgICAgIHRoaXMuc2Nyb2xsZXIuY3VycmVudFBhZ2UgPSBzbmFwO1xuICAgICAgdGhpcy5zY3JvbGxlci5zY3JvbGxUbyhzbmFwLngsIHNuYXAueSwgdGltZSwgZWFzaW5nKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5tb3ZlZCkge1xuICAgIHRoaXMuc2Nyb2xsZXIudHJpZ2dlcignc2Nyb2xsRW5kJywge1xuICAgICAgeDogdGhpcy5zY3JvbGxlci54LFxuICAgICAgeTogdGhpcy5zY3JvbGxlci55XG4gICAgfSk7XG4gIH1cbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUuX3BvcyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gIGlmICh4IDwgMCkge1xuICAgIHggPSAwO1xuICB9IGVsc2UgaWYgKHggPiB0aGlzLm1heFBvc1gpIHtcbiAgICB4ID0gdGhpcy5tYXhQb3NYO1xuICB9XG5cbiAgaWYgKHkgPCAwKSB7XG4gICAgeSA9IDA7XG4gIH0gZWxzZSBpZiAoeSA+IHRoaXMubWF4UG9zWSkge1xuICAgIHkgPSB0aGlzLm1heFBvc1k7XG4gIH1cblxuICB4ID0gTWF0aC5yb3VuZCh4IC8gdGhpcy5zaXplUmF0aW9YKTtcbiAgeSA9IE1hdGgucm91bmQoeSAvIHRoaXMuc2l6ZVJhdGlvWSk7XG5cbiAgdGhpcy5zY3JvbGxlci5zY3JvbGxUbyh4LCB5KTtcbiAgdGhpcy5zY3JvbGxlci50cmlnZ2VyKCdzY3JvbGwnLCB7XG4gICAgeDogdGhpcy5zY3JvbGxlci54LFxuICAgIHk6IHRoaXMuc2Nyb2xsZXIueVxuICB9KTtcbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUuX3Nob3VsZFNob3cgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyAmJiB0aGlzLnNjcm9sbGVyLmhhc1ZlcnRpY2FsU2Nyb2xsIHx8IHRoaXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgdGhpcy5zY3JvbGxlci5oYXNIb3Jpem9udGFsU2Nyb2xsKSB7XG4gICAgdGhpcy53cmFwcGVyLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB0aGlzLndyYXBwZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuSW5kaWNhdG9yLnByb3RvdHlwZS5fY2FsY3VsYXRlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHRoaXMud3JhcHBlci5jbGllbnRIZWlnaHQ7XG4gICAgdGhpcy5pbmRpY2F0b3JIZWlnaHQgPSBNYXRoLm1heChNYXRoLnJvdW5kKHdyYXBwZXJIZWlnaHQgKiB3cmFwcGVySGVpZ2h0IC8gKHRoaXMuc2Nyb2xsZXIuc2Nyb2xsZXJIZWlnaHQgfHwgd3JhcHBlckhlaWdodCB8fCAxKSksIElORElDQVRPUl9NSU5fTEVOKTtcbiAgICB0aGlzLmluZGljYXRvclN0eWxlLmhlaWdodCA9IHRoaXMuaW5kaWNhdG9ySGVpZ2h0ICsgJ3B4JztcblxuICAgIHRoaXMubWF4UG9zWSA9IHdyYXBwZXJIZWlnaHQgLSB0aGlzLmluZGljYXRvckhlaWdodDtcblxuICAgIHRoaXMuc2l6ZVJhdGlvWSA9IHRoaXMubWF4UG9zWSAvIHRoaXMuc2Nyb2xsZXIubWF4U2Nyb2xsWTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgd3JhcHBlcldpZHRoID0gdGhpcy53cmFwcGVyLmNsaWVudFdpZHRoO1xuICAgIHRoaXMuaW5kaWNhdG9yV2lkdGggPSBNYXRoLm1heChNYXRoLnJvdW5kKHdyYXBwZXJXaWR0aCAqIHdyYXBwZXJXaWR0aCAvICh0aGlzLnNjcm9sbGVyLnNjcm9sbGVyV2lkdGggfHwgd3JhcHBlcldpZHRoIHx8IDEpKSwgSU5ESUNBVE9SX01JTl9MRU4pO1xuICAgIHRoaXMuaW5kaWNhdG9yU3R5bGUud2lkdGggPSB0aGlzLmluZGljYXRvcldpZHRoICsgJ3B4JztcblxuICAgIHRoaXMubWF4UG9zWCA9IHdyYXBwZXJXaWR0aCAtIHRoaXMuaW5kaWNhdG9yV2lkdGg7XG5cbiAgICB0aGlzLnNpemVSYXRpb1ggPSB0aGlzLm1heFBvc1ggLyB0aGlzLnNjcm9sbGVyLm1heFNjcm9sbFg7XG4gIH1cbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUuX2FkZERPTUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGV2ZW50T3BlcmF0aW9uID0gYWRkRXZlbnQ7XG4gIHRoaXMuX2hhbmRsZURPTUV2ZW50cyhldmVudE9wZXJhdGlvbik7XG59O1xuXG5JbmRpY2F0b3IucHJvdG90eXBlLl9yZW1vdmVET01FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBldmVudE9wZXJhdGlvbiA9IHJlbW92ZUV2ZW50O1xuICB0aGlzLl9oYW5kbGVET01FdmVudHMoZXZlbnRPcGVyYXRpb24pO1xuICB0aGlzLl9oYW5kbGVNb3ZlRXZlbnRzKGV2ZW50T3BlcmF0aW9uKTtcbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUuX2hhbmRsZU1vdmVFdmVudHMgPSBmdW5jdGlvbiAoZXZlbnRPcGVyYXRpb24pIHtcbiAgaWYgKCF0aGlzLnNjcm9sbGVyLm9wdGlvbnMuZGlzYWJsZVRvdWNoKSB7XG4gICAgZXZlbnRPcGVyYXRpb24od2luZG93LCAndG91Y2htb3ZlJywgdGhpcyk7XG4gIH1cbiAgaWYgKCF0aGlzLnNjcm9sbGVyLm9wdGlvbnMuZGlzYWJsZU1vdXNlKSB7XG4gICAgZXZlbnRPcGVyYXRpb24od2luZG93LCAnbW91c2Vtb3ZlJywgdGhpcyk7XG4gIH1cbn07XG5cbkluZGljYXRvci5wcm90b3R5cGUuX2hhbmRsZURPTUV2ZW50cyA9IGZ1bmN0aW9uIChldmVudE9wZXJhdGlvbikge1xuICBpZiAoIXRoaXMuc2Nyb2xsZXIub3B0aW9ucy5kaXNhYmxlVG91Y2gpIHtcbiAgICBldmVudE9wZXJhdGlvbih0aGlzLmluZGljYXRvciwgJ3RvdWNoc3RhcnQnLCB0aGlzKTtcbiAgICBldmVudE9wZXJhdGlvbih3aW5kb3csICd0b3VjaGVuZCcsIHRoaXMpO1xuICB9XG4gIGlmICghdGhpcy5zY3JvbGxlci5vcHRpb25zLmRpc2FibGVNb3VzZSkge1xuICAgIGV2ZW50T3BlcmF0aW9uKHRoaXMuaW5kaWNhdG9yLCAnbW91c2Vkb3duJywgdGhpcyk7XG4gICAgZXZlbnRPcGVyYXRpb24od2luZG93LCAnbW91c2V1cCcsIHRoaXMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwdWxsRG93bk1peGluKEJTY3JvbGwpIHtcbiAgQlNjcm9sbC5wcm90b3R5cGUuX2luaXRQdWxsRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBtdXN0IHdhdGNoIHNjcm9sbCBpbiByZWFsIHRpbWVcbiAgICB0aGlzLm9wdGlvbnMucHJvYmVUeXBlID0gUFJPQkVfUkVBTFRJTUU7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX2NoZWNrUHVsbERvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9vcHRpb25zJHB1bGxEb3duUmVmciA9IHRoaXMub3B0aW9ucy5wdWxsRG93blJlZnJlc2gsXG4gICAgICAgIF9vcHRpb25zJHB1bGxEb3duUmVmcjIgPSBfb3B0aW9ucyRwdWxsRG93blJlZnIudGhyZXNob2xkLFxuICAgICAgICB0aHJlc2hvbGQgPSBfb3B0aW9ucyRwdWxsRG93blJlZnIyID09PSB1bmRlZmluZWQgPyA5MCA6IF9vcHRpb25zJHB1bGxEb3duUmVmcjIsXG4gICAgICAgIF9vcHRpb25zJHB1bGxEb3duUmVmcjMgPSBfb3B0aW9ucyRwdWxsRG93blJlZnIuc3RvcCxcbiAgICAgICAgc3RvcCA9IF9vcHRpb25zJHB1bGxEb3duUmVmcjMgPT09IHVuZGVmaW5lZCA/IDQwIDogX29wdGlvbnMkcHVsbERvd25SZWZyMztcblxuICAgIC8vIGNoZWNrIGlmIGEgcmVhbCBwdWxsIGRvd24gYWN0aW9uXG5cbiAgICBpZiAodGhpcy5kaXJlY3Rpb25ZICE9PSBESVJFQ1RJT05fRE9XTiB8fCB0aGlzLnkgPCB0aHJlc2hvbGQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucHVsbGluZykge1xuICAgICAgdGhpcy5wdWxsaW5nID0gdHJ1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcigncHVsbGluZ0Rvd24nKTtcbiAgICB9XG4gICAgdGhpcy5zY3JvbGxUbyh0aGlzLngsIHN0b3AsIHRoaXMub3B0aW9ucy5ib3VuY2VUaW1lLCBlYXNlLmJvdW5jZSk7XG5cbiAgICByZXR1cm4gdGhpcy5wdWxsaW5nO1xuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLmZpbmlzaFB1bGxEb3duID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHVsbGluZyA9IGZhbHNlO1xuICAgIHRoaXMucmVzZXRQb3NpdGlvbih0aGlzLm9wdGlvbnMuYm91bmNlVGltZSwgZWFzZS5ib3VuY2UpO1xuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLm9wZW5QdWxsRG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29uZmlnID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuXG4gICAgdGhpcy5vcHRpb25zLnB1bGxEb3duUmVmcmVzaCA9IGNvbmZpZztcbiAgICB0aGlzLl9pbml0UHVsbERvd24oKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5jbG9zZVB1bGxEb3duID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub3B0aW9ucy5wdWxsRG93blJlZnJlc2ggPSBmYWxzZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHVsbFVwTWl4aW4oQlNjcm9sbCkge1xuICBCU2Nyb2xsLnByb3RvdHlwZS5faW5pdFB1bGxVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBtdXN0IHdhdGNoIHNjcm9sbCBpbiByZWFsIHRpbWVcbiAgICB0aGlzLm9wdGlvbnMucHJvYmVUeXBlID0gUFJPQkVfUkVBTFRJTUU7XG5cbiAgICB0aGlzLnB1bGx1cFdhdGNoaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd2F0Y2hQdWxsVXAoKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fd2F0Y2hQdWxsVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucHVsbHVwV2F0Y2hpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wdWxsdXBXYXRjaGluZyA9IHRydWU7XG4gICAgdGhpcy5vbignc2Nyb2xsJywgdGhpcy5fY2hlY2tUb0VuZCk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX2NoZWNrVG9FbmQgPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBfb3B0aW9ucyRwdWxsVXBMb2FkJHQgPSB0aGlzLm9wdGlvbnMucHVsbFVwTG9hZC50aHJlc2hvbGQsXG4gICAgICAgIHRocmVzaG9sZCA9IF9vcHRpb25zJHB1bGxVcExvYWQkdCA9PT0gdW5kZWZpbmVkID8gMCA6IF9vcHRpb25zJHB1bGxVcExvYWQkdDtcblxuICAgIGlmICh0aGlzLm1vdmluZ0RpcmVjdGlvblkgPT09IERJUkVDVElPTl9VUCAmJiBwb3MueSA8PSB0aGlzLm1heFNjcm9sbFkgKyB0aHJlc2hvbGQpIHtcbiAgICAgIC8vIHJlc2V0IHB1bGx1cFdhdGNoaW5nIHN0YXR1cyBhZnRlciBzY3JvbGwgZW5kLlxuICAgICAgdGhpcy5vbmNlKCdzY3JvbGxFbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnB1bGx1cFdhdGNoaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudHJpZ2dlcigncHVsbGluZ1VwJyk7XG4gICAgICB0aGlzLm9mZignc2Nyb2xsJywgdGhpcy5fY2hlY2tUb0VuZCk7XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLmZpbmlzaFB1bGxVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICh0aGlzLnB1bGx1cFdhdGNoaW5nKSB7XG4gICAgICB0aGlzLm9uY2UoJ3Njcm9sbEVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLl93YXRjaFB1bGxVcCgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3dhdGNoUHVsbFVwKCk7XG4gICAgfVxuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLm9wZW5QdWxsVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcblxuICAgIHRoaXMub3B0aW9ucy5wdWxsVXBMb2FkID0gY29uZmlnO1xuICAgIHRoaXMuX2luaXRQdWxsVXAoKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5jbG9zZVB1bGxVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm9wdGlvbnMucHVsbFVwTG9hZCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5wdWxsdXBXYXRjaGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnB1bGx1cFdhdGNoaW5nID0gZmFsc2U7XG4gICAgdGhpcy5vZmYoJ3Njcm9sbCcsIHRoaXMuX2NoZWNrVG9FbmQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtb3VzZVdoZWVsTWl4aW4oQlNjcm9sbCkge1xuICBCU2Nyb2xsLnByb3RvdHlwZS5faW5pdE1vdXNlV2hlZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX2hhbmRsZU1vdXNlV2hlZWxFdmVudChhZGRFdmVudCk7XG5cbiAgICB0aGlzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLm1vdXNlV2hlZWxUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMubW91c2VXaGVlbEVuZFRpbWVyKTtcbiAgICAgIF90aGlzLl9oYW5kbGVNb3VzZVdoZWVsRXZlbnQocmVtb3ZlRXZlbnQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5maXJzdFdoZWVsT3ByZWF0aW9uID0gdHJ1ZTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5faGFuZGxlTW91c2VXaGVlbEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50T3BlcmF0aW9uKSB7XG4gICAgZXZlbnRPcGVyYXRpb24odGhpcy53cmFwcGVyLCAnd2hlZWwnLCB0aGlzKTtcbiAgICBldmVudE9wZXJhdGlvbih0aGlzLndyYXBwZXIsICdtb3VzZXdoZWVsJywgdGhpcyk7XG4gICAgZXZlbnRPcGVyYXRpb24odGhpcy53cmFwcGVyLCAnRE9NTW91c2VTY3JvbGwnLCB0aGlzKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fb25Nb3VzZVdoZWVsID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZpcnN0V2hlZWxPcHJlYXRpb24pIHtcbiAgICAgIHRoaXMudHJpZ2dlcignc2Nyb2xsU3RhcnQnKTtcbiAgICB9XG4gICAgdGhpcy5maXJzdFdoZWVsT3ByZWF0aW9uID0gZmFsc2U7XG5cbiAgICB2YXIgX29wdGlvbnMkbW91c2VXaGVlbCA9IHRoaXMub3B0aW9ucy5tb3VzZVdoZWVsLFxuICAgICAgICBfb3B0aW9ucyRtb3VzZVdoZWVsJHMgPSBfb3B0aW9ucyRtb3VzZVdoZWVsLnNwZWVkLFxuICAgICAgICBzcGVlZCA9IF9vcHRpb25zJG1vdXNlV2hlZWwkcyA9PT0gdW5kZWZpbmVkID8gMjAgOiBfb3B0aW9ucyRtb3VzZVdoZWVsJHMsXG4gICAgICAgIF9vcHRpb25zJG1vdXNlV2hlZWwkaSA9IF9vcHRpb25zJG1vdXNlV2hlZWwuaW52ZXJ0LFxuICAgICAgICBpbnZlcnQgPSBfb3B0aW9ucyRtb3VzZVdoZWVsJGkgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkbW91c2VXaGVlbCRpLFxuICAgICAgICBfb3B0aW9ucyRtb3VzZVdoZWVsJGUgPSBfb3B0aW9ucyRtb3VzZVdoZWVsLmVhc2VUaW1lLFxuICAgICAgICBlYXNlVGltZSA9IF9vcHRpb25zJG1vdXNlV2hlZWwkZSA9PT0gdW5kZWZpbmVkID8gMzAwIDogX29wdGlvbnMkbW91c2VXaGVlbCRlO1xuXG5cbiAgICBjbGVhclRpbWVvdXQodGhpcy5tb3VzZVdoZWVsVGltZXIpO1xuICAgIHRoaXMubW91c2VXaGVlbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzMi5vcHRpb25zLnNuYXAgJiYgIWVhc2VUaW1lKSB7XG4gICAgICAgIF90aGlzMi50cmlnZ2VyKCdzY3JvbGxFbmQnLCB7XG4gICAgICAgICAgeDogX3RoaXMyLngsXG4gICAgICAgICAgeTogX3RoaXMyLnlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBfdGhpczIuZmlyc3RXaGVlbE9wcmVhdGlvbiA9IHRydWU7XG4gICAgfSwgNDAwKTtcblxuICAgIHZhciB3aGVlbERlbHRhWCA9IHZvaWQgMDtcbiAgICB2YXIgd2hlZWxEZWx0YVkgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgJ2RlbHRhWCcgaW4gZTpcbiAgICAgICAgaWYgKGUuZGVsdGFNb2RlID09PSAxKSB7XG4gICAgICAgICAgd2hlZWxEZWx0YVggPSAtZS5kZWx0YVggKiBzcGVlZDtcbiAgICAgICAgICB3aGVlbERlbHRhWSA9IC1lLmRlbHRhWSAqIHNwZWVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdoZWVsRGVsdGFYID0gLWUuZGVsdGFYO1xuICAgICAgICAgIHdoZWVsRGVsdGFZID0gLWUuZGVsdGFZO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnd2hlZWxEZWx0YVgnIGluIGU6XG4gICAgICAgIHdoZWVsRGVsdGFYID0gZS53aGVlbERlbHRhWCAvIDEyMCAqIHNwZWVkO1xuICAgICAgICB3aGVlbERlbHRhWSA9IGUud2hlZWxEZWx0YVkgLyAxMjAgKiBzcGVlZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3aGVlbERlbHRhJyBpbiBlOlxuICAgICAgICB3aGVlbERlbHRhWCA9IHdoZWVsRGVsdGFZID0gZS53aGVlbERlbHRhIC8gMTIwICogc3BlZWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGV0YWlsJyBpbiBlOlxuICAgICAgICB3aGVlbERlbHRhWCA9IHdoZWVsRGVsdGFZID0gLWUuZGV0YWlsIC8gMyAqIHNwZWVkO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGlyZWN0aW9uID0gaW52ZXJ0ID8gLTEgOiAxO1xuICAgIHdoZWVsRGVsdGFYICo9IGRpcmVjdGlvbjtcbiAgICB3aGVlbERlbHRhWSAqPSBkaXJlY3Rpb247XG5cbiAgICBpZiAoIXRoaXMuaGFzVmVydGljYWxTY3JvbGwpIHtcbiAgICAgIHdoZWVsRGVsdGFYID0gd2hlZWxEZWx0YVk7XG4gICAgICB3aGVlbERlbHRhWSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIG5ld1ggPSB2b2lkIDA7XG4gICAgdmFyIG5ld1kgPSB2b2lkIDA7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zbmFwKSB7XG4gICAgICBuZXdYID0gdGhpcy5jdXJyZW50UGFnZS5wYWdlWDtcbiAgICAgIG5ld1kgPSB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VZO1xuXG4gICAgICBpZiAod2hlZWxEZWx0YVggPiAwKSB7XG4gICAgICAgIG5ld1gtLTtcbiAgICAgIH0gZWxzZSBpZiAod2hlZWxEZWx0YVggPCAwKSB7XG4gICAgICAgIG5ld1grKztcbiAgICAgIH1cblxuICAgICAgaWYgKHdoZWVsRGVsdGFZID4gMCkge1xuICAgICAgICBuZXdZLS07XG4gICAgICB9IGVsc2UgaWYgKHdoZWVsRGVsdGFZIDwgMCkge1xuICAgICAgICBuZXdZKys7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2dvVG9QYWdlKG5ld1gsIG5ld1kpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5ld1ggPSB0aGlzLnggKyBNYXRoLnJvdW5kKHRoaXMuaGFzSG9yaXpvbnRhbFNjcm9sbCA/IHdoZWVsRGVsdGFYIDogMCk7XG4gICAgbmV3WSA9IHRoaXMueSArIE1hdGgucm91bmQodGhpcy5oYXNWZXJ0aWNhbFNjcm9sbCA/IHdoZWVsRGVsdGFZIDogMCk7XG5cbiAgICB0aGlzLm1vdmluZ0RpcmVjdGlvblggPSB0aGlzLmRpcmVjdGlvblggPSB3aGVlbERlbHRhWCA+IDAgPyAtMSA6IHdoZWVsRGVsdGFYIDwgMCA/IDEgOiAwO1xuICAgIHRoaXMubW92aW5nRGlyZWN0aW9uWSA9IHRoaXMuZGlyZWN0aW9uWSA9IHdoZWVsRGVsdGFZID4gMCA/IC0xIDogd2hlZWxEZWx0YVkgPCAwID8gMSA6IDA7XG5cbiAgICBpZiAobmV3WCA+IHRoaXMubWluU2Nyb2xsWCkge1xuICAgICAgbmV3WCA9IHRoaXMubWluU2Nyb2xsWDtcbiAgICB9IGVsc2UgaWYgKG5ld1ggPCB0aGlzLm1heFNjcm9sbFgpIHtcbiAgICAgIG5ld1ggPSB0aGlzLm1heFNjcm9sbFg7XG4gICAgfVxuXG4gICAgaWYgKG5ld1kgPiB0aGlzLm1pblNjcm9sbFkpIHtcbiAgICAgIG5ld1kgPSB0aGlzLm1pblNjcm9sbFk7XG4gICAgfSBlbHNlIGlmIChuZXdZIDwgdGhpcy5tYXhTY3JvbGxZKSB7XG4gICAgICBuZXdZID0gdGhpcy5tYXhTY3JvbGxZO1xuICAgIH1cblxuICAgIHZhciBuZWVkVHJpZ2dlckVuZCA9IHRoaXMueSA9PT0gbmV3WTtcbiAgICB0aGlzLnNjcm9sbFRvKG5ld1gsIG5ld1ksIGVhc2VUaW1lLCBlYXNlLnN3aXBlKTtcbiAgICB0aGlzLnRyaWdnZXIoJ3Njcm9sbCcsIHtcbiAgICAgIHg6IHRoaXMueCxcbiAgICAgIHk6IHRoaXMueVxuICAgIH0pO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLm1vdXNlV2hlZWxFbmRUaW1lcik7XG4gICAgaWYgKG5lZWRUcmlnZ2VyRW5kKSB7XG4gICAgICB0aGlzLm1vdXNlV2hlZWxFbmRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIudHJpZ2dlcignc2Nyb2xsRW5kJywge1xuICAgICAgICAgIHg6IF90aGlzMi54LFxuICAgICAgICAgIHk6IF90aGlzMi55XG4gICAgICAgIH0pO1xuICAgICAgfSwgZWFzZVRpbWUpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gem9vbU1peGluKEJTY3JvbGwpIHtcbiAgQlNjcm9sbC5wcm90b3R5cGUuX2luaXRab29tID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfb3B0aW9ucyR6b29tID0gdGhpcy5vcHRpb25zLnpvb20sXG4gICAgICAgIF9vcHRpb25zJHpvb20kc3RhcnQgPSBfb3B0aW9ucyR6b29tLnN0YXJ0LFxuICAgICAgICBzdGFydCA9IF9vcHRpb25zJHpvb20kc3RhcnQgPT09IHVuZGVmaW5lZCA/IDEgOiBfb3B0aW9ucyR6b29tJHN0YXJ0LFxuICAgICAgICBfb3B0aW9ucyR6b29tJG1pbiA9IF9vcHRpb25zJHpvb20ubWluLFxuICAgICAgICBtaW4gPSBfb3B0aW9ucyR6b29tJG1pbiA9PT0gdW5kZWZpbmVkID8gMSA6IF9vcHRpb25zJHpvb20kbWluLFxuICAgICAgICBfb3B0aW9ucyR6b29tJG1heCA9IF9vcHRpb25zJHpvb20ubWF4LFxuICAgICAgICBtYXggPSBfb3B0aW9ucyR6b29tJG1heCA9PT0gdW5kZWZpbmVkID8gNCA6IF9vcHRpb25zJHpvb20kbWF4O1xuXG4gICAgdGhpcy5zY2FsZSA9IE1hdGgubWluKE1hdGgubWF4KHN0YXJ0LCBtaW4pLCBtYXgpO1xuICAgIHRoaXMuc2V0U2NhbGUodGhpcy5zY2FsZSk7XG4gICAgdGhpcy5zY3JvbGxlclN0eWxlW3N0eWxlLnRyYW5zZm9ybU9yaWdpbl0gPSAnMCAwJztcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fem9vbVRvID0gZnVuY3Rpb24gKHNjYWxlLCBvcmlnaW5YLCBvcmlnaW5ZLCBzdGFydFNjYWxlKSB7XG4gICAgdGhpcy5zY2FsZWQgPSB0cnVlO1xuXG4gICAgdmFyIGxhc3RTY2FsZSA9IHNjYWxlIC8gKHN0YXJ0U2NhbGUgfHwgdGhpcy5zY2FsZSk7XG4gICAgdGhpcy5zZXRTY2FsZShzY2FsZSk7XG5cbiAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgIHZhciBuZXdYID0gTWF0aC5yb3VuZCh0aGlzLnN0YXJ0WCAtIChvcmlnaW5YIC0gdGhpcy5yZWxhdGl2ZVgpICogKGxhc3RTY2FsZSAtIDEpKTtcbiAgICB2YXIgbmV3WSA9IE1hdGgucm91bmQodGhpcy5zdGFydFkgLSAob3JpZ2luWSAtIHRoaXMucmVsYXRpdmVZKSAqIChsYXN0U2NhbGUgLSAxKSk7XG5cbiAgICBpZiAobmV3WCA+IHRoaXMubWluU2Nyb2xsWCkge1xuICAgICAgbmV3WCA9IHRoaXMubWluU2Nyb2xsWDtcbiAgICB9IGVsc2UgaWYgKG5ld1ggPCB0aGlzLm1heFNjcm9sbFgpIHtcbiAgICAgIG5ld1ggPSB0aGlzLm1heFNjcm9sbFg7XG4gICAgfVxuXG4gICAgaWYgKG5ld1kgPiB0aGlzLm1pblNjcm9sbFkpIHtcbiAgICAgIG5ld1kgPSB0aGlzLm1pblNjcm9sbFk7XG4gICAgfSBlbHNlIGlmIChuZXdZIDwgdGhpcy5tYXhTY3JvbGxZKSB7XG4gICAgICBuZXdZID0gdGhpcy5tYXhTY3JvbGxZO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnggIT09IG5ld1ggfHwgdGhpcy55ICE9PSBuZXdZKSB7XG4gICAgICB0aGlzLnNjcm9sbFRvKG5ld1gsIG5ld1ksIHRoaXMub3B0aW9ucy5ib3VuY2VUaW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLnNjYWxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIEJTY3JvbGwucHJvdG90eXBlLnpvb21UbyA9IGZ1bmN0aW9uIChzY2FsZSwgeCwgeSkge1xuICAgIHZhciBfb2Zmc2V0VG9Cb2R5ID0gb2Zmc2V0VG9Cb2R5KHRoaXMud3JhcHBlciksXG4gICAgICAgIGxlZnQgPSBfb2Zmc2V0VG9Cb2R5LmxlZnQsXG4gICAgICAgIHRvcCA9IF9vZmZzZXRUb0JvZHkudG9wO1xuXG4gICAgdmFyIG9yaWdpblggPSB4ICsgbGVmdCAtIHRoaXMueDtcbiAgICB2YXIgb3JpZ2luWSA9IHkgKyB0b3AgLSB0aGlzLnk7XG4gICAgdGhpcy5fem9vbVRvKHNjYWxlLCBvcmlnaW5YLCBvcmlnaW5ZKTtcbiAgfTtcblxuICBCU2Nyb2xsLnByb3RvdHlwZS5fem9vbVN0YXJ0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgZmlyc3RGaW5nZXIgPSBlLnRvdWNoZXNbMF07XG4gICAgdmFyIHNlY29uZEZpbmdlciA9IGUudG91Y2hlc1sxXTtcbiAgICB2YXIgZGVsdGFYID0gTWF0aC5hYnMoZmlyc3RGaW5nZXIucGFnZVggLSBzZWNvbmRGaW5nZXIucGFnZVgpO1xuICAgIHZhciBkZWx0YVkgPSBNYXRoLmFicyhmaXJzdEZpbmdlci5wYWdlWSAtIHNlY29uZEZpbmdlci5wYWdlWSk7XG5cbiAgICB0aGlzLnN0YXJ0RGlzdGFuY2UgPSBnZXREaXN0YW5jZShkZWx0YVgsIGRlbHRhWSk7XG4gICAgdGhpcy5zdGFydFNjYWxlID0gdGhpcy5zY2FsZTtcblxuICAgIHZhciBfb2Zmc2V0VG9Cb2R5MiA9IG9mZnNldFRvQm9keSh0aGlzLndyYXBwZXIpLFxuICAgICAgICBsZWZ0ID0gX29mZnNldFRvQm9keTIubGVmdCxcbiAgICAgICAgdG9wID0gX29mZnNldFRvQm9keTIudG9wO1xuXG4gICAgdGhpcy5vcmlnaW5YID0gTWF0aC5hYnMoZmlyc3RGaW5nZXIucGFnZVggKyBzZWNvbmRGaW5nZXIucGFnZVgpIC8gMiArIGxlZnQgLSB0aGlzLng7XG4gICAgdGhpcy5vcmlnaW5ZID0gTWF0aC5hYnMoZmlyc3RGaW5nZXIucGFnZVkgKyBzZWNvbmRGaW5nZXIucGFnZVkpIC8gMiArIHRvcCAtIHRoaXMueTtcblxuICAgIHRoaXMudHJpZ2dlcignem9vbVN0YXJ0Jyk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX3pvb20gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICghdGhpcy5lbmFibGVkIHx8IHRoaXMuZGVzdHJveWVkIHx8IGV2ZW50VHlwZVtlLnR5cGVdICE9PSB0aGlzLmluaXRpYXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RGaW5nZXIgPSBlLnRvdWNoZXNbMF07XG4gICAgdmFyIHNlY29uZEZpbmdlciA9IGUudG91Y2hlc1sxXTtcbiAgICB2YXIgZGVsdGFYID0gTWF0aC5hYnMoZmlyc3RGaW5nZXIucGFnZVggLSBzZWNvbmRGaW5nZXIucGFnZVgpO1xuICAgIHZhciBkZWx0YVkgPSBNYXRoLmFicyhmaXJzdEZpbmdlci5wYWdlWSAtIHNlY29uZEZpbmdlci5wYWdlWSk7XG4gICAgdmFyIGRpc3RhbmNlID0gZ2V0RGlzdGFuY2UoZGVsdGFYLCBkZWx0YVkpO1xuICAgIHZhciBzY2FsZSA9IGRpc3RhbmNlIC8gdGhpcy5zdGFydERpc3RhbmNlICogdGhpcy5zdGFydFNjYWxlO1xuXG4gICAgdGhpcy5zY2FsZWQgPSB0cnVlO1xuXG4gICAgdmFyIF9vcHRpb25zJHpvb20yID0gdGhpcy5vcHRpb25zLnpvb20sXG4gICAgICAgIF9vcHRpb25zJHpvb20yJG1pbiA9IF9vcHRpb25zJHpvb20yLm1pbixcbiAgICAgICAgbWluID0gX29wdGlvbnMkem9vbTIkbWluID09PSB1bmRlZmluZWQgPyAxIDogX29wdGlvbnMkem9vbTIkbWluLFxuICAgICAgICBfb3B0aW9ucyR6b29tMiRtYXggPSBfb3B0aW9ucyR6b29tMi5tYXgsXG4gICAgICAgIG1heCA9IF9vcHRpb25zJHpvb20yJG1heCA9PT0gdW5kZWZpbmVkID8gNCA6IF9vcHRpb25zJHpvb20yJG1heDtcblxuXG4gICAgaWYgKHNjYWxlIDwgbWluKSB7XG4gICAgICBzY2FsZSA9IDAuNSAqIG1pbiAqIE1hdGgucG93KDIuMCwgc2NhbGUgLyBtaW4pO1xuICAgIH0gZWxzZSBpZiAoc2NhbGUgPiBtYXgpIHtcbiAgICAgIHNjYWxlID0gMi4wICogbWF4ICogTWF0aC5wb3coMC41LCBtYXggLyBzY2FsZSk7XG4gICAgfVxuXG4gICAgdmFyIGxhc3RTY2FsZSA9IHNjYWxlIC8gdGhpcy5zdGFydFNjYWxlO1xuXG4gICAgdmFyIHggPSB0aGlzLnN0YXJ0WCAtICh0aGlzLm9yaWdpblggLSB0aGlzLnJlbGF0aXZlWCkgKiAobGFzdFNjYWxlIC0gMSk7XG4gICAgdmFyIHkgPSB0aGlzLnN0YXJ0WSAtICh0aGlzLm9yaWdpblkgLSB0aGlzLnJlbGF0aXZlWSkgKiAobGFzdFNjYWxlIC0gMSk7XG5cbiAgICB0aGlzLnNldFNjYWxlKHNjYWxlKTtcblxuICAgIHRoaXMuc2Nyb2xsVG8oeCwgeSwgMCk7XG4gIH07XG5cbiAgQlNjcm9sbC5wcm90b3R5cGUuX3pvb21FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICghdGhpcy5lbmFibGVkIHx8IHRoaXMuZGVzdHJveWVkIHx8IGV2ZW50VHlwZVtlLnR5cGVdICE9PSB0aGlzLmluaXRpYXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzSW5UcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlO1xuICAgIHRoaXMuaW5pdGlhdGVkID0gMDtcblxuICAgIHZhciBfb3B0aW9ucyR6b29tMyA9IHRoaXMub3B0aW9ucy56b29tLFxuICAgICAgICBfb3B0aW9ucyR6b29tMyRtaW4gPSBfb3B0aW9ucyR6b29tMy5taW4sXG4gICAgICAgIG1pbiA9IF9vcHRpb25zJHpvb20zJG1pbiA9PT0gdW5kZWZpbmVkID8gMSA6IF9vcHRpb25zJHpvb20zJG1pbixcbiAgICAgICAgX29wdGlvbnMkem9vbTMkbWF4ID0gX29wdGlvbnMkem9vbTMubWF4LFxuICAgICAgICBtYXggPSBfb3B0aW9ucyR6b29tMyRtYXggPT09IHVuZGVmaW5lZCA/IDQgOiBfb3B0aW9ucyR6b29tMyRtYXg7XG5cblxuICAgIHZhciBzY2FsZSA9IHRoaXMuc2NhbGUgPiBtYXggPyBtYXggOiB0aGlzLnNjYWxlIDwgbWluID8gbWluIDogdGhpcy5zY2FsZTtcblxuICAgIHRoaXMuX3pvb21UbyhzY2FsZSwgdGhpcy5vcmlnaW5YLCB0aGlzLm9yaWdpblksIHRoaXMuc3RhcnRTY2FsZSk7XG5cbiAgICB0aGlzLnRyaWdnZXIoJ3pvb21FbmQnKTtcbiAgfTtcbn1cblxuLy8gaW1wb3J0IHsgZWFzZSB9IGZyb20gJy4uL3V0aWwvZWFzZSdcblxuLy8gTnVtYmVyIG9mIGl0ZW1zIHRvIGluc3RhbnRpYXRlIGJleW9uZCBjdXJyZW50IHZpZXcgaW4gdGhlIHNjcm9sbCBkaXJlY3Rpb24uXG52YXIgUlVOV0FZX0lURU1TID0gMzA7XG5cbi8vIE51bWJlciBvZiBpdGVtcyB0byBpbnN0YW50aWF0ZSBiZXlvbmQgY3VycmVudCB2aWV3IGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG52YXIgUlVOV0FZX0lURU1TX09QUE9TSVRFID0gMTA7XG5cbi8vIFRoZSBhbmltYXRpb24gaW50ZXJ2YWwgKGluIG1zKSBmb3IgZmFkaW5nIGluIGNvbnRlbnQgZnJvbSB0b21ic3RvbmVzLlxudmFyIEFOSU1BVElPTl9EVVJBVElPTl9NUyA9IDIwMDtcblxuLy8gVGhlIG51bWJlciBvZiBwaXhlbHMgb2YgZGVmYXVsdCBhZGRpdGlvbmFsIGxlbmd0aCB0byBhbGxvdyBzY3JvbGxpbmcgdG8uXG52YXIgREVGQVVMVF9TQ1JPTExfUlVOV0FZID0gMjAwMDtcblxuZnVuY3Rpb24gaW5maW5pdGVNaXhpbihCU2Nyb2xsKSB7XG4gIEJTY3JvbGwucHJvdG90eXBlLl9pbml0SW5maW5pdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vcHRpb25zLnByb2JlVHlwZSA9IDM7XG4gICAgdGhpcy5tYXhTY3JvbGxZID0gLURFRkFVTFRfU0NST0xMX1JVTldBWTtcbiAgICB0aGlzLmluZmluaXRlU2Nyb2xsZXIgPSBuZXcgSW5maW5pdGVTY3JvbGxlcih0aGlzLCB0aGlzLm9wdGlvbnMuaW5maW5pdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpc1RvbWJzdG9uZU5vZGUobm9kZSkge1xuICBpZiAobm9kZSAmJiBub2RlLmNsYXNzTGlzdCkge1xuICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5jb250YWlucygndG9tYnN0b25lJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gSW5maW5pdGVTY3JvbGxlcihzY3JvbGxlciwgb3B0aW9ucykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIGFzc2VydCh0eXBlb2YgdGhpcy5vcHRpb25zLmNyZWF0ZVRvbWJzdG9uZSA9PT0gJ2Z1bmN0aW9uJywgJ0luZmluaXRlIHNjcm9sbCBuZWVkIGNyZWF0ZVRvbWJzdG9uZSBGdW5jdGlvbiB0byBjcmVhdGUgdG9tYnN0b25lJyk7XG5cbiAgYXNzZXJ0KHR5cGVvZiB0aGlzLm9wdGlvbnMuZmV0Y2ggPT09ICdmdW5jdGlvbicsICdJbmZpbml0ZSBzY3JvbGwgbmVlZCBmZXRjaCBGdW5jdGlvbiB0byBmZXRjaCBuZXcgZGF0YS4nKTtcblxuICBhc3NlcnQodHlwZW9mIHRoaXMub3B0aW9ucy5yZW5kZXIgPT09ICdmdW5jdGlvbicsICdJbmZpbml0ZSBzY3JvbGwgbmVlZCByZW5kZXIgRnVuY3Rpb24gdG8gcmVuZGVyIGVhY2ggaXRlbS4nKTtcblxuICB0aGlzLmZpcnN0QXR0YWNoZWRJdGVtID0gMDtcbiAgdGhpcy5sYXN0QXR0YWNoZWRJdGVtID0gMDtcblxuICB0aGlzLmFuY2hvclNjcm9sbFRvcCA9IDA7XG4gIHRoaXMuYW5jaG9ySXRlbSA9IHtcbiAgICBpbmRleDogMCxcbiAgICBvZmZzZXQ6IDBcbiAgfTtcbiAgdGhpcy50b21ic3RvbmVIZWlnaHQgPSAwO1xuICB0aGlzLnRvbWJzdG9uZVdpZHRoID0gMDtcbiAgdGhpcy50b21ic3RvbmVzID0gW107XG5cbiAgdGhpcy5pdGVtcyA9IFtdO1xuICB0aGlzLmxvYWRlZEl0ZW1zID0gMDtcbiAgdGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICB0aGlzLmhhc01vcmUgPSB0cnVlO1xuXG4gIHRoaXMuc2Nyb2xsZXIgPSBzY3JvbGxlcjtcbiAgdGhpcy53cmFwcGVyRWwgPSB0aGlzLnNjcm9sbGVyLndyYXBwZXI7XG4gIHRoaXMuc2Nyb2xsZXJFbCA9IHRoaXMuc2Nyb2xsZXIuc2Nyb2xsZXI7XG4gIHRoaXMuc2Nyb2xsZXIub24oJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy5vblNjcm9sbCgpO1xuICB9KTtcbiAgdGhpcy5zY3JvbGxlci5vbigncmVzaXplJywgZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLm9uUmVzaXplKCk7XG4gIH0pO1xuXG4gIHRoaXMub25SZXNpemUoKTtcbn1cblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUub25TY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzY3JvbGxUb3AgPSAtdGhpcy5zY3JvbGxlci55O1xuICB2YXIgZGVsdGEgPSBzY3JvbGxUb3AgLSB0aGlzLmFuY2hvclNjcm9sbFRvcDtcbiAgaWYgKHNjcm9sbFRvcCA9PT0gMCkge1xuICAgIHRoaXMuYW5jaG9ySXRlbSA9IHtcbiAgICAgIGluZGV4OiAwLFxuICAgICAgb2Zmc2V0OiAwXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFuY2hvckl0ZW0gPSB0aGlzLl9jYWxjdWxhdGVBbmNob3JlZEl0ZW0odGhpcy5hbmNob3JJdGVtLCBkZWx0YSk7XG4gIH1cblxuICB0aGlzLmFuY2hvclNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgdmFyIGxhc3RTY3JlZW5JdGVtID0gdGhpcy5fY2FsY3VsYXRlQW5jaG9yZWRJdGVtKHRoaXMuYW5jaG9ySXRlbSwgdGhpcy53cmFwcGVyRWwub2Zmc2V0SGVpZ2h0KTtcblxuICB2YXIgc3RhcnQgPSB0aGlzLmFuY2hvckl0ZW0uaW5kZXg7XG4gIHZhciBlbmQgPSBsYXN0U2NyZWVuSXRlbS5pbmRleDtcbiAgaWYgKGRlbHRhIDwgMCkge1xuICAgIHN0YXJ0IC09IFJVTldBWV9JVEVNUztcbiAgICBlbmQgKz0gUlVOV0FZX0lURU1TX09QUE9TSVRFO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0IC09IFJVTldBWV9JVEVNU19PUFBPU0lURTtcbiAgICBlbmQgKz0gUlVOV0FZX0lURU1TO1xuICB9XG4gIHRoaXMuZmlsbChzdGFydCwgZW5kKTtcbiAgdGhpcy5tYXliZVJlcXVlc3RDb250ZW50KCk7XG59O1xuXG5JbmZpbml0ZVNjcm9sbGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRvbWJzdG9uZSA9IHRoaXMub3B0aW9ucy5jcmVhdGVUb21ic3RvbmUoKTtcbiAgdG9tYnN0b25lLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgdGhpcy5zY3JvbGxlckVsLmFwcGVuZENoaWxkKHRvbWJzdG9uZSk7XG4gIHRvbWJzdG9uZS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gIHRoaXMudG9tYnN0b25lSGVpZ2h0ID0gdG9tYnN0b25lLm9mZnNldEhlaWdodDtcbiAgdGhpcy50b21ic3RvbmVXaWR0aCA9IHRvbWJzdG9uZS5vZmZzZXRXaWR0aDtcbiAgdGhpcy5zY3JvbGxlckVsLnJlbW92ZUNoaWxkKHRvbWJzdG9uZSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5pdGVtc1tpXS5oZWlnaHQgPSB0aGlzLml0ZW1zW2ldLndpZHRoID0gMDtcbiAgfVxuXG4gIHRoaXMub25TY3JvbGwoKTtcbn07XG5cbkluZmluaXRlU2Nyb2xsZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICB0aGlzLmZpcnN0QXR0YWNoZWRJdGVtID0gTWF0aC5tYXgoMCwgc3RhcnQpO1xuICBpZiAoIXRoaXMuaGFzTW9yZSkge1xuICAgIGVuZCA9IE1hdGgubWluKGVuZCwgdGhpcy5pdGVtcy5sZW5ndGgpO1xuICB9XG4gIHRoaXMubGFzdEF0dGFjaGVkSXRlbSA9IGVuZDtcbiAgdGhpcy5hdHRhY2hDb250ZW50KCk7XG59O1xuXG5JbmZpbml0ZVNjcm9sbGVyLnByb3RvdHlwZS5tYXliZVJlcXVlc3RDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBpZiAodGhpcy5yZXF1ZXN0SW5Qcm9ncmVzcyB8fCAhdGhpcy5oYXNNb3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpdGVtc05lZWRlZCA9IHRoaXMubGFzdEF0dGFjaGVkSXRlbSAtIHRoaXMubG9hZGVkSXRlbXM7XG4gIGlmIChpdGVtc05lZWRlZCA8PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucmVxdWVzdEluUHJvZ3Jlc3MgPSB0cnVlO1xuICB0aGlzLm9wdGlvbnMuZmV0Y2goaXRlbXNOZWVkZWQpLnRoZW4oZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgX3RoaXMyLnJlcXVlc3RJblByb2dyZXNzID0gZmFsc2U7XG4gICAgaWYgKGl0ZW1zKSB7XG4gICAgICBfdGhpczIuYWRkQ29udGVudChpdGVtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzMi5oYXNNb3JlID0gZmFsc2U7XG4gICAgICB2YXIgdG9tYnN0b25lTGVuID0gX3RoaXMyLl9yZW1vdmVUb21ic3RvbmVzKCk7XG4gICAgICB2YXIgY3VyUG9zID0gMDtcbiAgICAgIGlmIChfdGhpczIuYW5jaG9ySXRlbS5pbmRleCA8PSBfdGhpczIuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIGN1clBvcyA9IF90aGlzMi5fZml4U2Nyb2xsUG9zaXRpb24oKTtcbiAgICAgICAgX3RoaXMyLl9zZXR1cEFuaW1hdGlvbnMoe30sIGN1clBvcyk7XG4gICAgICAgIF90aGlzMi5zY3JvbGxlci5yZXNldFBvc2l0aW9uKF90aGlzMi5zY3JvbGxlci5vcHRpb25zLmJvdW5jZVRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMyLmFuY2hvckl0ZW0uaW5kZXggLT0gdG9tYnN0b25lTGVuO1xuICAgICAgICBjdXJQb3MgPSBfdGhpczIuX2ZpeFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgICAgIF90aGlzMi5fc2V0dXBBbmltYXRpb25zKHt9LCBjdXJQb3MpO1xuICAgICAgICBfdGhpczIuc2Nyb2xsZXIuc3RvcCgpO1xuICAgICAgICBfdGhpczIuc2Nyb2xsZXIucmVzZXRQb3NpdGlvbigpO1xuICAgICAgICBfdGhpczIub25TY3JvbGwoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUuYWRkQ29udGVudCA9IGZ1bmN0aW9uIChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRoaXMuaXRlbXMubGVuZ3RoIDw9IHRoaXMubG9hZGVkSXRlbXMpIHtcbiAgICAgIHRoaXMuX2FkZEl0ZW0oKTtcbiAgICB9XG4gICAgdGhpcy5pdGVtc1t0aGlzLmxvYWRlZEl0ZW1zKytdLmRhdGEgPSBpdGVtc1tpXTtcbiAgfVxuICB0aGlzLmF0dGFjaENvbnRlbnQoKTtcbiAgdGhpcy5tYXliZVJlcXVlc3RDb250ZW50KCk7XG59O1xuXG5JbmZpbml0ZVNjcm9sbGVyLnByb3RvdHlwZS5hdHRhY2hDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdW51c2VkTm9kZXMgPSB0aGlzLl9jb2xsZWN0VW51c2VkTm9kZXMoKTtcbiAgdmFyIHRvbWJzdG9uZUFuaW1hdGlvbnMgPSB0aGlzLl9jcmVhdGVET01Ob2Rlcyh1bnVzZWROb2Rlcyk7XG4gIHRoaXMuX2NsZWFudXBVbnVzZWROb2Rlcyh1bnVzZWROb2Rlcyk7XG4gIHRoaXMuX2NhY2hlTm9kZVNpemUoKTtcbiAgdmFyIGN1clBvcyA9IHRoaXMuX2ZpeFNjcm9sbFBvc2l0aW9uKCk7XG4gIHRoaXMuX3NldHVwQW5pbWF0aW9ucyh0b21ic3RvbmVBbmltYXRpb25zLCBjdXJQb3MpO1xufTtcblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUucmVzZXRNb3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmhhc01vcmUgPSB0cnVlO1xufTtcblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUuX3JlbW92ZVRvbWJzdG9uZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBtYXJrSW5kZXggPSB2b2lkIDA7XG4gIHZhciB0b21ic3RvbmVMZW4gPSAwO1xuICB2YXIgaXRlbUxlbiA9IHRoaXMuaXRlbXMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1MZW47IGkrKykge1xuICAgIHZhciBjdXJyZW50Tm9kZSA9IHRoaXMuaXRlbXNbaV0ubm9kZTtcbiAgICB2YXIgY3VycmVudERhdGEgPSB0aGlzLml0ZW1zW2ldLmRhdGE7XG4gICAgaWYgKCghY3VycmVudE5vZGUgfHwgaXNUb21ic3RvbmVOb2RlKGN1cnJlbnROb2RlKSkgJiYgIWN1cnJlbnREYXRhKSB7XG4gICAgICBpZiAoIW1hcmtJbmRleCkge1xuICAgICAgICBtYXJrSW5kZXggPSBpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsZXJFbC5yZW1vdmVDaGlsZChjdXJyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHRvbWJzdG9uZUxlbiA9IGl0ZW1MZW4gLSBtYXJrSW5kZXg7XG4gIHRoaXMuaXRlbXMuc3BsaWNlKG1hcmtJbmRleCk7XG4gIHRoaXMubGFzdEF0dGFjaGVkSXRlbSA9IE1hdGgubWluKHRoaXMubGFzdEF0dGFjaGVkSXRlbSwgdGhpcy5pdGVtcy5sZW5ndGgpO1xuICByZXR1cm4gdG9tYnN0b25lTGVuO1xufTtcblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUuX2NvbGxlY3RVbnVzZWROb2RlcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVudXNlZE5vZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIFNraXAgdGhlIGl0ZW1zIHdoaWNoIHNob3VsZCBiZSB2aXNpYmxlLlxuICAgIGlmIChpID09PSB0aGlzLmZpcnN0QXR0YWNoZWRJdGVtKSB7XG4gICAgICBpID0gdGhpcy5sYXN0QXR0YWNoZWRJdGVtIC0gMTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgY3VycmVudE5vZGUgPSB0aGlzLml0ZW1zW2ldLm5vZGU7XG4gICAgaWYgKGN1cnJlbnROb2RlKSB7XG4gICAgICBpZiAoaXNUb21ic3RvbmVOb2RlKGN1cnJlbnROb2RlKSkge1xuICAgICAgICAvLyBDYWNoZSB0b21ic3RvbmVzIGZvciByZXVzZVxuICAgICAgICB0aGlzLnRvbWJzdG9uZXMucHVzaChjdXJyZW50Tm9kZSk7XG4gICAgICAgIHRoaXMudG9tYnN0b25lc1t0aGlzLnRvbWJzdG9uZXMubGVuZ3RoIC0gMV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVudXNlZE5vZGVzLnB1c2goY3VycmVudE5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLml0ZW1zW2ldLm5vZGUgPSBudWxsO1xuICB9XG4gIHJldHVybiB1bnVzZWROb2Rlcztcbn07XG5cbkluZmluaXRlU2Nyb2xsZXIucHJvdG90eXBlLl9jcmVhdGVET01Ob2RlcyA9IGZ1bmN0aW9uICh1bnVzZWROb2Rlcykge1xuICB2YXIgdG9tYnN0b25lQW5pbWF0aW9ucyA9IHt9O1xuICBmb3IgKHZhciBpID0gdGhpcy5maXJzdEF0dGFjaGVkSXRlbTsgaSA8IHRoaXMubGFzdEF0dGFjaGVkSXRlbTsgaSsrKSB7XG4gICAgd2hpbGUgKHRoaXMuaXRlbXMubGVuZ3RoIDw9IGkpIHtcbiAgICAgIHRoaXMuX2FkZEl0ZW0oKTtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnROb2RlID0gdGhpcy5pdGVtc1tpXS5ub2RlO1xuICAgIHZhciBjdXJyZW50RGF0YSA9IHRoaXMuaXRlbXNbaV0uZGF0YTtcbiAgICBpZiAoY3VycmVudE5vZGUpIHtcbiAgICAgIGlmIChpc1RvbWJzdG9uZU5vZGUoY3VycmVudE5vZGUpICYmIGN1cnJlbnREYXRhKSB7XG4gICAgICAgIGN1cnJlbnROb2RlLnN0eWxlLnpJbmRleCA9IDE7XG4gICAgICAgIHRvbWJzdG9uZUFuaW1hdGlvbnNbaV0gPSBbY3VycmVudE5vZGUsIHRoaXMuaXRlbXNbaV0udG9wIC0gdGhpcy5hbmNob3JTY3JvbGxUb3BdO1xuICAgICAgICB0aGlzLml0ZW1zW2ldLm5vZGUgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBub2RlID0gY3VycmVudERhdGEgPyB0aGlzLm9wdGlvbnMucmVuZGVyKGN1cnJlbnREYXRhLCB1bnVzZWROb2Rlcy5wb3AoKSkgOiB0aGlzLl9nZXRUb21iU3RvbmUoKTtcbiAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICB0aGlzLml0ZW1zW2ldLnRvcCA9IC0xO1xuICAgIHRoaXMuc2Nyb2xsZXJFbC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB0aGlzLml0ZW1zW2ldLm5vZGUgPSBub2RlO1xuICB9XG4gIHJldHVybiB0b21ic3RvbmVBbmltYXRpb25zO1xufTtcblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUuX2NsZWFudXBVbnVzZWROb2RlcyA9IGZ1bmN0aW9uICh1bnVzZWROb2Rlcykge1xuICB3aGlsZSAodW51c2VkTm9kZXMubGVuZ3RoKSB7XG4gICAgdGhpcy5zY3JvbGxlckVsLnJlbW92ZUNoaWxkKHVudXNlZE5vZGVzLnBvcCgpKTtcbiAgfVxufTtcblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUuX2NhY2hlTm9kZVNpemUgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIGkgPSB0aGlzLmZpcnN0QXR0YWNoZWRJdGVtOyBpIDwgdGhpcy5sYXN0QXR0YWNoZWRJdGVtOyBpKyspIHtcbiAgICAvLyBPbmx5IGNhY2hlIHRoZSBoZWlnaHQgaWYgd2UgaGF2ZSB0aGUgcmVhbCBjb250ZW50cywgbm90IGEgcGxhY2Vob2xkZXIuXG4gICAgaWYgKHRoaXMuaXRlbXNbaV0uZGF0YSAmJiAhdGhpcy5pdGVtc1tpXS5oZWlnaHQpIHtcbiAgICAgIHRoaXMuaXRlbXNbaV0uaGVpZ2h0ID0gdGhpcy5pdGVtc1tpXS5ub2RlLm9mZnNldEhlaWdodDtcbiAgICAgIHRoaXMuaXRlbXNbaV0ud2lkdGggPSB0aGlzLml0ZW1zW2ldLm5vZGUub2Zmc2V0V2lkdGg7XG4gICAgfVxuICB9XG59O1xuXG5JbmZpbml0ZVNjcm9sbGVyLnByb3RvdHlwZS5fZml4U2Nyb2xsUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYW5jaG9yU2Nyb2xsVG9wID0gMDtcbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMuYW5jaG9ySXRlbS5pbmRleDsgX2krKykge1xuICAgIHRoaXMuYW5jaG9yU2Nyb2xsVG9wICs9IHRoaXMuaXRlbXNbX2ldLmhlaWdodCB8fCB0aGlzLnRvbWJzdG9uZUhlaWdodDtcbiAgfVxuICB0aGlzLmFuY2hvclNjcm9sbFRvcCArPSB0aGlzLmFuY2hvckl0ZW0ub2Zmc2V0O1xuXG4gIC8vIFBvc2l0aW9uIGFsbCBub2Rlcy5cbiAgdmFyIGN1clBvcyA9IHRoaXMuYW5jaG9yU2Nyb2xsVG9wIC0gdGhpcy5hbmNob3JJdGVtLm9mZnNldDtcbiAgdmFyIGkgPSB0aGlzLmFuY2hvckl0ZW0uaW5kZXg7XG4gIHdoaWxlIChpID4gdGhpcy5maXJzdEF0dGFjaGVkSXRlbSkge1xuICAgIGN1clBvcyAtPSB0aGlzLml0ZW1zW2kgLSAxXS5oZWlnaHQgfHwgdGhpcy50b21ic3RvbmVIZWlnaHQ7XG4gICAgaS0tO1xuICB9XG5cbiAgcmV0dXJuIGN1clBvcztcbn07XG5cbkluZmluaXRlU2Nyb2xsZXIucHJvdG90eXBlLl9zZXR1cEFuaW1hdGlvbnMgPSBmdW5jdGlvbiAodG9tYnN0b25lQW5pbWF0aW9ucywgY3VyUG9zKSB7XG4gIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkgaW4gdG9tYnN0b25lQW5pbWF0aW9ucykge1xuICAgIHZhciBhbmltYXRpb24gPSB0b21ic3RvbmVBbmltYXRpb25zW2ldO1xuICAgIHRoaXMuaXRlbXNbaV0ubm9kZS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgnICsgKHRoaXMuYW5jaG9yU2Nyb2xsVG9wICsgYW5pbWF0aW9uWzFdKSArICdweCkgc2NhbGUoJyArIHRoaXMudG9tYnN0b25lV2lkdGggLyB0aGlzLml0ZW1zW2ldLndpZHRoICsgJywgJyArIHRoaXMudG9tYnN0b25lSGVpZ2h0IC8gdGhpcy5pdGVtc1tpXS5oZWlnaHQgKyAnKSc7XG4gICAgLy8gQ2FsbCBvZmZzZXRUb3Agb24gdGhlIG5vZGVzIHRvIGJlIGFuaW1hdGVkIHRvIGZvcmNlIHRoZW0gdG8gYXBwbHkgY3VycmVudCB0cmFuc2Zvcm1zLlxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIHRoaXMuaXRlbXNbaV0ubm9kZS5vZmZzZXRUb3A7XG4gICAgYW5pbWF0aW9uWzBdLm9mZnNldFRvcDtcbiAgICB0aGlzLml0ZW1zW2ldLm5vZGUuc3R5bGUudHJhbnNpdGlvbiA9ICd0cmFuc2Zvcm0gJyArIEFOSU1BVElPTl9EVVJBVElPTl9NUyArICdtcyc7XG4gIH1cblxuICBmb3IgKHZhciBfaTIgPSB0aGlzLmZpcnN0QXR0YWNoZWRJdGVtOyBfaTIgPCB0aGlzLmxhc3RBdHRhY2hlZEl0ZW07IF9pMisrKSB7XG4gICAgdmFyIF9hbmltYXRpb24gPSB0b21ic3RvbmVBbmltYXRpb25zW19pMl07XG4gICAgaWYgKF9hbmltYXRpb24pIHtcbiAgICAgIHZhciB0b21ic3RvbmVOb2RlID0gX2FuaW1hdGlvblswXTtcbiAgICAgIHRvbWJzdG9uZU5vZGUuc3R5bGUudHJhbnNpdGlvbiA9ICd0cmFuc2Zvcm0gJyArIEFOSU1BVElPTl9EVVJBVElPTl9NUyArICdtcywgb3BhY2l0eSAnICsgQU5JTUFUSU9OX0RVUkFUSU9OX01TICsgJ21zJztcbiAgICAgIHRvbWJzdG9uZU5vZGUuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoJyArIGN1clBvcyArICdweCkgc2NhbGUoJyArIHRoaXMuaXRlbXNbX2kyXS53aWR0aCAvIHRoaXMudG9tYnN0b25lV2lkdGggKyAnLCAnICsgdGhpcy5pdGVtc1tfaTJdLmhlaWdodCAvIHRoaXMudG9tYnN0b25lSGVpZ2h0ICsgJyknO1xuICAgICAgdG9tYnN0b25lTm9kZS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICB9XG4gICAgaWYgKGN1clBvcyAhPT0gdGhpcy5pdGVtc1tfaTJdLnRvcCkge1xuICAgICAgaWYgKCFfYW5pbWF0aW9uKSB7XG4gICAgICAgIHRoaXMuaXRlbXNbX2kyXS5ub2RlLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICAgIH1cbiAgICAgIHRoaXMuaXRlbXNbX2kyXS5ub2RlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKCcgKyBjdXJQb3MgKyAncHgpJztcbiAgICB9XG4gICAgdGhpcy5pdGVtc1tfaTJdLnRvcCA9IGN1clBvcztcbiAgICBjdXJQb3MgKz0gdGhpcy5pdGVtc1tfaTJdLmhlaWdodCB8fCB0aGlzLnRvbWJzdG9uZUhlaWdodDtcbiAgfVxuXG4gIHRoaXMuc2Nyb2xsZXIubWF4U2Nyb2xsWSA9IC0oY3VyUG9zIC0gdGhpcy53cmFwcGVyRWwub2Zmc2V0SGVpZ2h0ICsgKHRoaXMuaGFzTW9yZSA/IERFRkFVTFRfU0NST0xMX1JVTldBWSA6IDApKTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfaTMgaW4gdG9tYnN0b25lQW5pbWF0aW9ucykge1xuICAgICAgdmFyIF9hbmltYXRpb24yID0gdG9tYnN0b25lQW5pbWF0aW9uc1tfaTNdO1xuICAgICAgX2FuaW1hdGlvbjJbMF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIC8vIFRvbWJzdG9uZSBjYW4gYmUgcmVjeWNsZWQgbm93LlxuICAgICAgX3RoaXMzLnRvbWJzdG9uZXMucHVzaChfYW5pbWF0aW9uMlswXSk7XG4gICAgfVxuICB9LCBBTklNQVRJT05fRFVSQVRJT05fTVMpO1xufTtcblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUuX2dldFRvbWJTdG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRvbWJzdG9uZSA9IHRoaXMudG9tYnN0b25lcy5wb3AoKTtcbiAgaWYgKHRvbWJzdG9uZSkge1xuICAgIHRvbWJzdG9uZS5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgdG9tYnN0b25lLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgIHRvbWJzdG9uZS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICB0b21ic3RvbmUuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgIHJldHVybiB0b21ic3RvbmU7XG4gIH1cbiAgcmV0dXJuIHRoaXMub3B0aW9ucy5jcmVhdGVUb21ic3RvbmUoKTtcbn07XG5cbkluZmluaXRlU2Nyb2xsZXIucHJvdG90eXBlLl9hZGRJdGVtID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLml0ZW1zLnB1c2goe1xuICAgIGRhdGE6IG51bGwsXG4gICAgbm9kZTogbnVsbCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgdG9wOiAwXG4gIH0pO1xufTtcblxuSW5maW5pdGVTY3JvbGxlci5wcm90b3R5cGUuX2NhbGN1bGF0ZUFuY2hvcmVkSXRlbSA9IGZ1bmN0aW9uIChpbml0aWFsQW5jaG9yLCBkZWx0YSkge1xuICBpZiAoZGVsdGEgPT09IDApIHtcbiAgICByZXR1cm4gaW5pdGlhbEFuY2hvcjtcbiAgfVxuICB2YXIgaSA9IGluaXRpYWxBbmNob3IuaW5kZXg7XG4gIHZhciB0b21ic3RvbmVzID0gMDtcblxuICBkZWx0YSArPSBpbml0aWFsQW5jaG9yLm9mZnNldDtcbiAgaWYgKGRlbHRhIDwgMCkge1xuICAgIHdoaWxlIChkZWx0YSA8IDAgJiYgaSA+IDAgJiYgdGhpcy5pdGVtc1tpIC0gMV0uaGVpZ2h0KSB7XG4gICAgICBkZWx0YSArPSB0aGlzLml0ZW1zW2kgLSAxXS5oZWlnaHQ7XG4gICAgICBpLS07XG4gICAgfVxuICAgIHRvbWJzdG9uZXMgPSBNYXRoLm1heCgtaSwgTWF0aC5jZWlsKE1hdGgubWluKGRlbHRhLCAwKSAvIHRoaXMudG9tYnN0b25lSGVpZ2h0KSk7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKGRlbHRhID4gMCAmJiBpIDwgdGhpcy5pdGVtcy5sZW5ndGggJiYgdGhpcy5pdGVtc1tpXS5oZWlnaHQgJiYgdGhpcy5pdGVtc1tpXS5oZWlnaHQgPCBkZWx0YSkge1xuICAgICAgZGVsdGEgLT0gdGhpcy5pdGVtc1tpXS5oZWlnaHQ7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGlmIChpID49IHRoaXMuaXRlbXMubGVuZ3RoIHx8ICF0aGlzLml0ZW1zW2ldLmhlaWdodCkge1xuICAgICAgdG9tYnN0b25lcyA9IE1hdGguZmxvb3IoTWF0aC5tYXgoZGVsdGEsIDApIC8gdGhpcy50b21ic3RvbmVIZWlnaHQpO1xuICAgIH1cbiAgfVxuICBpICs9IHRvbWJzdG9uZXM7XG4gIGRlbHRhIC09IHRvbWJzdG9uZXMgKiB0aGlzLnRvbWJzdG9uZUhlaWdodDtcblxuICByZXR1cm4ge1xuICAgIGluZGV4OiBpLFxuICAgIG9mZnNldDogZGVsdGFcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIEJTY3JvbGwoZWwsIG9wdGlvbnMpIHtcbiAgdGhpcy53cmFwcGVyID0gdHlwZW9mIGVsID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpIDogZWw7XG4gIGlmICghdGhpcy53cmFwcGVyKSB7XG4gICAgd2FybignQ2FuIG5vdCByZXNvbHZlIHRoZSB3cmFwcGVyIERPTS4nKTtcbiAgfVxuICB0aGlzLnNjcm9sbGVyID0gdGhpcy53cmFwcGVyLmNoaWxkcmVuWzBdO1xuICBpZiAoIXRoaXMuc2Nyb2xsZXIpIHtcbiAgICB3YXJuKCdUaGUgd3JhcHBlciBuZWVkIGF0IGxlYXN0IG9uZSBjaGlsZCBlbGVtZW50IHRvIGJlIHNjcm9sbGVyLicpO1xuICB9XG4gIC8vIGNhY2hlIHN0eWxlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbiAgdGhpcy5zY3JvbGxlclN0eWxlID0gdGhpcy5zY3JvbGxlci5zdHlsZTtcblxuICB0aGlzLl9pbml0KGVsLCBvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKEJTY3JvbGwpO1xuY29yZU1peGluKEJTY3JvbGwpO1xuZXZlbnRNaXhpbihCU2Nyb2xsKTtcbnNuYXBNaXhpbihCU2Nyb2xsKTtcbndoZWVsTWl4aW4oQlNjcm9sbCk7XG5zY3JvbGxiYXJNaXhpbihCU2Nyb2xsKTtcbnB1bGxEb3duTWl4aW4oQlNjcm9sbCk7XG5wdWxsVXBNaXhpbihCU2Nyb2xsKTtcbm1vdXNlV2hlZWxNaXhpbihCU2Nyb2xsKTtcbnpvb21NaXhpbihCU2Nyb2xsKTtcbmluZmluaXRlTWl4aW4oQlNjcm9sbCk7XG5cbkJTY3JvbGwuVmVyc2lvbiA9ICcxLjEyLjYnO1xuXG5yZXR1cm4gQlNjcm9sbDtcblxufSkpKTtcbiIsIi8qKlxuICogbWFya2VkIC0gYSBtYXJrZG93biBwYXJzZXJcbiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDE4LCBDaHJpc3RvcGhlciBKZWZmcmV5LiAoTUlUIExpY2Vuc2VkKVxuICogaHR0cHM6Ly9naXRodWIuY29tL21hcmtlZGpzL21hcmtlZFxuICovXG5cbjsoZnVuY3Rpb24ocm9vdCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEJsb2NrLUxldmVsIEdyYW1tYXJcbiAqL1xuXG52YXIgYmxvY2sgPSB7XG4gIG5ld2xpbmU6IC9eXFxuKy8sXG4gIGNvZGU6IC9eKCB7NH1bXlxcbl0rXFxuKikrLyxcbiAgZmVuY2VzOiBub29wLFxuICBocjogL14gezAsM30oKD86LSAqKXszLH18KD86XyAqKXszLH18KD86XFwqICopezMsfSkoPzpcXG4rfCQpLyxcbiAgaGVhZGluZzogL14gKigjezEsNn0pICooW15cXG5dKz8pICooPzojKyAqKT8oPzpcXG4rfCQpLyxcbiAgbnB0YWJsZTogbm9vcCxcbiAgYmxvY2txdW90ZTogL14oIHswLDN9PiA/KHBhcmFncmFwaHxbXlxcbl0qKSg/OlxcbnwkKSkrLyxcbiAgbGlzdDogL14oICopKGJ1bGwpIFtcXHNcXFNdKz8oPzpocnxkZWZ8XFxuezIsfSg/ISApKD8hXFwxYnVsbCApXFxuKnxcXHMqJCkvLFxuICBodG1sOiAnXiB7MCwzfSg/OicgLy8gb3B0aW9uYWwgaW5kZW50YXRpb25cbiAgICArICc8KHNjcmlwdHxwcmV8c3R5bGUpW1xcXFxzPl1bXFxcXHNcXFxcU10qPyg/OjwvXFxcXDE+W15cXFxcbl0qXFxcXG4rfCQpJyAvLyAoMSlcbiAgICArICd8Y29tbWVudFteXFxcXG5dKihcXFxcbit8JCknIC8vICgyKVxuICAgICsgJ3w8XFxcXD9bXFxcXHNcXFxcU10qP1xcXFw/PlxcXFxuKicgLy8gKDMpXG4gICAgKyAnfDwhW0EtWl1bXFxcXHNcXFxcU10qPz5cXFxcbionIC8vICg0KVxuICAgICsgJ3w8IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT5cXFxcbionIC8vICg1KVxuICAgICsgJ3w8Lz8odGFnKSg/OiArfFxcXFxufC8/PilbXFxcXHNcXFxcU10qPyg/OlxcXFxuezIsfXwkKScgLy8gKDYpXG4gICAgKyAnfDwoPyFzY3JpcHR8cHJlfHN0eWxlKShbYS16XVtcXFxcdy1dKikoPzphdHRyaWJ1dGUpKj8gKi8/Pig/PVxcXFxoKlxcXFxuKVtcXFxcc1xcXFxTXSo/KD86XFxcXG57Mix9fCQpJyAvLyAoNykgb3BlbiB0YWdcbiAgICArICd8PC8oPyFzY3JpcHR8cHJlfHN0eWxlKVthLXpdW1xcXFx3LV0qXFxcXHMqPig/PVxcXFxoKlxcXFxuKVtcXFxcc1xcXFxTXSo/KD86XFxcXG57Mix9fCQpJyAvLyAoNykgY2xvc2luZyB0YWdcbiAgICArICcpJyxcbiAgZGVmOiAvXiB7MCwzfVxcWyhsYWJlbClcXF06ICpcXG4/ICo8PyhbXlxccz5dKyk+Pyg/Oig/OiArXFxuPyAqfCAqXFxuICopKHRpdGxlKSk/ICooPzpcXG4rfCQpLyxcbiAgdGFibGU6IG5vb3AsXG4gIGxoZWFkaW5nOiAvXihbXlxcbl0rKVxcbiAqKD18LSl7Mix9ICooPzpcXG4rfCQpLyxcbiAgcGFyYWdyYXBoOiAvXihbXlxcbl0rKD86XFxuKD8haHJ8aGVhZGluZ3xsaGVhZGluZ3wgezAsM30+fDxcXC8/KD86dGFnKSg/OiArfFxcbnxcXC8/Pil8PCg/OnNjcmlwdHxwcmV8c3R5bGV8IS0tKSlbXlxcbl0rKSopLyxcbiAgdGV4dDogL15bXlxcbl0rL1xufTtcblxuYmxvY2suX2xhYmVsID0gLyg/IVxccypcXF0pKD86XFxcXFtcXFtcXF1dfFteXFxbXFxdXSkrLztcbmJsb2NrLl90aXRsZSA9IC8oPzpcIig/OlxcXFxcIj98W15cIlxcXFxdKSpcInwnW14nXFxuXSooPzpcXG5bXidcXG5dKykqXFxuPyd8XFwoW14oKV0qXFwpKS87XG5ibG9jay5kZWYgPSBlZGl0KGJsb2NrLmRlZilcbiAgLnJlcGxhY2UoJ2xhYmVsJywgYmxvY2suX2xhYmVsKVxuICAucmVwbGFjZSgndGl0bGUnLCBibG9jay5fdGl0bGUpXG4gIC5nZXRSZWdleCgpO1xuXG5ibG9jay5idWxsZXQgPSAvKD86WyorLV18XFxkK1xcLikvO1xuYmxvY2suaXRlbSA9IC9eKCAqKShidWxsKSBbXlxcbl0qKD86XFxuKD8hXFwxYnVsbCApW15cXG5dKikqLztcbmJsb2NrLml0ZW0gPSBlZGl0KGJsb2NrLml0ZW0sICdnbScpXG4gIC5yZXBsYWNlKC9idWxsL2csIGJsb2NrLmJ1bGxldClcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmxpc3QgPSBlZGl0KGJsb2NrLmxpc3QpXG4gIC5yZXBsYWNlKC9idWxsL2csIGJsb2NrLmJ1bGxldClcbiAgLnJlcGxhY2UoJ2hyJywgJ1xcXFxuKyg/PVxcXFwxPyg/Oig/Oi0gKil7Myx9fCg/Ol8gKil7Myx9fCg/OlxcXFwqICopezMsfSkoPzpcXFxcbit8JCkpJylcbiAgLnJlcGxhY2UoJ2RlZicsICdcXFxcbisoPz0nICsgYmxvY2suZGVmLnNvdXJjZSArICcpJylcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLl90YWcgPSAnYWRkcmVzc3xhcnRpY2xlfGFzaWRlfGJhc2V8YmFzZWZvbnR8YmxvY2txdW90ZXxib2R5fGNhcHRpb24nXG4gICsgJ3xjZW50ZXJ8Y29sfGNvbGdyb3VwfGRkfGRldGFpbHN8ZGlhbG9nfGRpcnxkaXZ8ZGx8ZHR8ZmllbGRzZXR8ZmlnY2FwdGlvbidcbiAgKyAnfGZpZ3VyZXxmb290ZXJ8Zm9ybXxmcmFtZXxmcmFtZXNldHxoWzEtNl18aGVhZHxoZWFkZXJ8aHJ8aHRtbHxpZnJhbWUnXG4gICsgJ3xsZWdlbmR8bGl8bGlua3xtYWlufG1lbnV8bWVudWl0ZW18bWV0YXxuYXZ8bm9mcmFtZXN8b2x8b3B0Z3JvdXB8b3B0aW9uJ1xuICArICd8cHxwYXJhbXxzZWN0aW9ufHNvdXJjZXxzdW1tYXJ5fHRhYmxlfHRib2R5fHRkfHRmb290fHRofHRoZWFkfHRpdGxlfHRyJ1xuICArICd8dHJhY2t8dWwnO1xuYmxvY2suX2NvbW1lbnQgPSAvPCEtLSg/IS0/PilbXFxzXFxTXSo/LS0+LztcbmJsb2NrLmh0bWwgPSBlZGl0KGJsb2NrLmh0bWwsICdpJylcbiAgLnJlcGxhY2UoJ2NvbW1lbnQnLCBibG9jay5fY29tbWVudClcbiAgLnJlcGxhY2UoJ3RhZycsIGJsb2NrLl90YWcpXG4gIC5yZXBsYWNlKCdhdHRyaWJ1dGUnLCAvICtbYS16QS1aOl9dW1xcdy46LV0qKD86ICo9ICpcIlteXCJcXG5dKlwifCAqPSAqJ1teJ1xcbl0qJ3wgKj0gKlteXFxzXCInPTw+YF0rKT8vKVxuICAuZ2V0UmVnZXgoKTtcblxuYmxvY2sucGFyYWdyYXBoID0gZWRpdChibG9jay5wYXJhZ3JhcGgpXG4gIC5yZXBsYWNlKCdocicsIGJsb2NrLmhyKVxuICAucmVwbGFjZSgnaGVhZGluZycsIGJsb2NrLmhlYWRpbmcpXG4gIC5yZXBsYWNlKCdsaGVhZGluZycsIGJsb2NrLmxoZWFkaW5nKVxuICAucmVwbGFjZSgndGFnJywgYmxvY2suX3RhZykgLy8gcGFycyBjYW4gYmUgaW50ZXJydXB0ZWQgYnkgdHlwZSAoNikgaHRtbCBibG9ja3NcbiAgLmdldFJlZ2V4KCk7XG5cbmJsb2NrLmJsb2NrcXVvdGUgPSBlZGl0KGJsb2NrLmJsb2NrcXVvdGUpXG4gIC5yZXBsYWNlKCdwYXJhZ3JhcGgnLCBibG9jay5wYXJhZ3JhcGgpXG4gIC5nZXRSZWdleCgpO1xuXG4vKipcbiAqIE5vcm1hbCBCbG9jayBHcmFtbWFyXG4gKi9cblxuYmxvY2subm9ybWFsID0gbWVyZ2Uoe30sIGJsb2NrKTtcblxuLyoqXG4gKiBHRk0gQmxvY2sgR3JhbW1hclxuICovXG5cbmJsb2NrLmdmbSA9IG1lcmdlKHt9LCBibG9jay5ub3JtYWwsIHtcbiAgZmVuY2VzOiAvXiAqKGB7Myx9fH57Myx9KVsgXFwuXSooXFxTKyk/ICpcXG4oW1xcc1xcU10qPylcXG4/ICpcXDEgKig/Olxcbit8JCkvLFxuICBwYXJhZ3JhcGg6IC9eLyxcbiAgaGVhZGluZzogL14gKigjezEsNn0pICsoW15cXG5dKz8pICojKiAqKD86XFxuK3wkKS9cbn0pO1xuXG5ibG9jay5nZm0ucGFyYWdyYXBoID0gZWRpdChibG9jay5wYXJhZ3JhcGgpXG4gIC5yZXBsYWNlKCcoPyEnLCAnKD8hJ1xuICAgICsgYmxvY2suZ2ZtLmZlbmNlcy5zb3VyY2UucmVwbGFjZSgnXFxcXDEnLCAnXFxcXDInKSArICd8J1xuICAgICsgYmxvY2subGlzdC5zb3VyY2UucmVwbGFjZSgnXFxcXDEnLCAnXFxcXDMnKSArICd8JylcbiAgLmdldFJlZ2V4KCk7XG5cbi8qKlxuICogR0ZNICsgVGFibGVzIEJsb2NrIEdyYW1tYXJcbiAqL1xuXG5ibG9jay50YWJsZXMgPSBtZXJnZSh7fSwgYmxvY2suZ2ZtLCB7XG4gIG5wdGFibGU6IC9eICooW158XFxuIF0uKlxcfC4qKVxcbiAqKFstOl0rICpcXHxbLXwgOl0qKSg/OlxcbigoPzouKltePlxcbiBdLiooPzpcXG58JCkpKilcXG4qfCQpLyxcbiAgdGFibGU6IC9eICpcXHwoLispXFxuICpcXHw/KCAqWy06XStbLXwgOl0qKSg/OlxcbigoPzogKltePlxcbiBdLiooPzpcXG58JCkpKilcXG4qfCQpL1xufSk7XG5cbi8qKlxuICogUGVkYW50aWMgZ3JhbW1hclxuICovXG5cbmJsb2NrLnBlZGFudGljID0gbWVyZ2Uoe30sIGJsb2NrLm5vcm1hbCwge1xuICBodG1sOiBlZGl0KFxuICAgICdeICooPzpjb21tZW50ICooPzpcXFxcbnxcXFxccyokKSdcbiAgICArICd8PCh0YWcpW1xcXFxzXFxcXFNdKz88L1xcXFwxPiAqKD86XFxcXG57Mix9fFxcXFxzKiQpJyAvLyBjbG9zZWQgdGFnXG4gICAgKyAnfDx0YWcoPzpcIlteXCJdKlwifFxcJ1teXFwnXSpcXCd8XFxcXHNbXlxcJ1wiLz5cXFxcc10qKSo/Lz8+ICooPzpcXFxcbnsyLH18XFxcXHMqJCkpJylcbiAgICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAgIC5yZXBsYWNlKC90YWcvZywgJyg/ISg/OidcbiAgICAgICsgJ2F8ZW18c3Ryb25nfHNtYWxsfHN8Y2l0ZXxxfGRmbnxhYmJyfGRhdGF8dGltZXxjb2RlfHZhcnxzYW1wfGtiZHxzdWInXG4gICAgICArICd8c3VwfGl8Ynx1fG1hcmt8cnVieXxydHxycHxiZGl8YmRvfHNwYW58YnJ8d2JyfGluc3xkZWx8aW1nKSdcbiAgICAgICsgJ1xcXFxiKVxcXFx3Kyg/ITp8W15cXFxcd1xcXFxzQF0qQClcXFxcYicpXG4gICAgLmdldFJlZ2V4KCksXG4gIGRlZjogL14gKlxcWyhbXlxcXV0rKVxcXTogKjw/KFteXFxzPl0rKT4/KD86ICsoW1wiKF1bXlxcbl0rW1wiKV0pKT8gKig/Olxcbit8JCkvXG59KTtcblxuLyoqXG4gKiBCbG9jayBMZXhlclxuICovXG5cbmZ1bmN0aW9uIExleGVyKG9wdGlvbnMpIHtcbiAgdGhpcy50b2tlbnMgPSBbXTtcbiAgdGhpcy50b2tlbnMubGlua3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0cztcbiAgdGhpcy5ydWxlcyA9IGJsb2NrLm5vcm1hbDtcblxuICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgdGhpcy5ydWxlcyA9IGJsb2NrLnBlZGFudGljO1xuICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5nZm0pIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRhYmxlcykge1xuICAgICAgdGhpcy5ydWxlcyA9IGJsb2NrLnRhYmxlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydWxlcyA9IGJsb2NrLmdmbTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBFeHBvc2UgQmxvY2sgUnVsZXNcbiAqL1xuXG5MZXhlci5ydWxlcyA9IGJsb2NrO1xuXG4vKipcbiAqIFN0YXRpYyBMZXggTWV0aG9kXG4gKi9cblxuTGV4ZXIubGV4ID0gZnVuY3Rpb24oc3JjLCBvcHRpb25zKSB7XG4gIHZhciBsZXhlciA9IG5ldyBMZXhlcihvcHRpb25zKTtcbiAgcmV0dXJuIGxleGVyLmxleChzcmMpO1xufTtcblxuLyoqXG4gKiBQcmVwcm9jZXNzaW5nXG4gKi9cblxuTGV4ZXIucHJvdG90eXBlLmxleCA9IGZ1bmN0aW9uKHNyYykge1xuICBzcmMgPSBzcmNcbiAgICAucmVwbGFjZSgvXFxyXFxufFxcci9nLCAnXFxuJylcbiAgICAucmVwbGFjZSgvXFx0L2csICcgICAgJylcbiAgICAucmVwbGFjZSgvXFx1MDBhMC9nLCAnICcpXG4gICAgLnJlcGxhY2UoL1xcdTI0MjQvZywgJ1xcbicpO1xuXG4gIHJldHVybiB0aGlzLnRva2VuKHNyYywgdHJ1ZSk7XG59O1xuXG4vKipcbiAqIExleGluZ1xuICovXG5cbkxleGVyLnByb3RvdHlwZS50b2tlbiA9IGZ1bmN0aW9uKHNyYywgdG9wKSB7XG4gIHNyYyA9IHNyYy5yZXBsYWNlKC9eICskL2dtLCAnJyk7XG4gIHZhciBuZXh0LFxuICAgICAgbG9vc2UsXG4gICAgICBjYXAsXG4gICAgICBidWxsLFxuICAgICAgYixcbiAgICAgIGl0ZW0sXG4gICAgICBsaXN0U3RhcnQsXG4gICAgICBsaXN0SXRlbXMsXG4gICAgICB0LFxuICAgICAgc3BhY2UsXG4gICAgICBpLFxuICAgICAgdGFnLFxuICAgICAgbCxcbiAgICAgIGlzb3JkZXJlZCxcbiAgICAgIGlzdGFzayxcbiAgICAgIGlzY2hlY2tlZDtcblxuICB3aGlsZSAoc3JjKSB7XG4gICAgLy8gbmV3bGluZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLm5ld2xpbmUuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgaWYgKGNhcFswXS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdzcGFjZSdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29kZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmNvZGUuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgY2FwID0gY2FwWzBdLnJlcGxhY2UoL14gezR9L2dtLCAnJyk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICB0ZXh0OiAhdGhpcy5vcHRpb25zLnBlZGFudGljXG4gICAgICAgICAgPyBydHJpbShjYXAsICdcXG4nKVxuICAgICAgICAgIDogY2FwXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGZlbmNlcyAoZ2ZtKVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmZlbmNlcy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgICBsYW5nOiBjYXBbMl0sXG4gICAgICAgIHRleHQ6IGNhcFszXSB8fCAnJ1xuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBoZWFkaW5nXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuaGVhZGluZy5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2hlYWRpbmcnLFxuICAgICAgICBkZXB0aDogY2FwWzFdLmxlbmd0aCxcbiAgICAgICAgdGV4dDogY2FwWzJdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRhYmxlIG5vIGxlYWRpbmcgcGlwZSAoZ2ZtKVxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMubnB0YWJsZS5leGVjKHNyYykpKSB7XG4gICAgICBpdGVtID0ge1xuICAgICAgICB0eXBlOiAndGFibGUnLFxuICAgICAgICBoZWFkZXI6IHNwbGl0Q2VsbHMoY2FwWzFdLnJlcGxhY2UoL14gKnwgKlxcfCAqJC9nLCAnJykpLFxuICAgICAgICBhbGlnbjogY2FwWzJdLnJlcGxhY2UoL14gKnxcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIGNlbGxzOiBjYXBbM10gPyBjYXBbM10ucmVwbGFjZSgvXFxuJC8sICcnKS5zcGxpdCgnXFxuJykgOiBbXVxuICAgICAgfTtcblxuICAgICAgaWYgKGl0ZW0uaGVhZGVyLmxlbmd0aCA9PT0gaXRlbS5hbGlnbi5sZW5ndGgpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5hbGlnbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICgvXiAqLSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ3JpZ2h0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2NlbnRlcic7XG4gICAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2xlZnQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGl0ZW0uY2VsbHNbaV0gPSBzcGxpdENlbGxzKGl0ZW0uY2VsbHNbaV0sIGl0ZW0uaGVhZGVyLmxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKGl0ZW0pO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGhyXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuaHIuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdocidcbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYmxvY2txdW90ZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmJsb2NrcXVvdGUuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2Jsb2NrcXVvdGVfc3RhcnQnXG4gICAgICB9KTtcblxuICAgICAgY2FwID0gY2FwWzBdLnJlcGxhY2UoL14gKj4gPy9nbSwgJycpO1xuXG4gICAgICAvLyBQYXNzIGB0b3BgIHRvIGtlZXAgdGhlIGN1cnJlbnRcbiAgICAgIC8vIFwidG9wbGV2ZWxcIiBzdGF0ZS4gVGhpcyBpcyBleGFjdGx5XG4gICAgICAvLyBob3cgbWFya2Rvd24ucGwgd29ya3MuXG4gICAgICB0aGlzLnRva2VuKGNhcCwgdG9wKTtcblxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdibG9ja3F1b3RlX2VuZCdcbiAgICAgIH0pO1xuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBsaXN0XG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubGlzdC5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBidWxsID0gY2FwWzJdO1xuICAgICAgaXNvcmRlcmVkID0gYnVsbC5sZW5ndGggPiAxO1xuXG4gICAgICBsaXN0U3RhcnQgPSB7XG4gICAgICAgIHR5cGU6ICdsaXN0X3N0YXJ0JyxcbiAgICAgICAgb3JkZXJlZDogaXNvcmRlcmVkLFxuICAgICAgICBzdGFydDogaXNvcmRlcmVkID8gK2J1bGwgOiAnJyxcbiAgICAgICAgbG9vc2U6IGZhbHNlXG4gICAgICB9O1xuXG4gICAgICB0aGlzLnRva2Vucy5wdXNoKGxpc3RTdGFydCk7XG5cbiAgICAgIC8vIEdldCBlYWNoIHRvcC1sZXZlbCBpdGVtLlxuICAgICAgY2FwID0gY2FwWzBdLm1hdGNoKHRoaXMucnVsZXMuaXRlbSk7XG5cbiAgICAgIGxpc3RJdGVtcyA9IFtdO1xuICAgICAgbmV4dCA9IGZhbHNlO1xuICAgICAgbCA9IGNhcC5sZW5ndGg7XG4gICAgICBpID0gMDtcblxuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaXRlbSA9IGNhcFtpXTtcblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGxpc3QgaXRlbSdzIGJ1bGxldFxuICAgICAgICAvLyBzbyBpdCBpcyBzZWVuIGFzIHRoZSBuZXh0IHRva2VuLlxuICAgICAgICBzcGFjZSA9IGl0ZW0ubGVuZ3RoO1xuICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9eICooWyorLV18XFxkK1xcLikgKy8sICcnKTtcblxuICAgICAgICAvLyBPdXRkZW50IHdoYXRldmVyIHRoZVxuICAgICAgICAvLyBsaXN0IGl0ZW0gY29udGFpbnMuIEhhY2t5LlxuICAgICAgICBpZiAofml0ZW0uaW5kZXhPZignXFxuICcpKSB7XG4gICAgICAgICAgc3BhY2UgLT0gaXRlbS5sZW5ndGg7XG4gICAgICAgICAgaXRlbSA9ICF0aGlzLm9wdGlvbnMucGVkYW50aWNcbiAgICAgICAgICAgID8gaXRlbS5yZXBsYWNlKG5ldyBSZWdFeHAoJ14gezEsJyArIHNwYWNlICsgJ30nLCAnZ20nKSwgJycpXG4gICAgICAgICAgICA6IGl0ZW0ucmVwbGFjZSgvXiB7MSw0fS9nbSwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG5leHQgbGlzdCBpdGVtIGJlbG9uZ3MgaGVyZS5cbiAgICAgICAgLy8gQmFja3BlZGFsIGlmIGl0IGRvZXMgbm90IGJlbG9uZyBpbiB0aGlzIGxpc3QuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc21hcnRMaXN0cyAmJiBpICE9PSBsIC0gMSkge1xuICAgICAgICAgIGIgPSBibG9jay5idWxsZXQuZXhlYyhjYXBbaSArIDFdKVswXTtcbiAgICAgICAgICBpZiAoYnVsbCAhPT0gYiAmJiAhKGJ1bGwubGVuZ3RoID4gMSAmJiBiLmxlbmd0aCA+IDEpKSB7XG4gICAgICAgICAgICBzcmMgPSBjYXAuc2xpY2UoaSArIDEpLmpvaW4oJ1xcbicpICsgc3JjO1xuICAgICAgICAgICAgaSA9IGwgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIGl0ZW0gaXMgbG9vc2Ugb3Igbm90LlxuICAgICAgICAvLyBVc2U6IC8oXnxcXG4pKD8hIClbXlxcbl0rXFxuXFxuKD8hXFxzKiQpL1xuICAgICAgICAvLyBmb3IgZGlzY291bnQgYmVoYXZpb3IuXG4gICAgICAgIGxvb3NlID0gbmV4dCB8fCAvXFxuXFxuKD8hXFxzKiQpLy50ZXN0KGl0ZW0pO1xuICAgICAgICBpZiAoaSAhPT0gbCAtIDEpIHtcbiAgICAgICAgICBuZXh0ID0gaXRlbS5jaGFyQXQoaXRlbS5sZW5ndGggLSAxKSA9PT0gJ1xcbic7XG4gICAgICAgICAgaWYgKCFsb29zZSkgbG9vc2UgPSBuZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxvb3NlKSB7XG4gICAgICAgICAgbGlzdFN0YXJ0Lmxvb3NlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciB0YXNrIGxpc3QgaXRlbXNcbiAgICAgICAgaXN0YXNrID0gL15cXFtbIHhYXVxcXSAvLnRlc3QoaXRlbSk7XG4gICAgICAgIGlzY2hlY2tlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGlzdGFzaykge1xuICAgICAgICAgIGlzY2hlY2tlZCA9IGl0ZW1bMV0gIT09ICcgJztcbiAgICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9eXFxbWyB4WF1cXF0gKy8sICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHQgPSB7XG4gICAgICAgICAgdHlwZTogJ2xpc3RfaXRlbV9zdGFydCcsXG4gICAgICAgICAgdGFzazogaXN0YXNrLFxuICAgICAgICAgIGNoZWNrZWQ6IGlzY2hlY2tlZCxcbiAgICAgICAgICBsb29zZTogbG9vc2VcbiAgICAgICAgfTtcblxuICAgICAgICBsaXN0SXRlbXMucHVzaCh0KTtcbiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh0KTtcblxuICAgICAgICAvLyBSZWN1cnNlLlxuICAgICAgICB0aGlzLnRva2VuKGl0ZW0sIGZhbHNlKTtcblxuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnbGlzdF9pdGVtX2VuZCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaXN0U3RhcnQubG9vc2UpIHtcbiAgICAgICAgbCA9IGxpc3RJdGVtcy5sZW5ndGg7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGxpc3RJdGVtc1tpXS5sb29zZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdsaXN0X2VuZCdcbiAgICAgIH0pO1xuXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBodG1sXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuaHRtbC5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogdGhpcy5vcHRpb25zLnNhbml0aXplXG4gICAgICAgICAgPyAncGFyYWdyYXBoJ1xuICAgICAgICAgIDogJ2h0bWwnLFxuICAgICAgICBwcmU6ICF0aGlzLm9wdGlvbnMuc2FuaXRpemVyXG4gICAgICAgICAgJiYgKGNhcFsxXSA9PT0gJ3ByZScgfHwgY2FwWzFdID09PSAnc2NyaXB0JyB8fCBjYXBbMV0gPT09ICdzdHlsZScpLFxuICAgICAgICB0ZXh0OiBjYXBbMF1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZGVmXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5kZWYuZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGlmIChjYXBbM10pIGNhcFszXSA9IGNhcFszXS5zdWJzdHJpbmcoMSwgY2FwWzNdLmxlbmd0aCAtIDEpO1xuICAgICAgdGFnID0gY2FwWzFdLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgaWYgKCF0aGlzLnRva2Vucy5saW5rc1t0YWddKSB7XG4gICAgICAgIHRoaXMudG9rZW5zLmxpbmtzW3RhZ10gPSB7XG4gICAgICAgICAgaHJlZjogY2FwWzJdLFxuICAgICAgICAgIHRpdGxlOiBjYXBbM11cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRhYmxlIChnZm0pXG4gICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy50YWJsZS5leGVjKHNyYykpKSB7XG4gICAgICBpdGVtID0ge1xuICAgICAgICB0eXBlOiAndGFibGUnLFxuICAgICAgICBoZWFkZXI6IHNwbGl0Q2VsbHMoY2FwWzFdLnJlcGxhY2UoL14gKnwgKlxcfCAqJC9nLCAnJykpLFxuICAgICAgICBhbGlnbjogY2FwWzJdLnJlcGxhY2UoL14gKnxcXHwgKiQvZywgJycpLnNwbGl0KC8gKlxcfCAqLyksXG4gICAgICAgIGNlbGxzOiBjYXBbM10gPyBjYXBbM10ucmVwbGFjZSgvKD86ICpcXHwgKik/XFxuJC8sICcnKS5zcGxpdCgnXFxuJykgOiBbXVxuICAgICAgfTtcblxuICAgICAgaWYgKGl0ZW0uaGVhZGVyLmxlbmd0aCA9PT0gaXRlbS5hbGlnbi5sZW5ndGgpIHtcbiAgICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5hbGlnbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICgvXiAqLSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ3JpZ2h0JztcbiAgICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2NlbnRlcic7XG4gICAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2xlZnQnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5jZWxscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGl0ZW0uY2VsbHNbaV0gPSBzcGxpdENlbGxzKFxuICAgICAgICAgICAgaXRlbS5jZWxsc1tpXS5yZXBsYWNlKC9eICpcXHwgKnwgKlxcfCAqJC9nLCAnJyksXG4gICAgICAgICAgICBpdGVtLmhlYWRlci5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2tlbnMucHVzaChpdGVtKTtcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBsaGVhZGluZ1xuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxoZWFkaW5nLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgICAgIGRlcHRoOiBjYXBbMl0gPT09ICc9JyA/IDEgOiAyLFxuICAgICAgICB0ZXh0OiBjYXBbMV1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gdG9wLWxldmVsIHBhcmFncmFwaFxuICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMucGFyYWdyYXBoLmV4ZWMoc3JjKSkpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgIHRleHQ6IGNhcFsxXS5jaGFyQXQoY2FwWzFdLmxlbmd0aCAtIDEpID09PSAnXFxuJ1xuICAgICAgICAgID8gY2FwWzFdLnNsaWNlKDAsIC0xKVxuICAgICAgICAgIDogY2FwWzFdXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHRleHRcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkge1xuICAgICAgLy8gVG9wLWxldmVsIHNob3VsZCBuZXZlciByZWFjaCBoZXJlLlxuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHRleHQ6IGNhcFswXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoc3JjKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3Agb24gYnl0ZTogJyArIHNyYy5jaGFyQ29kZUF0KDApKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcy50b2tlbnM7XG59O1xuXG4vKipcbiAqIElubGluZS1MZXZlbCBHcmFtbWFyXG4gKi9cblxudmFyIGlubGluZSA9IHtcbiAgZXNjYXBlOiAvXlxcXFwoWyFcIiMkJSYnKCkqKyxcXC0uLzo7PD0+P0BcXFtcXF1cXFxcXl9ge3x9fl0pLyxcbiAgYXV0b2xpbms6IC9ePChzY2hlbWU6W15cXHNcXHgwMC1cXHgxZjw+XSp8ZW1haWwpPi8sXG4gIHVybDogbm9vcCxcbiAgdGFnOiAnXmNvbW1lbnQnXG4gICAgKyAnfF48L1thLXpBLVpdW1xcXFx3Oi1dKlxcXFxzKj4nIC8vIHNlbGYtY2xvc2luZyB0YWdcbiAgICArICd8XjxbYS16QS1aXVtcXFxcdy1dKig/OmF0dHJpYnV0ZSkqP1xcXFxzKi8/PicgLy8gb3BlbiB0YWdcbiAgICArICd8XjxcXFxcP1tcXFxcc1xcXFxTXSo/XFxcXD8+JyAvLyBwcm9jZXNzaW5nIGluc3RydWN0aW9uLCBlLmcuIDw/cGhwID8+XG4gICAgKyAnfF48IVthLXpBLVpdK1xcXFxzW1xcXFxzXFxcXFNdKj8+JyAvLyBkZWNsYXJhdGlvbiwgZS5nLiA8IURPQ1RZUEUgaHRtbD5cbiAgICArICd8XjwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj9cXFxcXVxcXFxdPicsIC8vIENEQVRBIHNlY3Rpb25cbiAgbGluazogL14hP1xcWyhsYWJlbClcXF1cXChocmVmKD86XFxzKyh0aXRsZSkpP1xccypcXCkvLFxuICByZWZsaW5rOiAvXiE/XFxbKGxhYmVsKVxcXVxcWyg/IVxccypcXF0pKCg/OlxcXFxbXFxbXFxdXT98W15cXFtcXF1cXFxcXSkrKVxcXS8sXG4gIG5vbGluazogL14hP1xcWyg/IVxccypcXF0pKCg/OlxcW1teXFxbXFxdXSpcXF18XFxcXFtcXFtcXF1dfFteXFxbXFxdXSkqKVxcXSg/OlxcW1xcXSk/LyxcbiAgc3Ryb25nOiAvXl9fKFteXFxzXSlfXyg/IV8pfF5cXCpcXCooW15cXHNdKVxcKlxcKig/IVxcKil8Xl9fKFteXFxzXVtcXHNcXFNdKj9bXlxcc10pX18oPyFfKXxeXFwqXFwqKFteXFxzXVtcXHNcXFNdKj9bXlxcc10pXFwqXFwqKD8hXFwqKS8sXG4gIGVtOiAvXl8oW15cXHNfXSlfKD8hXyl8XlxcKihbXlxccypcIjxcXFtdKVxcKig/IVxcKil8Xl8oW15cXHNdW1xcc1xcU10qP1teXFxzX10pXyg/IV98W15cXHMuXSl8Xl8oW15cXHNfXVtcXHNcXFNdKj9bXlxcc10pXyg/IV98W15cXHMuXSl8XlxcKihbXlxcc1wiPFxcW11bXFxzXFxTXSo/W15cXHMqXSlcXCooPyFcXCopfF5cXCooW15cXHMqXCI8XFxbXVtcXHNcXFNdKj9bXlxcc10pXFwqKD8hXFwqKS8sXG4gIGNvZGU6IC9eKGArKShbXmBdfFteYF1bXFxzXFxTXSo/W15gXSlcXDEoPyFgKS8sXG4gIGJyOiAvXiggezIsfXxcXFxcKVxcbig/IVxccyokKS8sXG4gIGRlbDogbm9vcCxcbiAgdGV4dDogL14oYCt8W15gXSlbXFxzXFxTXSo/KD89W1xcXFw8IVxcW2AqXXxcXGJffCB7Mix9XFxufCQpL1xufTtcblxuaW5saW5lLl9lc2NhcGVzID0gL1xcXFwoWyFcIiMkJSYnKCkqKyxcXC0uLzo7PD0+P0BcXFtcXF1cXFxcXl9ge3x9fl0pL2c7XG5cbmlubGluZS5fc2NoZW1lID0gL1thLXpBLVpdW2EtekEtWjAtOSsuLV17MSwzMX0vO1xuaW5saW5lLl9lbWFpbCA9IC9bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dKyhAKVthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrKD8hWy1fXSkvO1xuaW5saW5lLmF1dG9saW5rID0gZWRpdChpbmxpbmUuYXV0b2xpbmspXG4gIC5yZXBsYWNlKCdzY2hlbWUnLCBpbmxpbmUuX3NjaGVtZSlcbiAgLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLl9lbWFpbClcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5fYXR0cmlidXRlID0gL1xccytbYS16QS1aOl9dW1xcdy46LV0qKD86XFxzKj1cXHMqXCJbXlwiXSpcInxcXHMqPVxccyonW14nXSonfFxccyo9XFxzKlteXFxzXCInPTw+YF0rKT8vO1xuXG5pbmxpbmUudGFnID0gZWRpdChpbmxpbmUudGFnKVxuICAucmVwbGFjZSgnY29tbWVudCcsIGJsb2NrLl9jb21tZW50KVxuICAucmVwbGFjZSgnYXR0cmlidXRlJywgaW5saW5lLl9hdHRyaWJ1dGUpXG4gIC5nZXRSZWdleCgpO1xuXG5pbmxpbmUuX2xhYmVsID0gLyg/OlxcW1teXFxbXFxdXSpcXF18XFxcXFtcXFtcXF1dP3xgW15gXSpgfFteXFxbXFxdXFxcXF0pKj8vO1xuaW5saW5lLl9ocmVmID0gL1xccyooPCg/OlxcXFxbPD5dP3xbXlxcczw+XFxcXF0pKj58KD86XFxcXFsoKV0/fFxcKFteXFxzXFx4MDAtXFx4MWZcXFxcXSpcXCl8W15cXHNcXHgwMC1cXHgxZigpXFxcXF0pKj8pLztcbmlubGluZS5fdGl0bGUgPSAvXCIoPzpcXFxcXCI/fFteXCJcXFxcXSkqXCJ8Jyg/OlxcXFwnP3xbXidcXFxcXSkqJ3xcXCgoPzpcXFxcXFwpP3xbXilcXFxcXSkqXFwpLztcblxuaW5saW5lLmxpbmsgPSBlZGl0KGlubGluZS5saW5rKVxuICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAucmVwbGFjZSgnaHJlZicsIGlubGluZS5faHJlZilcbiAgLnJlcGxhY2UoJ3RpdGxlJywgaW5saW5lLl90aXRsZSlcbiAgLmdldFJlZ2V4KCk7XG5cbmlubGluZS5yZWZsaW5rID0gZWRpdChpbmxpbmUucmVmbGluaylcbiAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgLmdldFJlZ2V4KCk7XG5cbi8qKlxuICogTm9ybWFsIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLm5vcm1hbCA9IG1lcmdlKHt9LCBpbmxpbmUpO1xuXG4vKipcbiAqIFBlZGFudGljIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLnBlZGFudGljID0gbWVyZ2Uoe30sIGlubGluZS5ub3JtYWwsIHtcbiAgc3Ryb25nOiAvXl9fKD89XFxTKShbXFxzXFxTXSo/XFxTKV9fKD8hXyl8XlxcKlxcKig/PVxcUykoW1xcc1xcU10qP1xcUylcXCpcXCooPyFcXCopLyxcbiAgZW06IC9eXyg/PVxcUykoW1xcc1xcU10qP1xcUylfKD8hXyl8XlxcKig/PVxcUykoW1xcc1xcU10qP1xcUylcXCooPyFcXCopLyxcbiAgbGluazogZWRpdCgvXiE/XFxbKGxhYmVsKVxcXVxcKCguKj8pXFwpLylcbiAgICAucmVwbGFjZSgnbGFiZWwnLCBpbmxpbmUuX2xhYmVsKVxuICAgIC5nZXRSZWdleCgpLFxuICByZWZsaW5rOiBlZGl0KC9eIT9cXFsobGFiZWwpXFxdXFxzKlxcWyhbXlxcXV0qKVxcXS8pXG4gICAgLnJlcGxhY2UoJ2xhYmVsJywgaW5saW5lLl9sYWJlbClcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbi8qKlxuICogR0ZNIElubGluZSBHcmFtbWFyXG4gKi9cblxuaW5saW5lLmdmbSA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7XG4gIGVzY2FwZTogZWRpdChpbmxpbmUuZXNjYXBlKS5yZXBsYWNlKCddKScsICd+fF0pJykuZ2V0UmVnZXgoKSxcbiAgX2V4dGVuZGVkX2VtYWlsOiAvW0EtWmEtejAtOS5fKy1dKyhAKVthLXpBLVowLTktX10rKD86XFwuW2EtekEtWjAtOS1fXSpbYS16QS1aMC05XSkrKD8hWy1fXSkvLFxuICB1cmw6IC9eKCg/OmZ0cHxodHRwcz8pOlxcL1xcL3x3d3dcXC4pKD86W2EtekEtWjAtOVxcLV0rXFwuPykrW15cXHM8XSp8XmVtYWlsLyxcbiAgX2JhY2twZWRhbDogLyg/OltePyEuLDo7Kl9+KCkmXSt8XFwoW14pXSpcXCl8Jig/IVthLXpBLVowLTldKzskKXxbPyEuLDo7Kl9+KV0rKD8hJCkpKy8sXG4gIGRlbDogL15+Kyg/PVxcUykoW1xcc1xcU10qP1xcUyl+Ky8sXG4gIHRleHQ6IGVkaXQoaW5saW5lLnRleHQpXG4gICAgLnJlcGxhY2UoJ118JywgJ35dfCcpXG4gICAgLnJlcGxhY2UoJ3wkJywgJ3xodHRwcz86Ly98ZnRwOi8vfHd3d1xcXFwufFthLXpBLVowLTkuISMkJSZcXCcqKy89P15fYHtcXFxcfH1+LV0rQHwkJylcbiAgICAuZ2V0UmVnZXgoKVxufSk7XG5cbmlubGluZS5nZm0udXJsID0gZWRpdChpbmxpbmUuZ2ZtLnVybClcbiAgLnJlcGxhY2UoJ2VtYWlsJywgaW5saW5lLmdmbS5fZXh0ZW5kZWRfZW1haWwpXG4gIC5nZXRSZWdleCgpO1xuLyoqXG4gKiBHRk0gKyBMaW5lIEJyZWFrcyBJbmxpbmUgR3JhbW1hclxuICovXG5cbmlubGluZS5icmVha3MgPSBtZXJnZSh7fSwgaW5saW5lLmdmbSwge1xuICBicjogZWRpdChpbmxpbmUuYnIpLnJlcGxhY2UoJ3syLH0nLCAnKicpLmdldFJlZ2V4KCksXG4gIHRleHQ6IGVkaXQoaW5saW5lLmdmbS50ZXh0KS5yZXBsYWNlKCd7Mix9JywgJyonKS5nZXRSZWdleCgpXG59KTtcblxuLyoqXG4gKiBJbmxpbmUgTGV4ZXIgJiBDb21waWxlclxuICovXG5cbmZ1bmN0aW9uIElubGluZUxleGVyKGxpbmtzLCBvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xuICB0aGlzLmxpbmtzID0gbGlua3M7XG4gIHRoaXMucnVsZXMgPSBpbmxpbmUubm9ybWFsO1xuICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcigpO1xuICB0aGlzLnJlbmRlcmVyLm9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKCF0aGlzLmxpbmtzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb2tlbnMgYXJyYXkgcmVxdWlyZXMgYSBgbGlua3NgIHByb3BlcnR5LicpO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5wZWRhbnRpYykge1xuICAgIHRoaXMucnVsZXMgPSBpbmxpbmUucGVkYW50aWM7XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmdmbSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYnJlYWtzKSB7XG4gICAgICB0aGlzLnJ1bGVzID0gaW5saW5lLmJyZWFrcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydWxlcyA9IGlubGluZS5nZm07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXhwb3NlIElubGluZSBSdWxlc1xuICovXG5cbklubGluZUxleGVyLnJ1bGVzID0gaW5saW5lO1xuXG4vKipcbiAqIFN0YXRpYyBMZXhpbmcvQ29tcGlsaW5nIE1ldGhvZFxuICovXG5cbklubGluZUxleGVyLm91dHB1dCA9IGZ1bmN0aW9uKHNyYywgbGlua3MsIG9wdGlvbnMpIHtcbiAgdmFyIGlubGluZSA9IG5ldyBJbmxpbmVMZXhlcihsaW5rcywgb3B0aW9ucyk7XG4gIHJldHVybiBpbmxpbmUub3V0cHV0KHNyYyk7XG59O1xuXG4vKipcbiAqIExleGluZy9Db21waWxpbmdcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUub3V0cHV0ID0gZnVuY3Rpb24oc3JjKSB7XG4gIHZhciBvdXQgPSAnJyxcbiAgICAgIGxpbmssXG4gICAgICB0ZXh0LFxuICAgICAgaHJlZixcbiAgICAgIHRpdGxlLFxuICAgICAgY2FwLFxuICAgICAgcHJldkNhcFplcm87XG5cbiAgd2hpbGUgKHNyYykge1xuICAgIC8vIGVzY2FwZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVzY2FwZS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gY2FwWzFdO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gYXV0b2xpbmtcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5hdXRvbGluay5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAoY2FwWzJdID09PSAnQCcpIHtcbiAgICAgICAgdGV4dCA9IGVzY2FwZSh0aGlzLm1hbmdsZShjYXBbMV0pKTtcbiAgICAgICAgaHJlZiA9ICdtYWlsdG86JyArIHRleHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFsxXSk7XG4gICAgICAgIGhyZWYgPSB0ZXh0O1xuICAgICAgfVxuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIubGluayhocmVmLCBudWxsLCB0ZXh0KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIHVybCAoZ2ZtKVxuICAgIGlmICghdGhpcy5pbkxpbmsgJiYgKGNhcCA9IHRoaXMucnVsZXMudXJsLmV4ZWMoc3JjKSkpIHtcbiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykge1xuICAgICAgICB0ZXh0ID0gZXNjYXBlKGNhcFswXSk7XG4gICAgICAgIGhyZWYgPSAnbWFpbHRvOicgKyB0ZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZG8gZXh0ZW5kZWQgYXV0b2xpbmsgcGF0aCB2YWxpZGF0aW9uXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBwcmV2Q2FwWmVybyA9IGNhcFswXTtcbiAgICAgICAgICBjYXBbMF0gPSB0aGlzLnJ1bGVzLl9iYWNrcGVkYWwuZXhlYyhjYXBbMF0pWzBdO1xuICAgICAgICB9IHdoaWxlIChwcmV2Q2FwWmVybyAhPT0gY2FwWzBdKTtcbiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMF0pO1xuICAgICAgICBpZiAoY2FwWzFdID09PSAnd3d3LicpIHtcbiAgICAgICAgICBocmVmID0gJ2h0dHA6Ly8nICsgdGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBocmVmID0gdGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgbnVsbCwgdGV4dCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0YWdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50YWcuZXhlYyhzcmMpKSB7XG4gICAgICBpZiAoIXRoaXMuaW5MaW5rICYmIC9ePGEgL2kudGVzdChjYXBbMF0pKSB7XG4gICAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbkxpbmsgJiYgL148XFwvYT4vaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pblJhd0Jsb2NrICYmIC9ePChwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pblJhd0Jsb2NrID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pblJhd0Jsb2NrICYmIC9ePFxcLyhwcmV8Y29kZXxrYmR8c2NyaXB0KShcXHN8PikvaS50ZXN0KGNhcFswXSkpIHtcbiAgICAgICAgdGhpcy5pblJhd0Jsb2NrID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5vcHRpb25zLnNhbml0aXplXG4gICAgICAgID8gdGhpcy5vcHRpb25zLnNhbml0aXplclxuICAgICAgICAgID8gdGhpcy5vcHRpb25zLnNhbml0aXplcihjYXBbMF0pXG4gICAgICAgICAgOiBlc2NhcGUoY2FwWzBdKVxuICAgICAgICA6IGNhcFswXTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGxpbmtcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saW5rLmV4ZWMoc3JjKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIGhyZWYgPSBjYXBbMl07XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7XG4gICAgICAgIGxpbmsgPSAvXihbXidcIl0qW15cXHNdKVxccysoWydcIl0pKC4qKVxcMi8uZXhlYyhocmVmKTtcblxuICAgICAgICBpZiAobGluaykge1xuICAgICAgICAgIGhyZWYgPSBsaW5rWzFdO1xuICAgICAgICAgIHRpdGxlID0gbGlua1szXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aXRsZSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aXRsZSA9IGNhcFszXSA/IGNhcFszXS5zbGljZSgxLCAtMSkgOiAnJztcbiAgICAgIH1cbiAgICAgIGhyZWYgPSBocmVmLnRyaW0oKS5yZXBsYWNlKC9ePChbXFxzXFxTXSopPiQvLCAnJDEnKTtcbiAgICAgIG91dCArPSB0aGlzLm91dHB1dExpbmsoY2FwLCB7XG4gICAgICAgIGhyZWY6IElubGluZUxleGVyLmVzY2FwZXMoaHJlZiksXG4gICAgICAgIHRpdGxlOiBJbmxpbmVMZXhlci5lc2NhcGVzKHRpdGxlKVxuICAgICAgfSk7XG4gICAgICB0aGlzLmluTGluayA9IGZhbHNlO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gcmVmbGluaywgbm9saW5rXG4gICAgaWYgKChjYXAgPSB0aGlzLnJ1bGVzLnJlZmxpbmsuZXhlYyhzcmMpKVxuICAgICAgICB8fCAoY2FwID0gdGhpcy5ydWxlcy5ub2xpbmsuZXhlYyhzcmMpKSkge1xuICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTtcbiAgICAgIGxpbmsgPSAoY2FwWzJdIHx8IGNhcFsxXSkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuICAgICAgbGluayA9IHRoaXMubGlua3NbbGluay50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGlmICghbGluayB8fCAhbGluay5ocmVmKSB7XG4gICAgICAgIG91dCArPSBjYXBbMF0uY2hhckF0KDApO1xuICAgICAgICBzcmMgPSBjYXBbMF0uc3Vic3RyaW5nKDEpICsgc3JjO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTtcbiAgICAgIG91dCArPSB0aGlzLm91dHB1dExpbmsoY2FwLCBsaW5rKTtcbiAgICAgIHRoaXMuaW5MaW5rID0gZmFsc2U7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBzdHJvbmdcbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5zdHJvbmcuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuc3Ryb25nKHRoaXMub3V0cHV0KGNhcFs0XSB8fCBjYXBbM10gfHwgY2FwWzJdIHx8IGNhcFsxXSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gZW1cbiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5lbS5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5lbSh0aGlzLm91dHB1dChjYXBbNl0gfHwgY2FwWzVdIHx8IGNhcFs0XSB8fCBjYXBbM10gfHwgY2FwWzJdIHx8IGNhcFsxXSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gY29kZVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmNvZGUuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuY29kZXNwYW4oZXNjYXBlKGNhcFsyXS50cmltKCksIHRydWUpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGJyXG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYnIuZXhlYyhzcmMpKSB7XG4gICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpO1xuICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuYnIoKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGRlbCAoZ2ZtKVxuICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmRlbC5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5kZWwodGhpcy5vdXRwdXQoY2FwWzFdKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyB0ZXh0XG4gICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGV4dC5leGVjKHNyYykpIHtcbiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7XG4gICAgICBpZiAodGhpcy5pblJhd0Jsb2NrKSB7XG4gICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnRleHQoY2FwWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLnRleHQoZXNjYXBlKHRoaXMuc21hcnR5cGFudHMoY2FwWzBdKSkpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHNyYykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbklubGluZUxleGVyLmVzY2FwZXMgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiB0ZXh0ID8gdGV4dC5yZXBsYWNlKElubGluZUxleGVyLnJ1bGVzLl9lc2NhcGVzLCAnJDEnKSA6IHRleHQ7XG59O1xuXG4vKipcbiAqIENvbXBpbGUgTGlua1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5vdXRwdXRMaW5rID0gZnVuY3Rpb24oY2FwLCBsaW5rKSB7XG4gIHZhciBocmVmID0gbGluay5ocmVmLFxuICAgICAgdGl0bGUgPSBsaW5rLnRpdGxlID8gZXNjYXBlKGxpbmsudGl0bGUpIDogbnVsbDtcblxuICByZXR1cm4gY2FwWzBdLmNoYXJBdCgwKSAhPT0gJyEnXG4gICAgPyB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgdGl0bGUsIHRoaXMub3V0cHV0KGNhcFsxXSkpXG4gICAgOiB0aGlzLnJlbmRlcmVyLmltYWdlKGhyZWYsIHRpdGxlLCBlc2NhcGUoY2FwWzFdKSk7XG59O1xuXG4vKipcbiAqIFNtYXJ0eXBhbnRzIFRyYW5zZm9ybWF0aW9uc1xuICovXG5cbklubGluZUxleGVyLnByb3RvdHlwZS5zbWFydHlwYW50cyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKCF0aGlzLm9wdGlvbnMuc21hcnR5cGFudHMpIHJldHVybiB0ZXh0O1xuICByZXR1cm4gdGV4dFxuICAgIC8vIGVtLWRhc2hlc1xuICAgIC5yZXBsYWNlKC8tLS0vZywgJ1xcdTIwMTQnKVxuICAgIC8vIGVuLWRhc2hlc1xuICAgIC5yZXBsYWNlKC8tLS9nLCAnXFx1MjAxMycpXG4gICAgLy8gb3BlbmluZyBzaW5nbGVzXG4gICAgLnJlcGxhY2UoLyhefFstXFx1MjAxNC8oXFxbe1wiXFxzXSknL2csICckMVxcdTIwMTgnKVxuICAgIC8vIGNsb3Npbmcgc2luZ2xlcyAmIGFwb3N0cm9waGVzXG4gICAgLnJlcGxhY2UoLycvZywgJ1xcdTIwMTknKVxuICAgIC8vIG9wZW5pbmcgZG91Ymxlc1xuICAgIC5yZXBsYWNlKC8oXnxbLVxcdTIwMTQvKFxcW3tcXHUyMDE4XFxzXSlcIi9nLCAnJDFcXHUyMDFjJylcbiAgICAvLyBjbG9zaW5nIGRvdWJsZXNcbiAgICAucmVwbGFjZSgvXCIvZywgJ1xcdTIwMWQnKVxuICAgIC8vIGVsbGlwc2VzXG4gICAgLnJlcGxhY2UoL1xcLnszfS9nLCAnXFx1MjAyNicpO1xufTtcblxuLyoqXG4gKiBNYW5nbGUgTGlua3NcbiAqL1xuXG5JbmxpbmVMZXhlci5wcm90b3R5cGUubWFuZ2xlID0gZnVuY3Rpb24odGV4dCkge1xuICBpZiAoIXRoaXMub3B0aW9ucy5tYW5nbGUpIHJldHVybiB0ZXh0O1xuICB2YXIgb3V0ID0gJycsXG4gICAgICBsID0gdGV4dC5sZW5ndGgsXG4gICAgICBpID0gMCxcbiAgICAgIGNoO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgY2ggPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPiAwLjUpIHtcbiAgICAgIGNoID0gJ3gnICsgY2gudG9TdHJpbmcoMTYpO1xuICAgIH1cbiAgICBvdXQgKz0gJyYjJyArIGNoICsgJzsnO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmVuZGVyZXJcbiAqL1xuXG5mdW5jdGlvbiBSZW5kZXJlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgbWFya2VkLmRlZmF1bHRzO1xufVxuXG5SZW5kZXJlci5wcm90b3R5cGUuY29kZSA9IGZ1bmN0aW9uKGNvZGUsIGxhbmcsIGVzY2FwZWQpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5oaWdobGlnaHQpIHtcbiAgICB2YXIgb3V0ID0gdGhpcy5vcHRpb25zLmhpZ2hsaWdodChjb2RlLCBsYW5nKTtcbiAgICBpZiAob3V0ICE9IG51bGwgJiYgb3V0ICE9PSBjb2RlKSB7XG4gICAgICBlc2NhcGVkID0gdHJ1ZTtcbiAgICAgIGNvZGUgPSBvdXQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFsYW5nKSB7XG4gICAgcmV0dXJuICc8cHJlPjxjb2RlPidcbiAgICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKVxuICAgICAgKyAnPC9jb2RlPjwvcHJlPic7XG4gIH1cblxuICByZXR1cm4gJzxwcmU+PGNvZGUgY2xhc3M9XCInXG4gICAgKyB0aGlzLm9wdGlvbnMubGFuZ1ByZWZpeFxuICAgICsgZXNjYXBlKGxhbmcsIHRydWUpXG4gICAgKyAnXCI+J1xuICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKVxuICAgICsgJzwvY29kZT48L3ByZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmJsb2NrcXVvdGUgPSBmdW5jdGlvbihxdW90ZSkge1xuICByZXR1cm4gJzxibG9ja3F1b3RlPlxcbicgKyBxdW90ZSArICc8L2Jsb2NrcXVvdGU+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5odG1sID0gZnVuY3Rpb24oaHRtbCkge1xuICByZXR1cm4gaHRtbDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5oZWFkaW5nID0gZnVuY3Rpb24odGV4dCwgbGV2ZWwsIHJhdykge1xuICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcklkcykge1xuICAgIHJldHVybiAnPGgnXG4gICAgICArIGxldmVsXG4gICAgICArICcgaWQ9XCInXG4gICAgICArIHRoaXMub3B0aW9ucy5oZWFkZXJQcmVmaXhcbiAgICAgICsgcmF3LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15cXHddKy9nLCAnLScpXG4gICAgICArICdcIj4nXG4gICAgICArIHRleHRcbiAgICAgICsgJzwvaCdcbiAgICAgICsgbGV2ZWxcbiAgICAgICsgJz5cXG4nO1xuICB9XG4gIC8vIGlnbm9yZSBJRHNcbiAgcmV0dXJuICc8aCcgKyBsZXZlbCArICc+JyArIHRleHQgKyAnPC9oJyArIGxldmVsICsgJz5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmhyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGhyLz5cXG4nIDogJzxocj5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbihib2R5LCBvcmRlcmVkLCBzdGFydCkge1xuICB2YXIgdHlwZSA9IG9yZGVyZWQgPyAnb2wnIDogJ3VsJyxcbiAgICAgIHN0YXJ0YXR0ID0gKG9yZGVyZWQgJiYgc3RhcnQgIT09IDEpID8gKCcgc3RhcnQ9XCInICsgc3RhcnQgKyAnXCInKSA6ICcnO1xuICByZXR1cm4gJzwnICsgdHlwZSArIHN0YXJ0YXR0ICsgJz5cXG4nICsgYm9keSArICc8LycgKyB0eXBlICsgJz5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpc3RpdGVtID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gJzxsaT4nICsgdGV4dCArICc8L2xpPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuY2hlY2tib3ggPSBmdW5jdGlvbihjaGVja2VkKSB7XG4gIHJldHVybiAnPGlucHV0ICdcbiAgICArIChjaGVja2VkID8gJ2NoZWNrZWQ9XCJcIiAnIDogJycpXG4gICAgKyAnZGlzYWJsZWQ9XCJcIiB0eXBlPVwiY2hlY2tib3hcIidcbiAgICArICh0aGlzLm9wdGlvbnMueGh0bWwgPyAnIC8nIDogJycpXG4gICAgKyAnPiAnO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnBhcmFncmFwaCA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8cD4nICsgdGV4dCArICc8L3A+XFxuJztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50YWJsZSA9IGZ1bmN0aW9uKGhlYWRlciwgYm9keSkge1xuICBpZiAoYm9keSkgYm9keSA9ICc8dGJvZHk+JyArIGJvZHkgKyAnPC90Ym9keT4nO1xuXG4gIHJldHVybiAnPHRhYmxlPlxcbidcbiAgICArICc8dGhlYWQ+XFxuJ1xuICAgICsgaGVhZGVyXG4gICAgKyAnPC90aGVhZD5cXG4nXG4gICAgKyBib2R5XG4gICAgKyAnPC90YWJsZT5cXG4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlcm93ID0gZnVuY3Rpb24oY29udGVudCkge1xuICByZXR1cm4gJzx0cj5cXG4nICsgY29udGVudCArICc8L3RyPlxcbic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUudGFibGVjZWxsID0gZnVuY3Rpb24oY29udGVudCwgZmxhZ3MpIHtcbiAgdmFyIHR5cGUgPSBmbGFncy5oZWFkZXIgPyAndGgnIDogJ3RkJztcbiAgdmFyIHRhZyA9IGZsYWdzLmFsaWduXG4gICAgPyAnPCcgKyB0eXBlICsgJyBhbGlnbj1cIicgKyBmbGFncy5hbGlnbiArICdcIj4nXG4gICAgOiAnPCcgKyB0eXBlICsgJz4nO1xuICByZXR1cm4gdGFnICsgY29udGVudCArICc8LycgKyB0eXBlICsgJz5cXG4nO1xufTtcblxuLy8gc3BhbiBsZXZlbCByZW5kZXJlclxuUmVuZGVyZXIucHJvdG90eXBlLnN0cm9uZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8c3Ryb25nPicgKyB0ZXh0ICsgJzwvc3Ryb25nPic7XG59O1xuXG5SZW5kZXJlci5wcm90b3R5cGUuZW0gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGVtPicgKyB0ZXh0ICsgJzwvZW0+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5jb2Rlc3BhbiA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuICc8Y29kZT4nICsgdGV4dCArICc8L2NvZGU+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5iciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxici8+JyA6ICc8YnI+Jztcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiAnPGRlbD4nICsgdGV4dCArICc8L2RlbD4nO1xufTtcblxuUmVuZGVyZXIucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICBocmVmID0gY2xlYW5VcmwodGhpcy5vcHRpb25zLnNhbml0aXplLCB0aGlzLm9wdGlvbnMuYmFzZVVybCwgaHJlZik7XG4gIGlmIChocmVmID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbiAgdmFyIG91dCA9ICc8YSBocmVmPVwiJyArIGVzY2FwZShocmVmKSArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gJz4nICsgdGV4dCArICc8L2E+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7XG4gIGhyZWYgPSBjbGVhblVybCh0aGlzLm9wdGlvbnMuc2FuaXRpemUsIHRoaXMub3B0aW9ucy5iYXNlVXJsLCBocmVmKTtcbiAgaWYgKGhyZWYgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHZhciBvdXQgPSAnPGltZyBzcmM9XCInICsgaHJlZiArICdcIiBhbHQ9XCInICsgdGV4dCArICdcIic7XG4gIGlmICh0aXRsZSkge1xuICAgIG91dCArPSAnIHRpdGxlPVwiJyArIHRpdGxlICsgJ1wiJztcbiAgfVxuICBvdXQgKz0gdGhpcy5vcHRpb25zLnhodG1sID8gJy8+JyA6ICc+JztcbiAgcmV0dXJuIG91dDtcbn07XG5cblJlbmRlcmVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odGV4dCkge1xuICByZXR1cm4gdGV4dDtcbn07XG5cbi8qKlxuICogVGV4dFJlbmRlcmVyXG4gKiByZXR1cm5zIG9ubHkgdGhlIHRleHR1YWwgcGFydCBvZiB0aGUgdG9rZW5cbiAqL1xuXG5mdW5jdGlvbiBUZXh0UmVuZGVyZXIoKSB7fVxuXG4vLyBubyBuZWVkIGZvciBibG9jayBsZXZlbCByZW5kZXJlcnNcblxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5zdHJvbmcgPVxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5lbSA9XG5UZXh0UmVuZGVyZXIucHJvdG90eXBlLmNvZGVzcGFuID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUuZGVsID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0O1xufTtcblxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5saW5rID1cblRleHRSZW5kZXJlci5wcm90b3R5cGUuaW1hZ2UgPSBmdW5jdGlvbihocmVmLCB0aXRsZSwgdGV4dCkge1xuICByZXR1cm4gJycgKyB0ZXh0O1xufTtcblxuVGV4dFJlbmRlcmVyLnByb3RvdHlwZS5iciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gJyc7XG59O1xuXG4vKipcbiAqIFBhcnNpbmcgJiBDb21waWxpbmdcbiAqL1xuXG5mdW5jdGlvbiBQYXJzZXIob3B0aW9ucykge1xuICB0aGlzLnRva2VucyA9IFtdO1xuICB0aGlzLnRva2VuID0gbnVsbDtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7XG4gIHRoaXMub3B0aW9ucy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlciB8fCBuZXcgUmVuZGVyZXIoKTtcbiAgdGhpcy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlcjtcbiAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zO1xufVxuXG4vKipcbiAqIFN0YXRpYyBQYXJzZSBNZXRob2RcbiAqL1xuXG5QYXJzZXIucGFyc2UgPSBmdW5jdGlvbihzcmMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucyk7XG4gIHJldHVybiBwYXJzZXIucGFyc2Uoc3JjKTtcbn07XG5cbi8qKlxuICogUGFyc2UgTG9vcFxuICovXG5cblBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbihzcmMpIHtcbiAgdGhpcy5pbmxpbmUgPSBuZXcgSW5saW5lTGV4ZXIoc3JjLmxpbmtzLCB0aGlzLm9wdGlvbnMpO1xuICAvLyB1c2UgYW4gSW5saW5lTGV4ZXIgd2l0aCBhIFRleHRSZW5kZXJlciB0byBleHRyYWN0IHB1cmUgdGV4dFxuICB0aGlzLmlubGluZVRleHQgPSBuZXcgSW5saW5lTGV4ZXIoXG4gICAgc3JjLmxpbmtzLFxuICAgIG1lcmdlKHt9LCB0aGlzLm9wdGlvbnMsIHtyZW5kZXJlcjogbmV3IFRleHRSZW5kZXJlcigpfSlcbiAgKTtcbiAgdGhpcy50b2tlbnMgPSBzcmMucmV2ZXJzZSgpO1xuXG4gIHZhciBvdXQgPSAnJztcbiAgd2hpbGUgKHRoaXMubmV4dCgpKSB7XG4gICAgb3V0ICs9IHRoaXMudG9rKCk7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcblxuLyoqXG4gKiBOZXh0IFRva2VuXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRva2VuID0gdGhpcy50b2tlbnMucG9wKCk7XG59O1xuXG4vKipcbiAqIFByZXZpZXcgTmV4dCBUb2tlblxuICovXG5cblBhcnNlci5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoIC0gMV0gfHwgMDtcbn07XG5cbi8qKlxuICogUGFyc2UgVGV4dCBUb2tlbnNcbiAqL1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlVGV4dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYm9keSA9IHRoaXMudG9rZW4udGV4dDtcblxuICB3aGlsZSAodGhpcy5wZWVrKCkudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgYm9keSArPSAnXFxuJyArIHRoaXMubmV4dCgpLnRleHQ7XG4gIH1cblxuICByZXR1cm4gdGhpcy5pbmxpbmUub3V0cHV0KGJvZHkpO1xufTtcblxuLyoqXG4gKiBQYXJzZSBDdXJyZW50IFRva2VuXG4gKi9cblxuUGFyc2VyLnByb3RvdHlwZS50b2sgPSBmdW5jdGlvbigpIHtcbiAgc3dpdGNoICh0aGlzLnRva2VuLnR5cGUpIHtcbiAgICBjYXNlICdzcGFjZSc6IHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgY2FzZSAnaHInOiB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5ocigpO1xuICAgIH1cbiAgICBjYXNlICdoZWFkaW5nJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuaGVhZGluZyhcbiAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dCksXG4gICAgICAgIHRoaXMudG9rZW4uZGVwdGgsXG4gICAgICAgIHVuZXNjYXBlKHRoaXMuaW5saW5lVGV4dC5vdXRwdXQodGhpcy50b2tlbi50ZXh0KSkpO1xuICAgIH1cbiAgICBjYXNlICdjb2RlJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuY29kZSh0aGlzLnRva2VuLnRleHQsXG4gICAgICAgIHRoaXMudG9rZW4ubGFuZyxcbiAgICAgICAgdGhpcy50b2tlbi5lc2NhcGVkKTtcbiAgICB9XG4gICAgY2FzZSAndGFibGUnOiB7XG4gICAgICB2YXIgaGVhZGVyID0gJycsXG4gICAgICAgICAgYm9keSA9ICcnLFxuICAgICAgICAgIGksXG4gICAgICAgICAgcm93LFxuICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgajtcblxuICAgICAgLy8gaGVhZGVyXG4gICAgICBjZWxsID0gJyc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy50b2tlbi5oZWFkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2VsbCArPSB0aGlzLnJlbmRlcmVyLnRhYmxlY2VsbChcbiAgICAgICAgICB0aGlzLmlubGluZS5vdXRwdXQodGhpcy50b2tlbi5oZWFkZXJbaV0pLFxuICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBhbGlnbjogdGhpcy50b2tlbi5hbGlnbltpXSB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBoZWFkZXIgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9rZW4uY2VsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcm93ID0gdGhpcy50b2tlbi5jZWxsc1tpXTtcblxuICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBjZWxsICs9IHRoaXMucmVuZGVyZXIudGFibGVjZWxsKFxuICAgICAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHJvd1tqXSksXG4gICAgICAgICAgICB7IGhlYWRlcjogZmFsc2UsIGFsaWduOiB0aGlzLnRva2VuLmFsaWduW2pdIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgYm9keSArPSB0aGlzLnJlbmRlcmVyLnRhYmxlcm93KGNlbGwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIudGFibGUoaGVhZGVyLCBib2R5KTtcbiAgICB9XG4gICAgY2FzZSAnYmxvY2txdW90ZV9zdGFydCc6IHtcbiAgICAgIGJvZHkgPSAnJztcblxuICAgICAgd2hpbGUgKHRoaXMubmV4dCgpLnR5cGUgIT09ICdibG9ja3F1b3RlX2VuZCcpIHtcbiAgICAgICAgYm9keSArPSB0aGlzLnRvaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5ibG9ja3F1b3RlKGJvZHkpO1xuICAgIH1cbiAgICBjYXNlICdsaXN0X3N0YXJ0Jzoge1xuICAgICAgYm9keSA9ICcnO1xuICAgICAgdmFyIG9yZGVyZWQgPSB0aGlzLnRva2VuLm9yZGVyZWQsXG4gICAgICAgICAgc3RhcnQgPSB0aGlzLnRva2VuLnN0YXJ0O1xuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfZW5kJykge1xuICAgICAgICBib2R5ICs9IHRoaXMudG9rKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmxpc3QoYm9keSwgb3JkZXJlZCwgc3RhcnQpO1xuICAgIH1cbiAgICBjYXNlICdsaXN0X2l0ZW1fc3RhcnQnOiB7XG4gICAgICBib2R5ID0gJyc7XG4gICAgICB2YXIgbG9vc2UgPSB0aGlzLnRva2VuLmxvb3NlO1xuXG4gICAgICBpZiAodGhpcy50b2tlbi50YXNrKSB7XG4gICAgICAgIGJvZHkgKz0gdGhpcy5yZW5kZXJlci5jaGVja2JveCh0aGlzLnRva2VuLmNoZWNrZWQpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfaXRlbV9lbmQnKSB7XG4gICAgICAgIGJvZHkgKz0gIWxvb3NlICYmIHRoaXMudG9rZW4udHlwZSA9PT0gJ3RleHQnXG4gICAgICAgICAgPyB0aGlzLnBhcnNlVGV4dCgpXG4gICAgICAgICAgOiB0aGlzLnRvaygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5saXN0aXRlbShib2R5KTtcbiAgICB9XG4gICAgY2FzZSAnaHRtbCc6IHtcbiAgICAgIC8vIFRPRE8gcGFyc2UgaW5saW5lIGNvbnRlbnQgaWYgcGFyYW1ldGVyIG1hcmtkb3duPTFcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmh0bWwodGhpcy50b2tlbi50ZXh0KTtcbiAgICB9XG4gICAgY2FzZSAncGFyYWdyYXBoJzoge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpKTtcbiAgICB9XG4gICAgY2FzZSAndGV4dCc6IHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLnBhcmFncmFwaCh0aGlzLnBhcnNlVGV4dCgpKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGVscGVyc1xuICovXG5cbmZ1bmN0aW9uIGVzY2FwZShodG1sLCBlbmNvZGUpIHtcbiAgaWYgKGVuY29kZSkge1xuICAgIGlmIChlc2NhcGUuZXNjYXBlVGVzdC50ZXN0KGh0bWwpKSB7XG4gICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKGVzY2FwZS5lc2NhcGVSZXBsYWNlLCBmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIGVzY2FwZS5yZXBsYWNlbWVudHNbY2hdOyB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGVzY2FwZS5lc2NhcGVUZXN0Tm9FbmNvZGUudGVzdChodG1sKSkge1xuICAgICAgcmV0dXJuIGh0bWwucmVwbGFjZShlc2NhcGUuZXNjYXBlUmVwbGFjZU5vRW5jb2RlLCBmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIGVzY2FwZS5yZXBsYWNlbWVudHNbY2hdOyB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaHRtbDtcbn1cblxuZXNjYXBlLmVzY2FwZVRlc3QgPSAvWyY8PlwiJ10vO1xuZXNjYXBlLmVzY2FwZVJlcGxhY2UgPSAvWyY8PlwiJ10vZztcbmVzY2FwZS5yZXBsYWNlbWVudHMgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5Oydcbn07XG5cbmVzY2FwZS5lc2NhcGVUZXN0Tm9FbmNvZGUgPSAvWzw+XCInXXwmKD8hIz9cXHcrOykvO1xuZXNjYXBlLmVzY2FwZVJlcGxhY2VOb0VuY29kZSA9IC9bPD5cIiddfCYoPyEjP1xcdys7KS9nO1xuXG5mdW5jdGlvbiB1bmVzY2FwZShodG1sKSB7XG4gIC8vIGV4cGxpY2l0bHkgbWF0Y2ggZGVjaW1hbCwgaGV4LCBhbmQgbmFtZWQgSFRNTCBlbnRpdGllc1xuICByZXR1cm4gaHRtbC5yZXBsYWNlKC8mKCMoPzpcXGQrKXwoPzojeFswLTlBLUZhLWZdKyl8KD86XFx3KykpOz8vaWcsIGZ1bmN0aW9uKF8sIG4pIHtcbiAgICBuID0gbi50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChuID09PSAnY29sb24nKSByZXR1cm4gJzonO1xuICAgIGlmIChuLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgICByZXR1cm4gbi5jaGFyQXQoMSkgPT09ICd4J1xuICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobi5zdWJzdHJpbmcoMiksIDE2KSlcbiAgICAgICAgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKCtuLnN1YnN0cmluZygxKSk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVkaXQocmVnZXgsIG9wdCkge1xuICByZWdleCA9IHJlZ2V4LnNvdXJjZSB8fCByZWdleDtcbiAgb3B0ID0gb3B0IHx8ICcnO1xuICByZXR1cm4ge1xuICAgIHJlcGxhY2U6IGZ1bmN0aW9uKG5hbWUsIHZhbCkge1xuICAgICAgdmFsID0gdmFsLnNvdXJjZSB8fCB2YWw7XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSgvKF58W15cXFtdKVxcXi9nLCAnJDEnKTtcbiAgICAgIHJlZ2V4ID0gcmVnZXgucmVwbGFjZShuYW1lLCB2YWwpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBnZXRSZWdleDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleCwgb3B0KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsZWFuVXJsKHNhbml0aXplLCBiYXNlLCBocmVmKSB7XG4gIGlmIChzYW5pdGl6ZSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgcHJvdCA9IGRlY29kZVVSSUNvbXBvbmVudCh1bmVzY2FwZShocmVmKSlcbiAgICAgICAgLnJlcGxhY2UoL1teXFx3Ol0vZywgJycpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocHJvdC5pbmRleE9mKCdqYXZhc2NyaXB0OicpID09PSAwIHx8IHByb3QuaW5kZXhPZigndmJzY3JpcHQ6JykgPT09IDAgfHwgcHJvdC5pbmRleE9mKCdkYXRhOicpID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgaWYgKGJhc2UgJiYgIW9yaWdpbkluZGVwZW5kZW50VXJsLnRlc3QoaHJlZikpIHtcbiAgICBocmVmID0gcmVzb2x2ZVVybChiYXNlLCBocmVmKTtcbiAgfVxuICB0cnkge1xuICAgIGhyZWYgPSBlbmNvZGVVUkkoaHJlZikucmVwbGFjZSgvJTI1L2csICclJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gaHJlZjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7XG4gIGlmICghYmFzZVVybHNbJyAnICsgYmFzZV0pIHtcbiAgICAvLyB3ZSBjYW4gaWdub3JlIGV2ZXJ5dGhpbmcgaW4gYmFzZSBhZnRlciB0aGUgbGFzdCBzbGFzaCBvZiBpdHMgcGF0aCBjb21wb25lbnQsXG4gICAgLy8gYnV0IHdlIG1pZ2h0IG5lZWQgdG8gYWRkIF90aGF0X1xuICAgIC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tM1xuICAgIGlmICgvXlteOl0rOlxcLypbXi9dKiQvLnRlc3QoYmFzZSkpIHtcbiAgICAgIGJhc2VVcmxzWycgJyArIGJhc2VdID0gYmFzZSArICcvJztcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZVVybHNbJyAnICsgYmFzZV0gPSBydHJpbShiYXNlLCAnLycsIHRydWUpO1xuICAgIH1cbiAgfVxuICBiYXNlID0gYmFzZVVybHNbJyAnICsgYmFzZV07XG5cbiAgaWYgKGhyZWYuc2xpY2UoMCwgMikgPT09ICcvLycpIHtcbiAgICByZXR1cm4gYmFzZS5yZXBsYWNlKC86W1xcc1xcU10qLywgJzonKSArIGhyZWY7XG4gIH0gZWxzZSBpZiAoaHJlZi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiBiYXNlLnJlcGxhY2UoLyg6XFwvKlteL10qKVtcXHNcXFNdKi8sICckMScpICsgaHJlZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZSArIGhyZWY7XG4gIH1cbn1cbnZhciBiYXNlVXJscyA9IHt9O1xudmFyIG9yaWdpbkluZGVwZW5kZW50VXJsID0gL14kfF5bYS16XVthLXowLTkrLi1dKjp8Xls/I10vaTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5ub29wLmV4ZWMgPSBub29wO1xuXG5mdW5jdGlvbiBtZXJnZShvYmopIHtcbiAgdmFyIGkgPSAxLFxuICAgICAgdGFyZ2V0LFxuICAgICAga2V5O1xuXG4gIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAoa2V5IGluIHRhcmdldCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBzcGxpdENlbGxzKHRhYmxlUm93LCBjb3VudCkge1xuICAvLyBlbnN1cmUgdGhhdCBldmVyeSBjZWxsLWRlbGltaXRpbmcgcGlwZSBoYXMgYSBzcGFjZVxuICAvLyBiZWZvcmUgaXQgdG8gZGlzdGluZ3Vpc2ggaXQgZnJvbSBhbiBlc2NhcGVkIHBpcGVcbiAgdmFyIHJvdyA9IHRhYmxlUm93LnJlcGxhY2UoL1xcfC9nLCBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyKSB7XG4gICAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsXG4gICAgICAgICAgICBjdXJyID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAoLS1jdXJyID49IDAgJiYgc3RyW2N1cnJdID09PSAnXFxcXCcpIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgICAvLyBvZGQgbnVtYmVyIG9mIHNsYXNoZXMgbWVhbnMgfCBpcyBlc2NhcGVkXG4gICAgICAgICAgLy8gc28gd2UgbGVhdmUgaXQgYWxvbmVcbiAgICAgICAgICByZXR1cm4gJ3wnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGFkZCBzcGFjZSBiZWZvcmUgdW5lc2NhcGVkIHxcbiAgICAgICAgICByZXR1cm4gJyB8JztcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBjZWxscyA9IHJvdy5zcGxpdCgvIFxcfC8pLFxuICAgICAgaSA9IDA7XG5cbiAgaWYgKGNlbGxzLmxlbmd0aCA+IGNvdW50KSB7XG4gICAgY2VsbHMuc3BsaWNlKGNvdW50KTtcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2VsbHMubGVuZ3RoIDwgY291bnQpIGNlbGxzLnB1c2goJycpO1xuICB9XG5cbiAgZm9yICg7IGkgPCBjZWxscy5sZW5ndGg7IGkrKykge1xuICAgIC8vIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBpcyBpZ25vcmVkIHBlciB0aGUgZ2ZtIHNwZWNcbiAgICBjZWxsc1tpXSA9IGNlbGxzW2ldLnRyaW0oKS5yZXBsYWNlKC9cXFxcXFx8L2csICd8Jyk7XG4gIH1cbiAgcmV0dXJuIGNlbGxzO1xufVxuXG4vLyBSZW1vdmUgdHJhaWxpbmcgJ2Mncy4gRXF1aXZhbGVudCB0byBzdHIucmVwbGFjZSgvYyokLywgJycpLlxuLy8gL2MqJC8gaXMgdnVsbmVyYWJsZSB0byBSRURPUy5cbi8vIGludmVydDogUmVtb3ZlIHN1ZmZpeCBvZiBub24tYyBjaGFycyBpbnN0ZWFkLiBEZWZhdWx0IGZhbHNleS5cbmZ1bmN0aW9uIHJ0cmltKHN0ciwgYywgaW52ZXJ0KSB7XG4gIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLy8gTGVuZ3RoIG9mIHN1ZmZpeCBtYXRjaGluZyB0aGUgaW52ZXJ0IGNvbmRpdGlvbi5cbiAgdmFyIHN1ZmZMZW4gPSAwO1xuXG4gIC8vIFN0ZXAgbGVmdCB1bnRpbCB3ZSBmYWlsIHRvIG1hdGNoIHRoZSBpbnZlcnQgY29uZGl0aW9uLlxuICB3aGlsZSAoc3VmZkxlbiA8IHN0ci5sZW5ndGgpIHtcbiAgICB2YXIgY3VyckNoYXIgPSBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSBzdWZmTGVuIC0gMSk7XG4gICAgaWYgKGN1cnJDaGFyID09PSBjICYmICFpbnZlcnQpIHtcbiAgICAgIHN1ZmZMZW4rKztcbiAgICB9IGVsc2UgaWYgKGN1cnJDaGFyICE9PSBjICYmIGludmVydCkge1xuICAgICAgc3VmZkxlbisrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cigwLCBzdHIubGVuZ3RoIC0gc3VmZkxlbik7XG59XG5cbi8qKlxuICogTWFya2VkXG4gKi9cblxuZnVuY3Rpb24gbWFya2VkKHNyYywgb3B0LCBjYWxsYmFjaykge1xuICAvLyB0aHJvdyBlcnJvciBpbiBjYXNlIG9mIG5vbiBzdHJpbmcgaW5wdXRcbiAgaWYgKHR5cGVvZiBzcmMgPT09ICd1bmRlZmluZWQnIHx8IHNyYyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFya2VkKCk6IGlucHV0IHBhcmFtZXRlciBpcyB1bmRlZmluZWQgb3IgbnVsbCcpO1xuICB9XG4gIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignbWFya2VkKCk6IGlucHV0IHBhcmFtZXRlciBpcyBvZiB0eXBlICdcbiAgICAgICsgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHNyYykgKyAnLCBzdHJpbmcgZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjayB8fCB0eXBlb2Ygb3B0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2sgPSBvcHQ7XG4gICAgICBvcHQgPSBudWxsO1xuICAgIH1cblxuICAgIG9wdCA9IG1lcmdlKHt9LCBtYXJrZWQuZGVmYXVsdHMsIG9wdCB8fCB7fSk7XG5cbiAgICB2YXIgaGlnaGxpZ2h0ID0gb3B0LmhpZ2hsaWdodCxcbiAgICAgICAgdG9rZW5zLFxuICAgICAgICBwZW5kaW5nLFxuICAgICAgICBpID0gMDtcblxuICAgIHRyeSB7XG4gICAgICB0b2tlbnMgPSBMZXhlci5sZXgoc3JjLCBvcHQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlKTtcbiAgICB9XG5cbiAgICBwZW5kaW5nID0gdG9rZW5zLmxlbmd0aDtcblxuICAgIHZhciBkb25lID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3V0O1xuXG4gICAgICB0cnkge1xuICAgICAgICBvdXQgPSBQYXJzZXIucGFyc2UodG9rZW5zLCBvcHQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlcnIgPSBlO1xuICAgICAgfVxuXG4gICAgICBvcHQuaGlnaGxpZ2h0ID0gaGlnaGxpZ2h0O1xuXG4gICAgICByZXR1cm4gZXJyXG4gICAgICAgID8gY2FsbGJhY2soZXJyKVxuICAgICAgICA6IGNhbGxiYWNrKG51bGwsIG91dCk7XG4gICAgfTtcblxuICAgIGlmICghaGlnaGxpZ2h0IHx8IGhpZ2hsaWdodC5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH1cblxuICAgIGRlbGV0ZSBvcHQuaGlnaGxpZ2h0O1xuXG4gICAgaWYgKCFwZW5kaW5nKSByZXR1cm4gZG9uZSgpO1xuXG4gICAgZm9yICg7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIChmdW5jdGlvbih0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gJ2NvZGUnKSB7XG4gICAgICAgICAgcmV0dXJuIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhpZ2hsaWdodCh0b2tlbi50ZXh0LCB0b2tlbi5sYW5nLCBmdW5jdGlvbihlcnIsIGNvZGUpIHtcbiAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgIGlmIChjb2RlID09IG51bGwgfHwgY29kZSA9PT0gdG9rZW4udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuLnRleHQgPSBjb2RlO1xuICAgICAgICAgIHRva2VuLmVzY2FwZWQgPSB0cnVlO1xuICAgICAgICAgIC0tcGVuZGluZyB8fCBkb25lKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkodG9rZW5zW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0KSBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQpO1xuICAgIHJldHVybiBQYXJzZXIucGFyc2UoTGV4ZXIubGV4KHNyYywgb3B0KSwgb3B0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGUubWVzc2FnZSArPSAnXFxuUGxlYXNlIHJlcG9ydCB0aGlzIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZWRqcy9tYXJrZWQuJztcbiAgICBpZiAoKG9wdCB8fCBtYXJrZWQuZGVmYXVsdHMpLnNpbGVudCkge1xuICAgICAgcmV0dXJuICc8cD5BbiBlcnJvciBvY2N1cnJlZDo8L3A+PHByZT4nXG4gICAgICAgICsgZXNjYXBlKGUubWVzc2FnZSArICcnLCB0cnVlKVxuICAgICAgICArICc8L3ByZT4nO1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbi8qKlxuICogT3B0aW9uc1xuICovXG5cbm1hcmtlZC5vcHRpb25zID1cbm1hcmtlZC5zZXRPcHRpb25zID0gZnVuY3Rpb24ob3B0KSB7XG4gIG1lcmdlKG1hcmtlZC5kZWZhdWx0cywgb3B0KTtcbiAgcmV0dXJuIG1hcmtlZDtcbn07XG5cbm1hcmtlZC5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBiYXNlVXJsOiBudWxsLFxuICAgIGJyZWFrczogZmFsc2UsXG4gICAgZ2ZtOiB0cnVlLFxuICAgIGhlYWRlcklkczogdHJ1ZSxcbiAgICBoZWFkZXJQcmVmaXg6ICcnLFxuICAgIGhpZ2hsaWdodDogbnVsbCxcbiAgICBsYW5nUHJlZml4OiAnbGFuZ3VhZ2UtJyxcbiAgICBtYW5nbGU6IHRydWUsXG4gICAgcGVkYW50aWM6IGZhbHNlLFxuICAgIHJlbmRlcmVyOiBuZXcgUmVuZGVyZXIoKSxcbiAgICBzYW5pdGl6ZTogZmFsc2UsXG4gICAgc2FuaXRpemVyOiBudWxsLFxuICAgIHNpbGVudDogZmFsc2UsXG4gICAgc21hcnRMaXN0czogZmFsc2UsXG4gICAgc21hcnR5cGFudHM6IGZhbHNlLFxuICAgIHRhYmxlczogdHJ1ZSxcbiAgICB4aHRtbDogZmFsc2VcbiAgfTtcbn07XG5cbm1hcmtlZC5kZWZhdWx0cyA9IG1hcmtlZC5nZXREZWZhdWx0cygpO1xuXG4vKipcbiAqIEV4cG9zZVxuICovXG5cbm1hcmtlZC5QYXJzZXIgPSBQYXJzZXI7XG5tYXJrZWQucGFyc2VyID0gUGFyc2VyLnBhcnNlO1xuXG5tYXJrZWQuUmVuZGVyZXIgPSBSZW5kZXJlcjtcbm1hcmtlZC5UZXh0UmVuZGVyZXIgPSBUZXh0UmVuZGVyZXI7XG5cbm1hcmtlZC5MZXhlciA9IExleGVyO1xubWFya2VkLmxleGVyID0gTGV4ZXIubGV4O1xuXG5tYXJrZWQuSW5saW5lTGV4ZXIgPSBJbmxpbmVMZXhlcjtcbm1hcmtlZC5pbmxpbmVMZXhlciA9IElubGluZUxleGVyLm91dHB1dDtcblxubWFya2VkLnBhcnNlID0gbWFya2VkO1xuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gbWFya2VkO1xufSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gbWFya2VkOyB9KTtcbn0gZWxzZSB7XG4gIHJvb3QubWFya2VkID0gbWFya2VkO1xufVxufSkodGhpcyB8fCAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpKTtcbiIsIlxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1jb3JlLmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbnZhciBfc2VsZiA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcblx0PyB3aW5kb3cgICAvLyBpZiBpbiBicm93c2VyXG5cdDogKFxuXHRcdCh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSlcblx0XHQ/IHNlbGYgLy8gaWYgaW4gd29ya2VyXG5cdFx0OiB7fSAgIC8vIGlmIGluIG5vZGUganNcblx0KTtcblxuLyoqXG4gKiBQcmlzbTogTGlnaHR3ZWlnaHQsIHJvYnVzdCwgZWxlZ2FudCBzeW50YXggaGlnaGxpZ2h0aW5nXG4gKiBNSVQgbGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocC9cbiAqIEBhdXRob3IgTGVhIFZlcm91IGh0dHA6Ly9sZWEudmVyb3UubWVcbiAqL1xuXG52YXIgUHJpc20gPSAoZnVuY3Rpb24oKXtcblxuLy8gUHJpdmF0ZSBoZWxwZXIgdmFyc1xudmFyIGxhbmcgPSAvXFxibGFuZyg/OnVhZ2UpPy0oW1xcdy1dKylcXGIvaTtcbnZhciB1bmlxdWVJZCA9IDA7XG5cbnZhciBfID0gX3NlbGYuUHJpc20gPSB7XG5cdG1hbnVhbDogX3NlbGYuUHJpc20gJiYgX3NlbGYuUHJpc20ubWFudWFsLFxuXHRkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXI6IF9zZWxmLlByaXNtICYmIF9zZWxmLlByaXNtLmRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcixcblx0dXRpbDoge1xuXHRcdGVuY29kZTogZnVuY3Rpb24gKHRva2Vucykge1xuXHRcdFx0aWYgKHRva2VucyBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdHJldHVybiBuZXcgVG9rZW4odG9rZW5zLnR5cGUsIF8udXRpbC5lbmNvZGUodG9rZW5zLmNvbnRlbnQpLCB0b2tlbnMuYWxpYXMpO1xuXHRcdFx0fSBlbHNlIGlmIChfLnV0aWwudHlwZSh0b2tlbnMpID09PSAnQXJyYXknKSB7XG5cdFx0XHRcdHJldHVybiB0b2tlbnMubWFwKF8udXRpbC5lbmNvZGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRva2Vucy5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC9cXHUwMGEwL2csICcgJyk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHR5cGU6IGZ1bmN0aW9uIChvKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLm1hdGNoKC9cXFtvYmplY3QgKFxcdyspXFxdLylbMV07XG5cdFx0fSxcblxuXHRcdG9iaklkOiBmdW5jdGlvbiAob2JqKSB7XG5cdFx0XHRpZiAoIW9ialsnX19pZCddKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX2lkJywgeyB2YWx1ZTogKyt1bmlxdWVJZCB9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmpbJ19faWQnXTtcblx0XHR9LFxuXG5cdFx0Ly8gRGVlcCBjbG9uZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gKGUuZy4gdG8gZXh0ZW5kIGl0KVxuXHRcdGNsb25lOiBmdW5jdGlvbiAobywgdmlzaXRlZCkge1xuXHRcdFx0dmFyIHR5cGUgPSBfLnV0aWwudHlwZShvKTtcblx0XHRcdHZpc2l0ZWQgPSB2aXNpdGVkIHx8IHt9O1xuXG5cdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0Y2FzZSAnT2JqZWN0Jzpcblx0XHRcdFx0XHRpZiAodmlzaXRlZFtfLnV0aWwub2JqSWQobyldKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmlzaXRlZFtfLnV0aWwub2JqSWQobyldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgY2xvbmUgPSB7fTtcblx0XHRcdFx0XHR2aXNpdGVkW18udXRpbC5vYmpJZChvKV0gPSBjbG9uZTtcblxuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBvKSB7XG5cdFx0XHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lW2tleV0gPSBfLnV0aWwuY2xvbmUob1trZXldLCB2aXNpdGVkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gY2xvbmU7XG5cblx0XHRcdFx0Y2FzZSAnQXJyYXknOlxuXHRcdFx0XHRcdGlmICh2aXNpdGVkW18udXRpbC5vYmpJZChvKV0pIHtcblx0XHRcdFx0XHRcdHJldHVybiB2aXNpdGVkW18udXRpbC5vYmpJZChvKV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdHZpc2l0ZWRbXy51dGlsLm9iaklkKG8pXSA9IGNsb25lO1xuXG5cdFx0XHRcdFx0by5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7XG5cdFx0XHRcdFx0XHRjbG9uZVtpXSA9IF8udXRpbC5jbG9uZSh2LCB2aXNpdGVkKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHJldHVybiBjbG9uZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXHR9LFxuXG5cdGxhbmd1YWdlczoge1xuXHRcdGV4dGVuZDogZnVuY3Rpb24gKGlkLCByZWRlZikge1xuXHRcdFx0dmFyIGxhbmcgPSBfLnV0aWwuY2xvbmUoXy5sYW5ndWFnZXNbaWRdKTtcblxuXHRcdFx0Zm9yICh2YXIga2V5IGluIHJlZGVmKSB7XG5cdFx0XHRcdGxhbmdba2V5XSA9IHJlZGVmW2tleV07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsYW5nO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnNlcnQgYSB0b2tlbiBiZWZvcmUgYW5vdGhlciB0b2tlbiBpbiBhIGxhbmd1YWdlIGxpdGVyYWxcblx0XHQgKiBBcyB0aGlzIG5lZWRzIHRvIHJlY3JlYXRlIHRoZSBvYmplY3QgKHdlIGNhbm5vdCBhY3R1YWxseSBpbnNlcnQgYmVmb3JlIGtleXMgaW4gb2JqZWN0IGxpdGVyYWxzKSxcblx0XHQgKiB3ZSBjYW5ub3QganVzdCBwcm92aWRlIGFuIG9iamVjdCwgd2UgbmVlZCBhbm9iamVjdCBhbmQgYSBrZXkuXG5cdFx0ICogQHBhcmFtIGluc2lkZSBUaGUga2V5IChvciBsYW5ndWFnZSBpZCkgb2YgdGhlIHBhcmVudFxuXHRcdCAqIEBwYXJhbSBiZWZvcmUgVGhlIGtleSB0byBpbnNlcnQgYmVmb3JlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBmdW5jdGlvbiBhcHBlbmRzIGluc3RlYWQuXG5cdFx0ICogQHBhcmFtIGluc2VydCBPYmplY3Qgd2l0aCB0aGUga2V5L3ZhbHVlIHBhaXJzIHRvIGluc2VydFxuXHRcdCAqIEBwYXJhbSByb290IFRoZSBvYmplY3QgdGhhdCBjb250YWlucyBgaW5zaWRlYC4gSWYgZXF1YWwgdG8gUHJpc20ubGFuZ3VhZ2VzLCBpdCBjYW4gYmUgb21pdHRlZC5cblx0XHQgKi9cblx0XHRpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uIChpbnNpZGUsIGJlZm9yZSwgaW5zZXJ0LCByb290KSB7XG5cdFx0XHRyb290ID0gcm9vdCB8fCBfLmxhbmd1YWdlcztcblx0XHRcdHZhciBncmFtbWFyID0gcm9vdFtpbnNpZGVdO1xuXG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XG5cdFx0XHRcdGluc2VydCA9IGFyZ3VtZW50c1sxXTtcblxuXHRcdFx0XHRmb3IgKHZhciBuZXdUb2tlbiBpbiBpbnNlcnQpIHtcblx0XHRcdFx0XHRpZiAoaW5zZXJ0Lmhhc093blByb3BlcnR5KG5ld1Rva2VuKSkge1xuXHRcdFx0XHRcdFx0Z3JhbW1hcltuZXdUb2tlbl0gPSBpbnNlcnRbbmV3VG9rZW5dO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBncmFtbWFyO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcmV0ID0ge307XG5cblx0XHRcdGZvciAodmFyIHRva2VuIGluIGdyYW1tYXIpIHtcblxuXHRcdFx0XHRpZiAoZ3JhbW1hci5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcblxuXHRcdFx0XHRcdGlmICh0b2tlbiA9PSBiZWZvcmUpIHtcblxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgbmV3VG9rZW4gaW4gaW5zZXJ0KSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKGluc2VydC5oYXNPd25Qcm9wZXJ0eShuZXdUb2tlbikpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXRbbmV3VG9rZW5dID0gaW5zZXJ0W25ld1Rva2VuXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldFt0b2tlbl0gPSBncmFtbWFyW3Rva2VuXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgcmVmZXJlbmNlcyBpbiBvdGhlciBsYW5ndWFnZSBkZWZpbml0aW9uc1xuXHRcdFx0Xy5sYW5ndWFnZXMuREZTKF8ubGFuZ3VhZ2VzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gcm9vdFtpbnNpZGVdICYmIGtleSAhPSBpbnNpZGUpIHtcblx0XHRcdFx0XHR0aGlzW2tleV0gPSByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcm9vdFtpbnNpZGVdID0gcmV0O1xuXHRcdH0sXG5cblx0XHQvLyBUcmF2ZXJzZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gd2l0aCBEZXB0aCBGaXJzdCBTZWFyY2hcblx0XHRERlM6IGZ1bmN0aW9uKG8sIGNhbGxiYWNrLCB0eXBlLCB2aXNpdGVkKSB7XG5cdFx0XHR2aXNpdGVkID0gdmlzaXRlZCB8fCB7fTtcblx0XHRcdGZvciAodmFyIGkgaW4gbykge1xuXHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwobywgaSwgb1tpXSwgdHlwZSB8fCBpKTtcblxuXHRcdFx0XHRcdGlmIChfLnV0aWwudHlwZShvW2ldKSA9PT0gJ09iamVjdCcgJiYgIXZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSkge1xuXHRcdFx0XHRcdFx0dmlzaXRlZFtfLnV0aWwub2JqSWQob1tpXSldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdF8ubGFuZ3VhZ2VzLkRGUyhvW2ldLCBjYWxsYmFjaywgbnVsbCwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKF8udXRpbC50eXBlKG9baV0pID09PSAnQXJyYXknICYmICF2aXNpdGVkW18udXRpbC5vYmpJZChvW2ldKV0pIHtcblx0XHRcdFx0XHRcdHZpc2l0ZWRbXy51dGlsLm9iaklkKG9baV0pXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRfLmxhbmd1YWdlcy5ERlMob1tpXSwgY2FsbGJhY2ssIGksIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0cGx1Z2luczoge30sXG5cblx0aGlnaGxpZ2h0QWxsOiBmdW5jdGlvbihhc3luYywgY2FsbGJhY2spIHtcblx0XHRfLmhpZ2hsaWdodEFsbFVuZGVyKGRvY3VtZW50LCBhc3luYywgY2FsbGJhY2spO1xuXHR9LFxuXG5cdGhpZ2hsaWdodEFsbFVuZGVyOiBmdW5jdGlvbihjb250YWluZXIsIGFzeW5jLCBjYWxsYmFjaykge1xuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRjYWxsYmFjazogY2FsbGJhY2ssXG5cdFx0XHRzZWxlY3RvcjogJ2NvZGVbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdLCBbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdIGNvZGUsIGNvZGVbY2xhc3MqPVwibGFuZy1cIl0sIFtjbGFzcyo9XCJsYW5nLVwiXSBjb2RlJ1xuXHRcdH07XG5cblx0XHRfLmhvb2tzLnJ1bihcImJlZm9yZS1oaWdobGlnaHRhbGxcIiwgZW52KTtcblxuXHRcdHZhciBlbGVtZW50cyA9IGVudi5lbGVtZW50cyB8fCBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChlbnYuc2VsZWN0b3IpO1xuXG5cdFx0Zm9yICh2YXIgaT0wLCBlbGVtZW50OyBlbGVtZW50ID0gZWxlbWVudHNbaSsrXTspIHtcblx0XHRcdF8uaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50LCBhc3luYyA9PT0gdHJ1ZSwgZW52LmNhbGxiYWNrKTtcblx0XHR9XG5cdH0sXG5cblx0aGlnaGxpZ2h0RWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgYXN5bmMsIGNhbGxiYWNrKSB7XG5cdFx0Ly8gRmluZCBsYW5ndWFnZVxuXHRcdHZhciBsYW5ndWFnZSwgZ3JhbW1hciwgcGFyZW50ID0gZWxlbWVudDtcblxuXHRcdHdoaWxlIChwYXJlbnQgJiYgIWxhbmcudGVzdChwYXJlbnQuY2xhc3NOYW1lKSkge1xuXHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0bGFuZ3VhZ2UgPSAocGFyZW50LmNsYXNzTmFtZS5tYXRjaChsYW5nKSB8fCBbLCcnXSlbMV0udG9Mb3dlckNhc2UoKTtcblx0XHRcdGdyYW1tYXIgPSBfLmxhbmd1YWdlc1tsYW5ndWFnZV07XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IGxhbmd1YWdlIG9uIHRoZSBlbGVtZW50LCBpZiBub3QgcHJlc2VudFxuXHRcdGVsZW1lbnQuY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUucmVwbGFjZShsYW5nLCAnJykucmVwbGFjZSgvXFxzKy9nLCAnICcpICsgJyBsYW5ndWFnZS0nICsgbGFuZ3VhZ2U7XG5cblx0XHRpZiAoZWxlbWVudC5wYXJlbnROb2RlKSB7XG5cdFx0XHQvLyBTZXQgbGFuZ3VhZ2Ugb24gdGhlIHBhcmVudCwgZm9yIHN0eWxpbmdcblx0XHRcdHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKC9wcmUvaS50ZXN0KHBhcmVudC5ub2RlTmFtZSkpIHtcblx0XHRcdFx0cGFyZW50LmNsYXNzTmFtZSA9IHBhcmVudC5jbGFzc05hbWUucmVwbGFjZShsYW5nLCAnJykucmVwbGFjZSgvXFxzKy9nLCAnICcpICsgJyBsYW5ndWFnZS0nICsgbGFuZ3VhZ2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGNvZGUgPSBlbGVtZW50LnRleHRDb250ZW50O1xuXG5cdFx0dmFyIGVudiA9IHtcblx0XHRcdGVsZW1lbnQ6IGVsZW1lbnQsXG5cdFx0XHRsYW5ndWFnZTogbGFuZ3VhZ2UsXG5cdFx0XHRncmFtbWFyOiBncmFtbWFyLFxuXHRcdFx0Y29kZTogY29kZVxuXHRcdH07XG5cblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLXNhbml0eS1jaGVjaycsIGVudik7XG5cblx0XHRpZiAoIWVudi5jb2RlIHx8ICFlbnYuZ3JhbW1hcikge1xuXHRcdFx0aWYgKGVudi5jb2RlKSB7XG5cdFx0XHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaGlnaGxpZ2h0JywgZW52KTtcblx0XHRcdFx0ZW52LmVsZW1lbnQudGV4dENvbnRlbnQgPSBlbnYuY29kZTtcblx0XHRcdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLWhpZ2hsaWdodCcsIGVudik7XG5cdFx0XHR9XG5cdFx0XHRfLmhvb2tzLnJ1bignY29tcGxldGUnLCBlbnYpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaGlnaGxpZ2h0JywgZW52KTtcblxuXHRcdGlmIChhc3luYyAmJiBfc2VsZi5Xb3JrZXIpIHtcblx0XHRcdHZhciB3b3JrZXIgPSBuZXcgV29ya2VyKF8uZmlsZW5hbWUpO1xuXG5cdFx0XHR3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZXZ0KSB7XG5cdFx0XHRcdGVudi5oaWdobGlnaHRlZENvZGUgPSBldnQuZGF0YTtcblxuXHRcdFx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWluc2VydCcsIGVudik7XG5cblx0XHRcdFx0ZW52LmVsZW1lbnQuaW5uZXJIVE1MID0gZW52LmhpZ2hsaWdodGVkQ29kZTtcblxuXHRcdFx0XHRjYWxsYmFjayAmJiBjYWxsYmFjay5jYWxsKGVudi5lbGVtZW50KTtcblx0XHRcdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLWhpZ2hsaWdodCcsIGVudik7XG5cdFx0XHRcdF8uaG9va3MucnVuKCdjb21wbGV0ZScsIGVudik7XG5cdFx0XHR9O1xuXG5cdFx0XHR3b3JrZXIucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRsYW5ndWFnZTogZW52Lmxhbmd1YWdlLFxuXHRcdFx0XHRjb2RlOiBlbnYuY29kZSxcblx0XHRcdFx0aW1tZWRpYXRlQ2xvc2U6IHRydWVcblx0XHRcdH0pKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRlbnYuaGlnaGxpZ2h0ZWRDb2RlID0gXy5oaWdobGlnaHQoZW52LmNvZGUsIGVudi5ncmFtbWFyLCBlbnYubGFuZ3VhZ2UpO1xuXG5cdFx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWluc2VydCcsIGVudik7XG5cblx0XHRcdGVudi5lbGVtZW50LmlubmVySFRNTCA9IGVudi5oaWdobGlnaHRlZENvZGU7XG5cblx0XHRcdGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoZWxlbWVudCk7XG5cblx0XHRcdF8uaG9va3MucnVuKCdhZnRlci1oaWdobGlnaHQnLCBlbnYpO1xuXHRcdFx0Xy5ob29rcy5ydW4oJ2NvbXBsZXRlJywgZW52KTtcblx0XHR9XG5cdH0sXG5cblx0aGlnaGxpZ2h0OiBmdW5jdGlvbiAodGV4dCwgZ3JhbW1hciwgbGFuZ3VhZ2UpIHtcblx0XHR2YXIgZW52ID0ge1xuXHRcdFx0Y29kZTogdGV4dCxcblx0XHRcdGdyYW1tYXI6IGdyYW1tYXIsXG5cdFx0XHRsYW5ndWFnZTogbGFuZ3VhZ2Vcblx0XHR9O1xuXHRcdF8uaG9va3MucnVuKCdiZWZvcmUtdG9rZW5pemUnLCBlbnYpO1xuXHRcdGVudi50b2tlbnMgPSBfLnRva2VuaXplKGVudi5jb2RlLCBlbnYuZ3JhbW1hcik7XG5cdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLXRva2VuaXplJywgZW52KTtcblx0XHRyZXR1cm4gVG9rZW4uc3RyaW5naWZ5KF8udXRpbC5lbmNvZGUoZW52LnRva2VucyksIGVudi5sYW5ndWFnZSk7XG5cdH0sXG5cblx0bWF0Y2hHcmFtbWFyOiBmdW5jdGlvbiAodGV4dCwgc3RyYXJyLCBncmFtbWFyLCBpbmRleCwgc3RhcnRQb3MsIG9uZXNob3QsIHRhcmdldCkge1xuXHRcdHZhciBUb2tlbiA9IF8uVG9rZW47XG5cblx0XHRmb3IgKHZhciB0b2tlbiBpbiBncmFtbWFyKSB7XG5cdFx0XHRpZighZ3JhbW1hci5oYXNPd25Qcm9wZXJ0eSh0b2tlbikgfHwgIWdyYW1tYXJbdG9rZW5dKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodG9rZW4gPT0gdGFyZ2V0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHBhdHRlcm5zID0gZ3JhbW1hclt0b2tlbl07XG5cdFx0XHRwYXR0ZXJucyA9IChfLnV0aWwudHlwZShwYXR0ZXJucykgPT09IFwiQXJyYXlcIikgPyBwYXR0ZXJucyA6IFtwYXR0ZXJuc107XG5cblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgcGF0dGVybnMubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dmFyIHBhdHRlcm4gPSBwYXR0ZXJuc1tqXSxcblx0XHRcdFx0XHRpbnNpZGUgPSBwYXR0ZXJuLmluc2lkZSxcblx0XHRcdFx0XHRsb29rYmVoaW5kID0gISFwYXR0ZXJuLmxvb2tiZWhpbmQsXG5cdFx0XHRcdFx0Z3JlZWR5ID0gISFwYXR0ZXJuLmdyZWVkeSxcblx0XHRcdFx0XHRsb29rYmVoaW5kTGVuZ3RoID0gMCxcblx0XHRcdFx0XHRhbGlhcyA9IHBhdHRlcm4uYWxpYXM7XG5cblx0XHRcdFx0aWYgKGdyZWVkeSAmJiAhcGF0dGVybi5wYXR0ZXJuLmdsb2JhbCkge1xuXHRcdFx0XHRcdC8vIFdpdGhvdXQgdGhlIGdsb2JhbCBmbGFnLCBsYXN0SW5kZXggd29uJ3Qgd29ya1xuXHRcdFx0XHRcdHZhciBmbGFncyA9IHBhdHRlcm4ucGF0dGVybi50b1N0cmluZygpLm1hdGNoKC9baW11eV0qJC8pWzBdO1xuXHRcdFx0XHRcdHBhdHRlcm4ucGF0dGVybiA9IFJlZ0V4cChwYXR0ZXJuLnBhdHRlcm4uc291cmNlLCBmbGFncyArIFwiZ1wiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHBhdHRlcm4gPSBwYXR0ZXJuLnBhdHRlcm4gfHwgcGF0dGVybjtcblxuXHRcdFx0XHQvLyBEb27igJl0IGNhY2hlIGxlbmd0aCBhcyBpdCBjaGFuZ2VzIGR1cmluZyB0aGUgbG9vcFxuXHRcdFx0XHRmb3IgKHZhciBpID0gaW5kZXgsIHBvcyA9IHN0YXJ0UG9zOyBpIDwgc3RyYXJyLmxlbmd0aDsgcG9zICs9IHN0cmFycltpXS5sZW5ndGgsICsraSkge1xuXG5cdFx0XHRcdFx0dmFyIHN0ciA9IHN0cmFycltpXTtcblxuXHRcdFx0XHRcdGlmIChzdHJhcnIubGVuZ3RoID4gdGV4dC5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdC8vIFNvbWV0aGluZyB3ZW50IHRlcnJpYmx5IHdyb25nLCBBQk9SVCwgQUJPUlQhXG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHN0ciBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZ3JlZWR5ICYmIGkgIT0gc3RyYXJyLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdHBhdHRlcm4ubGFzdEluZGV4ID0gcG9zO1xuXHRcdFx0XHRcdFx0dmFyIG1hdGNoID0gcGF0dGVybi5leGVjKHRleHQpO1xuXHRcdFx0XHRcdFx0aWYgKCFtYXRjaCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGZyb20gPSBtYXRjaC5pbmRleCArIChsb29rYmVoaW5kID8gbWF0Y2hbMV0ubGVuZ3RoIDogMCksXG5cdFx0XHRcdFx0XHQgICAgdG8gPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCxcblx0XHRcdFx0XHRcdCAgICBrID0gaSxcblx0XHRcdFx0XHRcdCAgICBwID0gcG9zO1xuXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBsZW4gPSBzdHJhcnIubGVuZ3RoOyBrIDwgbGVuICYmIChwIDwgdG8gfHwgKCFzdHJhcnJba10udHlwZSAmJiAhc3RyYXJyW2sgLSAxXS5ncmVlZHkpKTsgKytrKSB7XG5cdFx0XHRcdFx0XHRcdHAgKz0gc3RyYXJyW2tdLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0Ly8gTW92ZSB0aGUgaW5kZXggaSB0byB0aGUgZWxlbWVudCBpbiBzdHJhcnIgdGhhdCBpcyBjbG9zZXN0IHRvIGZyb21cblx0XHRcdFx0XHRcdFx0aWYgKGZyb20gPj0gcCkge1xuXHRcdFx0XHRcdFx0XHRcdCsraTtcblx0XHRcdFx0XHRcdFx0XHRwb3MgPSBwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIElmIHN0cmFycltpXSBpcyBhIFRva2VuLCB0aGVuIHRoZSBtYXRjaCBzdGFydHMgaW5zaWRlIGFub3RoZXIgVG9rZW4sIHdoaWNoIGlzIGludmFsaWRcblx0XHRcdFx0XHRcdGlmIChzdHJhcnJbaV0gaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTnVtYmVyIG9mIHRva2VucyB0byBkZWxldGUgYW5kIHJlcGxhY2Ugd2l0aCB0aGUgbmV3IG1hdGNoXG5cdFx0XHRcdFx0XHRkZWxOdW0gPSBrIC0gaTtcblx0XHRcdFx0XHRcdHN0ciA9IHRleHQuc2xpY2UocG9zLCBwKTtcblx0XHRcdFx0XHRcdG1hdGNoLmluZGV4IC09IHBvcztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cGF0dGVybi5sYXN0SW5kZXggPSAwO1xuXG5cdFx0XHRcdFx0XHR2YXIgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWMoc3RyKSxcblx0XHRcdFx0XHRcdFx0ZGVsTnVtID0gMTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIW1hdGNoKSB7XG5cdFx0XHRcdFx0XHRpZiAob25lc2hvdCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYobG9va2JlaGluZCkge1xuXHRcdFx0XHRcdFx0bG9va2JlaGluZExlbmd0aCA9IG1hdGNoWzFdID8gbWF0Y2hbMV0ubGVuZ3RoIDogMDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZnJvbSA9IG1hdGNoLmluZGV4ICsgbG9va2JlaGluZExlbmd0aCxcblx0XHRcdFx0XHQgICAgbWF0Y2ggPSBtYXRjaFswXS5zbGljZShsb29rYmVoaW5kTGVuZ3RoKSxcblx0XHRcdFx0XHQgICAgdG8gPSBmcm9tICsgbWF0Y2gubGVuZ3RoLFxuXHRcdFx0XHRcdCAgICBiZWZvcmUgPSBzdHIuc2xpY2UoMCwgZnJvbSksXG5cdFx0XHRcdFx0ICAgIGFmdGVyID0gc3RyLnNsaWNlKHRvKTtcblxuXHRcdFx0XHRcdHZhciBhcmdzID0gW2ksIGRlbE51bV07XG5cblx0XHRcdFx0XHRpZiAoYmVmb3JlKSB7XG5cdFx0XHRcdFx0XHQrK2k7XG5cdFx0XHRcdFx0XHRwb3MgKz0gYmVmb3JlLmxlbmd0aDtcblx0XHRcdFx0XHRcdGFyZ3MucHVzaChiZWZvcmUpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciB3cmFwcGVkID0gbmV3IFRva2VuKHRva2VuLCBpbnNpZGU/IF8udG9rZW5pemUobWF0Y2gsIGluc2lkZSkgOiBtYXRjaCwgYWxpYXMsIG1hdGNoLCBncmVlZHkpO1xuXG5cdFx0XHRcdFx0YXJncy5wdXNoKHdyYXBwZWQpO1xuXG5cdFx0XHRcdFx0aWYgKGFmdGVyKSB7XG5cdFx0XHRcdFx0XHRhcmdzLnB1c2goYWZ0ZXIpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoc3RyYXJyLCBhcmdzKTtcblxuXHRcdFx0XHRcdGlmIChkZWxOdW0gIT0gMSlcblx0XHRcdFx0XHRcdF8ubWF0Y2hHcmFtbWFyKHRleHQsIHN0cmFyciwgZ3JhbW1hciwgaSwgcG9zLCB0cnVlLCB0b2tlbik7XG5cblx0XHRcdFx0XHRpZiAob25lc2hvdClcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHRva2VuaXplOiBmdW5jdGlvbih0ZXh0LCBncmFtbWFyLCBsYW5ndWFnZSkge1xuXHRcdHZhciBzdHJhcnIgPSBbdGV4dF07XG5cblx0XHR2YXIgcmVzdCA9IGdyYW1tYXIucmVzdDtcblxuXHRcdGlmIChyZXN0KSB7XG5cdFx0XHRmb3IgKHZhciB0b2tlbiBpbiByZXN0KSB7XG5cdFx0XHRcdGdyYW1tYXJbdG9rZW5dID0gcmVzdFt0b2tlbl07XG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBncmFtbWFyLnJlc3Q7XG5cdFx0fVxuXG5cdFx0Xy5tYXRjaEdyYW1tYXIodGV4dCwgc3RyYXJyLCBncmFtbWFyLCAwLCAwLCBmYWxzZSk7XG5cblx0XHRyZXR1cm4gc3RyYXJyO1xuXHR9LFxuXG5cdGhvb2tzOiB7XG5cdFx0YWxsOiB7fSxcblxuXHRcdGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgaG9va3MgPSBfLmhvb2tzLmFsbDtcblxuXHRcdFx0aG9va3NbbmFtZV0gPSBob29rc1tuYW1lXSB8fCBbXTtcblxuXHRcdFx0aG9va3NbbmFtZV0ucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblxuXHRcdHJ1bjogZnVuY3Rpb24gKG5hbWUsIGVudikge1xuXHRcdFx0dmFyIGNhbGxiYWNrcyA9IF8uaG9va3MuYWxsW25hbWVdO1xuXG5cdFx0XHRpZiAoIWNhbGxiYWNrcyB8fCAhY2FsbGJhY2tzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGk9MCwgY2FsbGJhY2s7IGNhbGxiYWNrID0gY2FsbGJhY2tzW2krK107KSB7XG5cdFx0XHRcdGNhbGxiYWNrKGVudik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgVG9rZW4gPSBfLlRva2VuID0gZnVuY3Rpb24odHlwZSwgY29udGVudCwgYWxpYXMsIG1hdGNoZWRTdHIsIGdyZWVkeSkge1xuXHR0aGlzLnR5cGUgPSB0eXBlO1xuXHR0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuXHR0aGlzLmFsaWFzID0gYWxpYXM7XG5cdC8vIENvcHkgb2YgdGhlIGZ1bGwgc3RyaW5nIHRoaXMgdG9rZW4gd2FzIGNyZWF0ZWQgZnJvbVxuXHR0aGlzLmxlbmd0aCA9IChtYXRjaGVkU3RyIHx8IFwiXCIpLmxlbmd0aHwwO1xuXHR0aGlzLmdyZWVkeSA9ICEhZ3JlZWR5O1xufTtcblxuVG9rZW4uc3RyaW5naWZ5ID0gZnVuY3Rpb24obywgbGFuZ3VhZ2UsIHBhcmVudCkge1xuXHRpZiAodHlwZW9mIG8gPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGlmIChfLnV0aWwudHlwZShvKSA9PT0gJ0FycmF5Jykge1xuXHRcdHJldHVybiBvLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gVG9rZW4uc3RyaW5naWZ5KGVsZW1lbnQsIGxhbmd1YWdlLCBvKTtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdHZhciBlbnYgPSB7XG5cdFx0dHlwZTogby50eXBlLFxuXHRcdGNvbnRlbnQ6IFRva2VuLnN0cmluZ2lmeShvLmNvbnRlbnQsIGxhbmd1YWdlLCBwYXJlbnQpLFxuXHRcdHRhZzogJ3NwYW4nLFxuXHRcdGNsYXNzZXM6IFsndG9rZW4nLCBvLnR5cGVdLFxuXHRcdGF0dHJpYnV0ZXM6IHt9LFxuXHRcdGxhbmd1YWdlOiBsYW5ndWFnZSxcblx0XHRwYXJlbnQ6IHBhcmVudFxuXHR9O1xuXG5cdGlmIChvLmFsaWFzKSB7XG5cdFx0dmFyIGFsaWFzZXMgPSBfLnV0aWwudHlwZShvLmFsaWFzKSA9PT0gJ0FycmF5JyA/IG8uYWxpYXMgOiBbby5hbGlhc107XG5cdFx0QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZW52LmNsYXNzZXMsIGFsaWFzZXMpO1xuXHR9XG5cblx0Xy5ob29rcy5ydW4oJ3dyYXAnLCBlbnYpO1xuXG5cdHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMoZW52LmF0dHJpYnV0ZXMpLm1hcChmdW5jdGlvbihuYW1lKSB7XG5cdFx0cmV0dXJuIG5hbWUgKyAnPVwiJyArIChlbnYuYXR0cmlidXRlc1tuYW1lXSB8fCAnJykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpICsgJ1wiJztcblx0fSkuam9pbignICcpO1xuXG5cdHJldHVybiAnPCcgKyBlbnYudGFnICsgJyBjbGFzcz1cIicgKyBlbnYuY2xhc3Nlcy5qb2luKCcgJykgKyAnXCInICsgKGF0dHJpYnV0ZXMgPyAnICcgKyBhdHRyaWJ1dGVzIDogJycpICsgJz4nICsgZW52LmNvbnRlbnQgKyAnPC8nICsgZW52LnRhZyArICc+JztcblxufTtcblxuaWYgKCFfc2VsZi5kb2N1bWVudCkge1xuXHRpZiAoIV9zZWxmLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHQvLyBpbiBOb2RlLmpzXG5cdFx0cmV0dXJuIF9zZWxmLlByaXNtO1xuXHR9XG5cblx0aWYgKCFfLmRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcikge1xuXHRcdC8vIEluIHdvcmtlclxuXHRcdF9zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IEpTT04ucGFyc2UoZXZ0LmRhdGEpLFxuXHRcdFx0XHRsYW5nID0gbWVzc2FnZS5sYW5ndWFnZSxcblx0XHRcdFx0Y29kZSA9IG1lc3NhZ2UuY29kZSxcblx0XHRcdFx0aW1tZWRpYXRlQ2xvc2UgPSBtZXNzYWdlLmltbWVkaWF0ZUNsb3NlO1xuXG5cdFx0XHRfc2VsZi5wb3N0TWVzc2FnZShfLmhpZ2hsaWdodChjb2RlLCBfLmxhbmd1YWdlc1tsYW5nXSwgbGFuZykpO1xuXHRcdFx0aWYgKGltbWVkaWF0ZUNsb3NlKSB7XG5cdFx0XHRcdF9zZWxmLmNsb3NlKCk7XG5cdFx0XHR9XG5cdFx0fSwgZmFsc2UpO1xuXHR9XG5cblx0cmV0dXJuIF9zZWxmLlByaXNtO1xufVxuXG4vL0dldCBjdXJyZW50IHNjcmlwdCBhbmQgaGlnaGxpZ2h0XG52YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdCB8fCBbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpKS5wb3AoKTtcblxuaWYgKHNjcmlwdCkge1xuXHRfLmZpbGVuYW1lID0gc2NyaXB0LnNyYztcblxuXHRpZiAoIV8ubWFudWFsICYmICFzY3JpcHQuaGFzQXR0cmlidXRlKCdkYXRhLW1hbnVhbCcpKSB7XG5cdFx0aWYoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIpIHtcblx0XHRcdGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG5cdFx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXy5oaWdobGlnaHRBbGwpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoXy5oaWdobGlnaHRBbGwsIDE2KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgXy5oaWdobGlnaHRBbGwpO1xuXHRcdH1cblx0fVxufVxuXG5yZXR1cm4gX3NlbGYuUHJpc207XG5cbn0pKCk7XG5cbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRtb2R1bGUuZXhwb3J0cyA9IFByaXNtO1xufVxuXG4vLyBoYWNrIGZvciBjb21wb25lbnRzIHRvIHdvcmsgY29ycmVjdGx5IGluIG5vZGUuanNcbmlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuXHRnbG9iYWwuUHJpc20gPSBQcmlzbTtcbn1cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLW1hcmt1cC5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5QcmlzbS5sYW5ndWFnZXMubWFya3VwID0ge1xuXHQnY29tbWVudCc6IC88IS0tW1xcc1xcU10qPy0tPi8sXG5cdCdwcm9sb2cnOiAvPFxcP1tcXHNcXFNdKz9cXD8+Lyxcblx0J2RvY3R5cGUnOiAvPCFET0NUWVBFW1xcc1xcU10rPz4vaSxcblx0J2NkYXRhJzogLzwhXFxbQ0RBVEFcXFtbXFxzXFxTXSo/XV0+L2ksXG5cdCd0YWcnOiB7XG5cdFx0cGF0dGVybjogLzxcXC8/KD8hXFxkKVteXFxzPlxcLz0kPCVdKyg/OlxccytbXlxccz5cXC89XSsoPzo9KD86KFwifCcpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKSpcXDF8W15cXHMnXCI+PV0rKSk/KSpcXHMqXFwvPz4vaSxcblx0XHRncmVlZHk6IHRydWUsXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQndGFnJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvXjxcXC8/W15cXHM+XFwvXSsvaSxcblx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0J3B1bmN0dWF0aW9uJzogL148XFwvPy8sXG5cdFx0XHRcdFx0J25hbWVzcGFjZSc6IC9eW15cXHM+XFwvOl0rOi9cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdCdhdHRyLXZhbHVlJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvPSg/OihcInwnKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDEpW15cXFxcXSkqXFwxfFteXFxzJ1wiPj1dKykvaSxcblx0XHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdFx0J3B1bmN0dWF0aW9uJzogW1xuXHRcdFx0XHRcdFx0L149Lyxcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0cGF0dGVybjogLyhefFteXFxcXF0pW1wiJ10vLFxuXHRcdFx0XHRcdFx0XHRsb29rYmVoaW5kOiB0cnVlXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0J3B1bmN0dWF0aW9uJzogL1xcLz8+Lyxcblx0XHRcdCdhdHRyLW5hbWUnOiB7XG5cdFx0XHRcdHBhdHRlcm46IC9bXlxccz5cXC9dKy8sXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCduYW1lc3BhY2UnOiAvXlteXFxzPlxcLzpdKzovXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblx0fSxcblx0J2VudGl0eSc6IC8mIz9bXFxkYS16XXsxLDh9Oy9pXG59O1xuXG5QcmlzbS5sYW5ndWFnZXMubWFya3VwWyd0YWcnXS5pbnNpZGVbJ2F0dHItdmFsdWUnXS5pbnNpZGVbJ2VudGl0eSddID1cblx0UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFsnZW50aXR5J107XG5cbi8vIFBsdWdpbiB0byBtYWtlIGVudGl0eSB0aXRsZSBzaG93IHRoZSByZWFsIGVudGl0eSwgaWRlYSBieSBSb21hbiBLb21hcm92XG5QcmlzbS5ob29rcy5hZGQoJ3dyYXAnLCBmdW5jdGlvbihlbnYpIHtcblxuXHRpZiAoZW52LnR5cGUgPT09ICdlbnRpdHknKSB7XG5cdFx0ZW52LmF0dHJpYnV0ZXNbJ3RpdGxlJ10gPSBlbnYuY29udGVudC5yZXBsYWNlKC8mYW1wOy8sICcmJyk7XG5cdH1cbn0pO1xuXG5QcmlzbS5sYW5ndWFnZXMueG1sID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblByaXNtLmxhbmd1YWdlcy5odG1sID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblByaXNtLmxhbmd1YWdlcy5tYXRobWwgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuUHJpc20ubGFuZ3VhZ2VzLnN2ZyA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAgICBCZWdpbiBwcmlzbS1jc3MuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuUHJpc20ubGFuZ3VhZ2VzLmNzcyA9IHtcblx0J2NvbW1lbnQnOiAvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG5cdCdhdHJ1bGUnOiB7XG5cdFx0cGF0dGVybjogL0BbXFx3LV0rPy4qPyg/Ojt8KD89XFxzKlxceykpL2ksXG5cdFx0aW5zaWRlOiB7XG5cdFx0XHQncnVsZSc6IC9AW1xcdy1dKy9cblx0XHRcdC8vIFNlZSByZXN0IGJlbG93XG5cdFx0fVxuXHR9LFxuXHQndXJsJzogL3VybFxcKCg/OihbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxfC4qPylcXCkvaSxcblx0J3NlbGVjdG9yJzogL1tee31cXHNdW157fTtdKj8oPz1cXHMqXFx7KS8sXG5cdCdzdHJpbmcnOiB7XG5cdFx0cGF0dGVybjogLyhcInwnKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLFxuXHRcdGdyZWVkeTogdHJ1ZVxuXHR9LFxuXHQncHJvcGVydHknOiAvWy1fYS16XFx4QTAtXFx1RkZGRl1bLVxcd1xceEEwLVxcdUZGRkZdKig/PVxccyo6KS9pLFxuXHQnaW1wb3J0YW50JzogL1xcQiFpbXBvcnRhbnRcXGIvaSxcblx0J2Z1bmN0aW9uJzogL1stYS16MC05XSsoPz1cXCgpL2ksXG5cdCdwdW5jdHVhdGlvbic6IC9bKCl7fTs6XS9cbn07XG5cblByaXNtLmxhbmd1YWdlcy5jc3NbJ2F0cnVsZSddLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLmNzcztcblxuaWYgKFByaXNtLmxhbmd1YWdlcy5tYXJrdXApIHtcblx0UHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya3VwJywgJ3RhZycsIHtcblx0XHQnc3R5bGUnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKDxzdHlsZVtcXHNcXFNdKj8+KVtcXHNcXFNdKj8oPz08XFwvc3R5bGU+KS9pLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNzcyxcblx0XHRcdGFsaWFzOiAnbGFuZ3VhZ2UtY3NzJyxcblx0XHRcdGdyZWVkeTogdHJ1ZVxuXHRcdH1cblx0fSk7XG5cblx0UHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnaW5zaWRlJywgJ2F0dHItdmFsdWUnLCB7XG5cdFx0J3N0eWxlLWF0dHInOiB7XG5cdFx0XHRwYXR0ZXJuOiAvXFxzKnN0eWxlPShcInwnKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDEpW15cXFxcXSkqXFwxL2ksXG5cdFx0XHRpbnNpZGU6IHtcblx0XHRcdFx0J2F0dHItbmFtZSc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvXlxccypzdHlsZS9pLFxuXHRcdFx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdwdW5jdHVhdGlvbic6IC9eXFxzKj1cXHMqWydcIl18WydcIl1cXHMqJC8sXG5cdFx0XHRcdCdhdHRyLXZhbHVlJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IC8uKy9pLFxuXHRcdFx0XHRcdGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNzc1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YWxpYXM6ICdsYW5ndWFnZS1jc3MnXG5cdFx0fVxuXHR9LCBQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZyk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tY2xpa2UuanNcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuUHJpc20ubGFuZ3VhZ2VzLmNsaWtlID0ge1xuXHQnY29tbWVudCc6IFtcblx0XHR7XG5cdFx0XHRwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcblx0XHRcdGxvb2tiZWhpbmQ6IHRydWVcblx0XHR9LFxuXHRcdHtcblx0XHRcdHBhdHRlcm46IC8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0Z3JlZWR5OiB0cnVlXG5cdFx0fVxuXHRdLFxuXHQnc3RyaW5nJzoge1xuXHRcdHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH0sXG5cdCdjbGFzcy1uYW1lJzoge1xuXHRcdHBhdHRlcm46IC8oKD86XFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrKXwoPzpjYXRjaFxccytcXCgpKVtcXHcuXFxcXF0rL2ksXG5cdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRpbnNpZGU6IHtcblx0XHRcdHB1bmN0dWF0aW9uOiAvWy5cXFxcXS9cblx0XHR9XG5cdH0sXG5cdCdrZXl3b3JkJzogL1xcYig/OmlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sXG5cdCdib29sZWFuJzogL1xcYig/OnRydWV8ZmFsc2UpXFxiLyxcblx0J2Z1bmN0aW9uJzogL1thLXowLTlfXSsoPz1cXCgpL2ksXG5cdCdudW1iZXInOiAvXFxiMHhbXFxkYS1mXStcXGJ8KD86XFxiXFxkK1xcLj9cXGQqfFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2ksXG5cdCdvcGVyYXRvcic6IC8tLT98XFwrXFwrP3whPT89P3w8PT98Pj0/fD09Pz0/fCYmP3xcXHxcXHw/fFxcP3xcXCp8XFwvfH58XFxefCUvLFxuXHQncHVuY3R1YXRpb24nOiAvW3t9W1xcXTsoKSwuOl0vXG59O1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgQmVnaW4gcHJpc20tamF2YXNjcmlwdC5qc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5QcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuXHQna2V5d29yZCc6IC9cXGIoPzphc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKVxcYi8sXG5cdCdudW1iZXInOiAvXFxiKD86MFt4WF1bXFxkQS1GYS1mXSt8MFtiQl1bMDFdK3wwW29PXVswLTddK3xOYU58SW5maW5pdHkpXFxifCg/OlxcYlxcZCtcXC4/XFxkKnxcXEJcXC5cXGQrKSg/OltFZV1bKy1dP1xcZCspPy8sXG5cdC8vIEFsbG93IGZvciBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMgKFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMDA4NDQ0KVxuXHQnZnVuY3Rpb24nOiAvW18kYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxccypcXCgpL2ksXG5cdCdvcGVyYXRvcic6IC8tWy09XT98XFwrWys9XT98IT0/PT98PDw/PT98Pj4/Pj89P3w9KD86PT0/fD4pP3wmWyY9XT98XFx8W3w9XT98XFwqXFwqPz0/fFxcLz0/fH58XFxePT98JT0/fFxcP3xcXC57M30vXG59KTtcblxuUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdrZXl3b3JkJywge1xuXHQncmVnZXgnOiB7XG5cdFx0cGF0dGVybjogLygoPzpefFteJFxcd1xceEEwLVxcdUZGRkYuXCInXFxdKVxcc10pXFxzKilcXC8oXFxbW15cXF1cXHJcXG5dK118XFxcXC58W14vXFxcXFxcW1xcclxcbl0pK1xcL1tnaW15dV17MCw1fSg/PVxccyooJHxbXFxyXFxuLC47fSlcXF1dKSkvLFxuXHRcdGxvb2tiZWhpbmQ6IHRydWUsXG5cdFx0Z3JlZWR5OiB0cnVlXG5cdH0sXG5cdC8vIFRoaXMgbXVzdCBiZSBkZWNsYXJlZCBiZWZvcmUga2V5d29yZCBiZWNhdXNlIHdlIHVzZSBcImZ1bmN0aW9uXCIgaW5zaWRlIHRoZSBsb29rLWZvcndhcmRcblx0J2Z1bmN0aW9uLXZhcmlhYmxlJzoge1xuXHRcdHBhdHRlcm46IC9bXyRhLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKj1cXHMqKD86ZnVuY3Rpb25cXGJ8KD86XFwoW14oKV0qXFwpfFtfJGEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSopXFxzKj0+KSkvaSxcblx0XHRhbGlhczogJ2Z1bmN0aW9uJ1xuXHR9LFxuXHQnY29uc3RhbnQnOiAvXFxiW0EtWl1bQS1aXFxkX10qXFxiL1xufSk7XG5cblByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAnc3RyaW5nJywge1xuXHQndGVtcGxhdGUtc3RyaW5nJzoge1xuXHRcdHBhdHRlcm46IC9gKD86XFxcXFtcXHNcXFNdfFxcJHtbXn1dK318W15cXFxcYF0pKmAvLFxuXHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRpbnNpZGU6IHtcblx0XHRcdCdpbnRlcnBvbGF0aW9uJzoge1xuXHRcdFx0XHRwYXR0ZXJuOiAvXFwke1tefV0rfS8sXG5cdFx0XHRcdGluc2lkZToge1xuXHRcdFx0XHRcdCdpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uJzoge1xuXHRcdFx0XHRcdFx0cGF0dGVybjogL15cXCR7fH0kLyxcblx0XHRcdFx0XHRcdGFsaWFzOiAncHVuY3R1YXRpb24nXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRyZXN0OiBudWxsIC8vIFNlZSBiZWxvd1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0J3N0cmluZyc6IC9bXFxzXFxTXSsvXG5cdFx0fVxuXHR9XG59KTtcblByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0Wyd0ZW1wbGF0ZS1zdHJpbmcnXS5pbnNpZGVbJ2ludGVycG9sYXRpb24nXS5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0O1xuXG5pZiAoUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCkge1xuXHRQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdtYXJrdXAnLCAndGFnJywge1xuXHRcdCdzY3JpcHQnOiB7XG5cdFx0XHRwYXR0ZXJuOiAvKDxzY3JpcHRbXFxzXFxTXSo/PilbXFxzXFxTXSo/KD89PFxcL3NjcmlwdD4pL2ksXG5cdFx0XHRsb29rYmVoaW5kOiB0cnVlLFxuXHRcdFx0aW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCxcblx0XHRcdGFsaWFzOiAnbGFuZ3VhZ2UtamF2YXNjcmlwdCcsXG5cdFx0XHRncmVlZHk6IHRydWVcblx0XHR9XG5cdH0pO1xufVxuXG5QcmlzbS5sYW5ndWFnZXMuanMgPSBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdDtcblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgIEJlZ2luIHByaXNtLWZpbGUtaGlnaGxpZ2h0LmpzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdGlmICh0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgfHwgIXNlbGYuUHJpc20gfHwgIXNlbGYuZG9jdW1lbnQgfHwgIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRzZWxmLlByaXNtLmZpbGVIaWdobGlnaHQgPSBmdW5jdGlvbigpIHtcblxuXHRcdHZhciBFeHRlbnNpb25zID0ge1xuXHRcdFx0J2pzJzogJ2phdmFzY3JpcHQnLFxuXHRcdFx0J3B5JzogJ3B5dGhvbicsXG5cdFx0XHQncmInOiAncnVieScsXG5cdFx0XHQncHMxJzogJ3Bvd2Vyc2hlbGwnLFxuXHRcdFx0J3BzbTEnOiAncG93ZXJzaGVsbCcsXG5cdFx0XHQnc2gnOiAnYmFzaCcsXG5cdFx0XHQnYmF0JzogJ2JhdGNoJyxcblx0XHRcdCdoJzogJ2MnLFxuXHRcdFx0J3RleCc6ICdsYXRleCdcblx0XHR9O1xuXG5cdFx0QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncHJlW2RhdGEtc3JjXScpKS5mb3JFYWNoKGZ1bmN0aW9uIChwcmUpIHtcblx0XHRcdHZhciBzcmMgPSBwcmUuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpO1xuXG5cdFx0XHR2YXIgbGFuZ3VhZ2UsIHBhcmVudCA9IHByZTtcblx0XHRcdHZhciBsYW5nID0gL1xcYmxhbmcoPzp1YWdlKT8tKFtcXHctXSspXFxiL2k7XG5cdFx0XHR3aGlsZSAocGFyZW50ICYmICFsYW5nLnRlc3QocGFyZW50LmNsYXNzTmFtZSkpIHtcblx0XHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwYXJlbnQpIHtcblx0XHRcdFx0bGFuZ3VhZ2UgPSAocHJlLmNsYXNzTmFtZS5tYXRjaChsYW5nKSB8fCBbLCAnJ10pWzFdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWxhbmd1YWdlKSB7XG5cdFx0XHRcdHZhciBleHRlbnNpb24gPSAoc3JjLm1hdGNoKC9cXC4oXFx3KykkLykgfHwgWywgJyddKVsxXTtcblx0XHRcdFx0bGFuZ3VhZ2UgPSBFeHRlbnNpb25zW2V4dGVuc2lvbl0gfHwgZXh0ZW5zaW9uO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY29kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NvZGUnKTtcblx0XHRcdGNvZGUuY2xhc3NOYW1lID0gJ2xhbmd1YWdlLScgKyBsYW5ndWFnZTtcblxuXHRcdFx0cHJlLnRleHRDb250ZW50ID0gJyc7XG5cblx0XHRcdGNvZGUudGV4dENvbnRlbnQgPSAnTG9hZGluZ+KApic7XG5cblx0XHRcdHByZS5hcHBlbmRDaGlsZChjb2RlKTtcblxuXHRcdFx0dmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdFx0XHR4aHIub3BlbignR0VUJywgc3JjLCB0cnVlKTtcblxuXHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHtcblxuXHRcdFx0XHRcdGlmICh4aHIuc3RhdHVzIDwgNDAwICYmIHhoci5yZXNwb25zZVRleHQpIHtcblx0XHRcdFx0XHRcdGNvZGUudGV4dENvbnRlbnQgPSB4aHIucmVzcG9uc2VUZXh0O1xuXG5cdFx0XHRcdFx0XHRQcmlzbS5oaWdobGlnaHRFbGVtZW50KGNvZGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmICh4aHIuc3RhdHVzID49IDQwMCkge1xuXHRcdFx0XHRcdFx0Y29kZS50ZXh0Q29udGVudCA9ICfinJYgRXJyb3IgJyArIHhoci5zdGF0dXMgKyAnIHdoaWxlIGZldGNoaW5nIGZpbGU6ICcgKyB4aHIuc3RhdHVzVGV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRjb2RlLnRleHRDb250ZW50ID0gJ+KcliBFcnJvcjogRmlsZSBkb2VzIG5vdCBleGlzdCBvciBpcyBlbXB0eSc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHR4aHIuc2VuZChudWxsKTtcblx0XHR9KTtcblxuXHRcdGlmIChQcmlzbS5wbHVnaW5zLnRvb2xiYXIpIHtcblx0XHRcdFByaXNtLnBsdWdpbnMudG9vbGJhci5yZWdpc3RlckJ1dHRvbignZG93bmxvYWQtZmlsZScsIGZ1bmN0aW9uIChlbnYpIHtcblx0XHRcdFx0dmFyIHByZSA9IGVudi5lbGVtZW50LnBhcmVudE5vZGU7XG5cdFx0XHRcdGlmICghcHJlIHx8ICEvcHJlL2kudGVzdChwcmUubm9kZU5hbWUpIHx8ICFwcmUuaGFzQXR0cmlidXRlKCdkYXRhLXNyYycpIHx8ICFwcmUuaGFzQXR0cmlidXRlKCdkYXRhLWRvd25sb2FkLWxpbmsnKSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgc3JjID0gcHJlLmdldEF0dHJpYnV0ZSgnZGF0YS1zcmMnKTtcblx0XHRcdFx0dmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cdFx0XHRcdGEudGV4dENvbnRlbnQgPSBwcmUuZ2V0QXR0cmlidXRlKCdkYXRhLWRvd25sb2FkLWxpbmstbGFiZWwnKSB8fCAnRG93bmxvYWQnO1xuXHRcdFx0XHRhLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCAnJyk7XG5cdFx0XHRcdGEuaHJlZiA9IHNyYztcblx0XHRcdFx0cmV0dXJuIGE7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0fTtcblxuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgc2VsZi5QcmlzbS5maWxlSGlnaGxpZ2h0KTtcblxufSkoKTsiLCJleHBvcnQgY29uc3QgcmVzdW1lOnN0cmluZyA9IGAjIHFpdWZlaWhvbmdcblxuRnJvbnQgRW5kIEVuZ2luZWVyXG5cbiMgQXZhaWxhYmlsaXR5XG5cbiogaHRtbCwgY3NzLCBqcywgZWxlbWVudC11aVxuKiB2dWUsIG5vZGVqcywgalF1ZXJ5XG4qIHBtMiwgc29ja2V0LWlvLCBlY2hhcnRzXG5cbiMgV29yayBFeHBlcmllbmNlXG5cbiog6LC36YC456eR5oqAXG5cbiMgQ29tcGFueSBQcm9qZWN0c1xuIyMgRGVlcFNwaGVyZS1uYXNcbiogMjAxOS4wMS3oh7Pku4ogd2Vi5YmN56uvXG7mj4/ov7DvvJrmraTpobnnm67kuLvopoHlsZXnpLrns7vnu5/kv6Hmga/jgIHnlKjmiLfjgIHno4Hnm5jkv6Hmga/lkozmnI3liqHvvIzlrp7njrDmn6XnnIvmnI3liqHkv6Hmga8v5Li75py65L+h5oGvXG7jgIHnvZHnu5zlkI3jgIFJUOiuvue9ruOAgeeUqOaIt+euoeeQhuOAgeeUqOaIt+e7hOeuoeeQhuOAgeWFseS6q+aWh+S7tuWkueeuoeeQhuOAgeejgeebmOS/oeaBr+OAgVMuTS5BLlIuVOOAgVJBSUTjgIHmlofku7bns7vnu5/jgIFORlPjgIFTYW1iYeetieWKn+iDvVxuXG4qIOWyl+S9jeiBjOi0o++8mlxu5LuOMC0x5a6M5oiQ5YmN56uv6aG16Z2iXG5cbiog5a6e546w5oqA5pyv77yaXG52dWXlhajlrrbmobYrZWxlbWVudC11aVxuXG5cbiMjIHhBbGVydFxuKiAyMDE5LjAxLeiHs+S7iiB3ZWLliY3nq69cbuaPj+i/sO+8muatpOmhueebruS4u+imgemhtemdouaciei1hOS6pyjotYTkuqfmgLvop4gs5ryP5rSe5qOA5rWLLOi1hOS6p+ivpuaDhSnjgIHmtYHph4/jgIHlronlhajjgIHorabmiqXlkozphY3nva7vvIzkuLvpobXlsZXnpLrml6Xlv5flpITnkIbnjofjgIHmlbDmja7lpITnkIbotovlir/jgIHpobbnuqfnlKjmiLfvvIjmupDnq5nvvInjgIHlqIHog4HmtLvliqjlm77vvIjmnKzlnJ/ljJbvvInjgIHmnIDpq5jlupTnlKjlkozmjInnirbmgIHnmoTmoYjkvovotovlir/nmoTlrZDpobkuXG5cbiog5bKX5L2N6IGM6LSj77yaXG7moLnmja7kuqTkupLlkozop4bop4nmlrnmoYjku6Xlj4rliY3nq6/moYbmnrbov5vooYzlrozmiJDpobXpnaLljp/lnovvvIzlhbzlrrnkuLvmtYHmtY/op4jlmajjgIJcblxuKiDlrp7njrDmioDmnK/vvJpcbkVDaGFydHMrdnVl5YWo5a625qG2K2VsZW1lbnQtdWlcblxuIyMgeFNoaWVkXG4qIDIwMTguMDktMjAxOC4xMiB3ZWLliY3nq69cbuaPj+i/sO+8mjEuIFhTaGllZOaYr+S4gOS4quWfuuS6jkZyZWVCU0TvvIzlroPooqvlronoo4XlnKjorqHnrpfmnLrkuIrkvZzkuLrnvZHnu5zkuK3nmoTpmLLngavlopnlkozot6/nlLHlmajlrZjlnKjjgIJcbjIuIFhTaGllZOmAmui/h1dFQumhtemdoui/m+ihjOmFjee9ru+8jOWNh+e6p+WSjOeuoeeQhuiAjOS4jemcgOimgeS9v+eUqOiAheWFt+Wkh0ZyZWVCU0TlupXlsYLnn6Xor4bjgIJcbjMuIFhTaGllZOmAmuW4uOiiq+mDqOe9suS9nOS4uui+ueeVjOmYsueBq+Wime+8jOi3r+eUseWZqO+8jOaXoOe6v+aOpeWFpeeCue+8jERIQ1DmnI3liqHlmajvvIxETlPmnI3liqHlmajlkoxWUE7nq6/ngrnjgIJcblxuKiDlspfkvY3ogYzotKPvvJpcbuWujOaIkOS4gOezu+WIl+W3peaOp+mhtemdoueahOW8gOWPkeW3peS9nFxuXG4qIOWunueOsOaKgOacr++8mlxudnVl5YWo5a625qG2K2VsZW1lbnQtdWlcblxuIyMgRGVlcEZpbGVBaS13ZWJcbiogMjAxOC4wOC0yMDE4LjEyIHdlYuWJjeerr1xu5o+P6L+w77ya5q2k6aG555uu5Li76KaB5a6M5oiQ5paH5qGj5oq95Y+W44CB5paH5qGj5a6h5qC444CB5paH5qGj5a+55q+U44CB5paH5qGj5qCH5rOo44CB5L+h5oGv5p+l6K+i44CB5paH5qGj6YWN572u44CB5rex5bqm5qih5Z6L44CB5p2D6ZmQ566h55CG562J5Yqf6IO9XG5cbiog5bKX5L2N6IGM6LSj77yaXG7lrozmiJDnmbvlvZXpobXpnaLku6Xlj4rmlofmoaPlr7nmr5TnmoTlkIzmraXmu5rliqjnu4Tku7ZcblxuKiDlrp7njrDmioDmnK/vvJpcbm51eHQrdnVl5YWo5a625qG2K2VsZW1lbnR1aStub2RlK2l2ZXdcblxuIyMgRGVlcERlZmVuY2Utd2ViXG4qIDIwMTguMDctMjAxOC4xMiB3ZWLliY3nq69cbuaPj+i/sO+8mmNsYWly55qE55uu5qCH5piv6IO95aSf5LuO5LiA5Liq5pu05Yqg6YCP5piO55qE57u05bqm5Y6755yL5b6F5Z+65LqO5a655Zmo5YyW55qE5Z+656GA5qGG5p6255qE5a6J5YWo5oCn44CCXG4xLkNsYWly5Lya5a6a5pyf5LuO5LiA57uE5bey6YWN572u55qE5rqQ5Lit5o+Q5Y+W5ryP5rSe5YWD5pWw5o2u77yM5bm25bCG5YW25a2Y5YKo5Zyo5pWw5o2u5bqT5Lit44CCXG4yLuWuouaIt+err+S9v+eUqENsYWlyIEFQSeadpee0ouW8leWFtuWuueWZqOaYoOWDjzsg6L+Z5bCG5Yib5bu65Zu+5YOP5Lit5a2Y5Zyo55qE5Yqf6IO95YiX6KGo77yM5bm25bCG5a6D5Lus5a2Y5YKo5Zyo5pWw5o2u5bqT5Lit44CCXG4zLuWuouaIt+err+S9v+eUqENsYWlyIEFQSeWcqOaVsOaNruW6k+S4reafpeivoueJueWumuaYoOWDj+eahOa8j+a0njsg5Li65q+P5Liq6K+35rGC5YWz6IGU5ryP5rSe5ZKM5Yqf6IO977yM6YG/5YWN6YeN5paw5omr5o+P5Zu+5YOP44CCXG40LuWPkeeUn+a8j+a0nuWFg+aVsOaNruabtOaWsOaXtu+8jOWPr+S7peWQkeitpuaKpeezu+e7n+WPkemAgeabtOaUueW3suWPkeeUn+eahOmAmuefpVxuXG4qIOmhueebruWKn+iDvTogXG7pgJrov4flr7nlrrnlmajnmoRsYXllcui/m+ihjOaJq+aPj++8jOWPkeeOsOa8j+a0nuW5tui/m+ihjOmihOitpu+8jOWFtuS9v+eUqOaVsOaNruaYr+WfuuS6jkNvbW1vbiBWdWxuZXJhYmlsaXRpZXMgYW5kIEV4cG9zdXJlc+aVsOaNruW6k+eugOensENWRSwg5ZCETGludXjlj5HooYzniYjkuIDoiKzpg73mnInoh6rlt7HnmoRDVkXmupDvvIzogIxDbGFpcuWImeaYr+S4juWFtui/m+ihjOWMuemFjeS7peWIpOaWrea8j+a0nueahOWtmOWcqOS4juWQpu+8jOavlOWmgkhlYXJ0QmxlZWTnmoRDVkXkuLrvvJpDVkUtMjAxNC0wMTYwXG5cbiog5bKX5L2N6IGM6LSj77yaXG7ku44wLTHlrozmiJDliY3nq6/pobXpnaJcblxuIyMgY29kZXItaW50ZXJ2aWV3LXF1ZXN0aW9uc1xuKiAyMDE4LjA1LTIwMTguMDcgd2Vi5YmN56uvXG7mj4/ov7DvvJrlhazlj7jnmoTkuIDkuKrnrJTor5XnvZHnq5lcblxuKiDlspfkvY3ogYzotKPvvJpcbuS7jjAtMeWujOaIkOWJjeerr+mhtemdolxuXG4qIOWunueOsOaKgOacr++8mlxudnVl5YWo5a625qG2K2VsZW1lbnQtdWlcblxuKiDkuJrnu6nvvJrliY3lkI7nq6/pnaLor5XogIXlj6/ku6XlnKjnur/nrZTpopjvvIznrZTpopjpgJrov4fljbPlj6/ov4fmnaXmioDmnK/pnaLor5XvvIzlpKflpKfop6PmlL7kuobmioDmnK/kurrlkZjnmoTlirPliqjliptcblxuKiDpobnnm67pk77mjqXvvJpodHRwOi8vZ3VzaGVueGluZy5mMzMyMi5uZXQ6MTEwOTMvaW5kZXhcblxuKiDlrp7njrDmioDmnK/vvJp2dWXlhajlrrbmobYrZWxlbWVudC11aStzb2NrZXQtaW9cblxuIyBQZXJzb25hbCBQcm9qZWN0XG4jIyB2dWUtZWxlbWVudC10YWNrLW91dO+8iOS4quS6uumhueebru+8iVxuKiAyMDE4LjExLeiHs+S7iiDlhajmoIjlt6XnqIvluIhcbuaPj+i/sO+8muatpOmhueebruaYr+S4gOS4quWkluWNluWQjuWPsOeahOeuoeeQhuezu+e7n++8jOacieS5sOWutueuoeeQhuOAgeWNluWutueuoeeQhuOAgeiuouWNleeuoeeQhuOAgeeuoeeQhuWRmOeuoeeQhuOAgea3u+WKoOWVhuWTgeOAgea3u+WKoOW6l+mTuuetieWKn+iDvVxuXG4qIOWyl+S9jeiBjOi0o++8mlxu5LuOMC0x5a6M5oiQ566h55CG57O757ufXG5cbiog5a6e546w5oqA5pyv77yaXG52dWXlhajlrrbmobYrZXhwcmVzcytlbGVtZW50LXVpK01vbmdvREJcblxuKiDpobnnm67pk77mjqXvvJpodHRwOi8vMTA2LjE0LjE2OS4xMjoxMjM0XG5cbiMjIOazouaZruWkp+aVsOaNrueglOeptuaJgOmXqOaIt+e9keermVxuKiAyMDE4LjAzLTIwMTguMDcgd2Vi5YmN56uvXG7mj4/ov7DvvJrlrabmoKHnmoTnoJTnqbbmiYDnvZHnq5nvvIzkuLvopoHkuLrkuoblhoXpg6jkurrlkZjlsZXnpLrnoJTnqbbpobnnm67lkozorqjorrrmnIDmlrDmioDmnK/nrYnjgILmiJHku6zph4fnlKhtYXZlbuaehOW7uumhueebru+8jOmhueebruWIhuS4uuWJjeWPsOWSjOWQjuWPsO+8jOaUvuWIsOWQjOS4gOS4quacjeWKoeWZqOS4iu+8jOWFseeUqOS4gOS4quaVsOaNruW6k+OAglxuXG4qIOWKn+iDveWmguS4i++8mlxuMS4g5YmN5Y+w55qE5Yqf6IO977yI55m75b2V44CB5rOo5YaM44CB5p+l55yL5paH56ug44CB5Liq5Lq65Lit5b+D44CB6IGK5aSp44CB5b+Y6K6w5a+G56CB44CB5pu05pS55a+G56CB44CB5Li76aG144CB6K+E6K6655WZ6KiA44CB6IGU57O75oiR5Lus44CB56CU56m25omA566A5LuL44CB6ZSZ6K+v6aG16Z2i562J77yJ77ybXG4yLiDlkI7lj7DnmoTlip/og73vvIjova7mkq3lm77nrqHnkIbjgIHmlofnq6DnrqHnkIbjgIHlhbPkuo7miJHku6znrqHnkIbnrYnnrYnvvInjgIJcblxuKiDotKPku7vmj4/ov7DvvJpcbjEuIOS4u+imgei0n+i0o+S4muWKoemcgOaxguWIhuaekFxuMi4g5YmN56uv6aG16Z2i55qE6K6+6K6h5LiO5a6e546w5Lul5Y+K5ZCO5Y+wanNw55qE57yW5YaZXG4zLiDlrp7njrDmn6XnnIvmlofnq6DjgIHogYrlpKnjgIHor4TorrrnlZnoqIDjgIHmlofnq6DnrqHnkIbnrYnlip/og73jgIJcblxuKiDpobnnm67mioDmnK/vvJpcbkJvb3RzdHJhcCtqUXVlcnkrVUVkaXRvcitNYXZlbitsYXlVSVxuXG4qIOmhueebrumTvuaOpe+8mmh0dHA6Ly8xMTEuMjMxLjU1LjQxL1xuYFxuIiwiaW1wb3J0IHtpc01vYmlsZX0gZnJvbSAnLi4vc2NyaXB0cy9hbmltYXRlUmVzdW1lL3VudGlscy91bnRpbHMnXG5cbmNvbnN0IGlzX21vYmlsZTogYm9vbGVhbiA9IGlzTW9iaWxlKClcblxuZXhwb3J0IGNvbnN0IHN0eWxlMTpzdHJpbmcgPSBgLyoqXG4gKlxuICogSGV5LiBNeSBuYW1lJ3MgcWl1ZmVpaG9uZy4gSSdtIGEgd2ViIGRldmVsb3Blci5cbiAqXG4gKiBJIGJ1aWxkIGEgYW5pbWF0aW5nIHJlc3VtZVxuICpcbiAqIExldCdzIGJlZ2luLiBXZSBzdGFydCBieSBhbmltYXRpbmcuLi5cbiAqIHllcywgZXZlcnl0aGluZy5cbiAqL1xuXG4qIHtcbiAgdHJhbnNpdGlvbjogYWxsIDFzO1xufVxuXG4vKipcbiAqIEl0IHNlZW1zIHRvIGRvIG5vdGluZy4gQnV0IHlvdSdsbCBzZWUuXG4gKlxuICogQmxhY2sgb24gd2hpdGUgaXMgcmVhbGx5IGJvcmluZyxcbiAqIGNoYW5nZSB0aHJlbSBmaXJzdC5cbiAqL1xuXG5odG1sIHtcbiAgYmFja2dyb3VuZDogIzIxNjU4MztcbiAgZm9udC1zaXplOiAxMHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKioqXG4gKiBIb2xkIG9uLi4uXG4gKi9cblxucHJlLCBhIHtcbiAgY29sb3I6ICNmZmZmZmY7XG59XG5cbi8qKlxuICogVGhhdCdzIGJldHRlci5cbiAqXG4gKiBXb3JraW5nIGluIHRoaXMgYmlnIHJlbXB0eSBzcGFjZSBpcyB0b3VnaC5cbiAqXG4gKiBJJ20gZ29pbmcgdG8gbWFrZSBhIG5pY2UgYXJlYSB0byBzaG93IHRoZSBjb250ZW50LlxuICovXG5cbnByZTpub3QoOmVtcHR5KSB7XG4gICR7aXNfbW9iaWxlID9cbiAgYGhlaWdodDo0NiU7XG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAycmVtKTtgXG4gIDpcbiAgYGhlaWdodDogMTAwJTtgfVxuICBmb250LXNpemU6IDEuNHJlbTtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIGJhY2tncm91bmQ6IHJnYig0OCwgNDgsIDQ4KTtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgcGFkZGluZzogMXJlbSAxcmVtIDJyZW07XG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcbiAgb3V0bGluZTogMDtcbn1cblxuI3N0eWxlLWNvbnRhaW5lciB7XG4gIGhlaWdodDo5MiU7JHtpc19tb2JpbGUgPyAnd2lkdGg6MTAwJTsnIDogJ3dpZHRoOiA0OSU7dHJhbnNmb3JtOiB0cmFuc2xhdGVYKDk1JSk7J31cbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAxcmVtO1xuICB0b3A6IDFyZW07XG59XG5cbi8qKlxuICogVGhpcyBpcyBnb29kLCBidXQgYWxsIHRoZSB0ZXh0IGlzIHdoaXRlIVxuICogTGV0J3MgbWFrZSBpdCBtb3JlIHJlYWRhYmxlLlxuICovXG5cbiNzdHlsZS1jb250YWluZXIgIHsgY29sb3I6ICNERURFREUgfVxuLmNvbW1lbnQgICAgICAgeyBjb2xvcjogIzg1N0Y2QjsgZm9udC1zdHlsZTogaXRhbGljOyB9XG4uc2VsZWN0b3IgICAgICB7IGNvbG9yOiAjRDdCQTdEOyB9XG4ua2V5d29yZCAgICAgICB7IGNvbG9yOiAjNTY5Q0Q2OyB9XG4ucHJvcGVydHkgICAgICB7IGNvbG9yOiAjNTY5Q0Q2OyB9XG4uZnVuY3Rpb24gICAgICB7IGNvbG9yOiAjQzM2NkEzOyB9XG4ucHVuY3R1YXRpb24gICB7IGNvbG9yOiAjRkZDRjAwOyB9XG5cbi8qKlxuICogSXRcXGBzIHRpbWUgdG8gZ2V0IGEgbGl0dGxlIHBlcnNwZWN0aXZlLlxuICovXG5cbmJvZHkge1xuICBwZXJzcGVjdGl2ZTogMTAwcmVtO1xufVxuXG4jc3R5bGUtY29udGFpbmVyIHtcbiAgJHtpc19tb2JpbGUgPyAndHJhbnNmb3JtOiByb3RhdGVYKC0xMGRlZyk7JyA6ICd0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoOTguNSUpIHJvdGF0ZVkoLTEwZGVnKTsnfVxuICB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodDtcbn1cblxuLyoqXG4gKiBPa2V5LCBpdCBpcyB0aW1lIHRvIHNob3cgdGhlIHJlc3VtZS5cbiAqIFlvdSBtdXN0IG5vdCBqdXN0IGNvbWUgdG8gc2VlIHRoZSBwcmV0dHkgY29sb3JzLlxuICovXG5cbiAjcmVzdW1lLWNvbnRhaW5lciB7XG4gIGhlaWdodDo5MiU7JHtpc19tb2JpbGU/J3dpZHRoOjEwMCU7Jzond2lkdGg6IDQ5JTsnfVxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICR7aXNfbW9iaWxlID8gXG4gIGAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAxcmVtO1xuICB0b3A6NTAlO2BcbiAgOiBgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMXJlbTtcbiAgdG9wOiAxcmVtO1xuICB0cmFuc2Zvcm06IHJvdGF0ZVkoMTBkZWcpO1xuICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O2B9XG59XG5gXG5cbmV4cG9ydCBjb25zdCBzdHlsZTIgPSBgLyoqXG4gKiBUaGF0IG1hcmtkb3duIG9uIHRoZSBsZWZ0IGRvZXNuJ3QgbG9vayBncmVhdC4gTGV0J3MgcmVuZGVyIGl0LlxuICovXG5cbiNyZXN1bWUtY29udGFpbmVye1xuICBmb250LXNpemU6IDEuNHJlbTtcbn1cbiNyZXN1bWUtY29udGFpbmVyIGgxe1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcbiAgbWFyZ2luOiAuNXJlbSAwIDFyZW07XG4gIGZvbnQtc2l6ZTogMi42cmVtO1xufVxuI3Jlc3VtZS1jb250YWluZXIgYXtcbiAgY29sb3I6ICNmZmZmZmY7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cbiNyZXN1bWUtY29udGFpbmVyIHVsPiBsaXtcbiAgbWFyZ2luLWJvdHRvbTogLjNyZW07XG59XG4jcmVzdW1lLWNvbnRhaW5lciB1bD4gbGk6OmJlZm9yZXtcbiAgY29udGVudDogJ+KAoic7XG4gIG1hcmdpbi1yaWdodDogLjVyZW07XG4gIGNvbG9yOiAnI2ZmZmZmZic7XG59XG5cbi8qKlxuICogT2tleSwgdGhpcyBpcyBhbG1vc3QgZG9uZS5cbiAqXG4gKiBUaGlzIHBhZ2UgaXMgaW5zcGlyZWQgYnkgaHR0cDovL3N0cm1sLm5ldC/vvIwgd2hpY2ggd2FzIHdoYXQgSSBtZXQgd2hlbiBJIHdhcyBhIGJlZ2lubmVyIG9mIGpzLlxuICpcbiAqIEl0IGlzIHJlYWxseSBzdXJwcmlzZSBtZSwgYW5kIG5vdyBJIGNhbiBjb2RlIGl0IGJ5IG15c2VsZi5cbiAqXG4gKiBFcnRhaW5see+8jG1vc3Qgb2Ygc2VudGVuY2VzIGlzIGZyb20gdGhhdCwgbXkgRW5nbGlzaCBpcyB2ZXJ5IHBvb3J+IGFmdGVyIGFsbC5cbiAqXG4gKi9gXG4iLCJpbXBvcnQge0NvcmUsIENvcmVPcHRpb25zLCBMb2FkUGFyYW1zfSBmcm9tIFwiLi9pbnRlcmZhY2VcIjtcbmltcG9ydCB7XG4gIGdldEludGVydmFsLFxuICBoYW5kbGVTdHlsZSxcbiAgZ2V0U3R5bGVFbCxcbiAgY3JlYXRlQ29udGFpbmVyLFxuICBpc01vYmlsZVxufSBmcm9tIFwiLi91bnRpbHMvdW50aWxzXCI7XG5pbXBvcnQgbW9iaWxlRW5kQW5pbWF0ZSBmcm9tICcuL3VudGlscy9tb2JpbGVFbmRBbmltYXRlJ1xuaW1wb3J0ICogYXMgUHJpc20gZnJvbSAncHJpc21qcyc7XG5pbXBvcnQgKiBhcyBtYXJrZWQgZnJvbSAnbWFya2VkJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRlUmVzdW1lIGltcGxlbWVudHMgQ29yZSB7XG4gIGNvbnRhaW5lcjogRWxlbWVudFxuICBvcHRpb25zOiBDb3JlT3B0aW9uc1xuICBpc1NraXA6IGJvb2xlYW5cblxuICBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEVsZW1lbnQsIG9wdGlvbnM6IENvcmVPcHRpb25zKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5pc1NraXAgPSBmYWxzZVxuICB9XG5cbiAgcHJpdmF0ZSBsb2FkKGNvbnRlbnRzOiBBcnJheTxMb2FkUGFyYW1zPixmbj86RnVuY3Rpb24pIHtcbiAgICBpZiAoY29udGVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmxvYWRJdGVtKGNvbnRlbnRzWzBdKVxuICAgICAgICAudGhlbigoKSA9PiB0aGlzLmxvYWQoY29udGVudHMuc2xpY2UoMSksZm4pKVxuICAgICAgICAuY2F0Y2goKCkgPT4gdGhpcy5za2lwQW5pbWF0ZSgpKVxuICAgIH0gZWxzZSB7XG5cbiAgICAgIGlmIChpc01vYmlsZSgpKSB7XG4gICAgICAgIG1vYmlsZUVuZEFuaW1hdGUodGhpcy5vcHRpb25zLm1vYmlsZUFuaW1hdGUuc3R5bGVJRCwgdGhpcy5vcHRpb25zLm1vYmlsZUFuaW1hdGUucmVzdW1lSUQpXG4gICAgICB9XG5cbiAgICAgIGZuICYmIGZuKClcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGxvYWRJdGVtKGl0ZW06IExvYWRQYXJhbXMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gY3JlYXRlQ29udGFpbmVyKHRoaXMuY29udGFpbmVyLCBpdGVtLmlkKVxuICAgICAgbGV0IG51bSA9IDBcbiAgICAgIGNvbnN0IHN1bSA9IGl0ZW0ubG9hZC5sZW5ndGhcbiAgICAgIGxldCBvcmlnaW5Db250ZW50ID0gaXRlbS5yZXdyaXRlID8gJycgOiBjb250YWluZXIuaW5uZXJIVE1MXG4gICAgICBjb25zdCBpbnRlcnZhbCA9IDE2XG5cbiAgICAgIGxldCBzdHlsZUVsOiBFbGVtZW50XG4gICAgICBpZiAoaXRlbS50eXBlID09PSAnY3NzJykge1xuICAgICAgICBzdHlsZUVsID0gZ2V0U3R5bGVFbCgpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0YXJ0TG9hZCA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgbnVtICs9IDFcbiAgICAgICAgICBpZiAobnVtIDw9IHN1bSkge1xuXG4gICAgICAgICAgICBsZXQgc3RyID0gaXRlbS5sb2FkLnN1YnN0cigwLCBudW0pXG5cbiAgICAgICAgICAgIGxldCBjb2RlOiBzdHJpbmdcblxuICAgICAgICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAnY3NzJzpcbiAgICAgICAgICAgICAgICBoYW5kbGVTdHlsZShzdHIsIHN0eWxlRWwpXG4gICAgICAgICAgICAgICAgY29kZSA9IFByaXNtLmhpZ2hsaWdodChzdHIsIFByaXNtLmxhbmd1YWdlcy5jc3MpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSAnbWQnOlxuICAgICAgICAgICAgICAgIGNvZGUgPSBtYXJrZWQoc3RyKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBuZXh0SW50ZXJ2YWwgPSBnZXRJbnRlcnZhbChzdHIsIGludGVydmFsKVxuXG4gICAgICAgICAgICBjb250YWluZXIuc2Nyb2xsVG9wID0gMTAwMDAwXG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBvcmlnaW5Db250ZW50ICsgY29kZVxuXG4gICAgICAgICAgICBpZiAodGhpcy5pc1NraXApIHtcbiAgICAgICAgICAgICAgcmVqZWN0KClcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0YXJ0TG9hZCgpXG4gICAgICAgICAgICAgIH0sIG5leHRJbnRlcnZhbClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpXG4gICAgICAgICAgfVxuICAgICAgICB9LCBpbnRlcnZhbClcbiAgICAgIH1cblxuICAgICAgc3RhcnRMb2FkKClcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBza2lwQW5pbWF0ZSgpIHtcbiAgICB0aGlzLm9wdGlvbnMuY29udGVudC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVDb250YWluZXIodGhpcy5jb250YWluZXIsIGl0ZW0uaWQpXG5cbiAgICAgIHN3aXRjaCAoaXRlbS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2Nzcyc6XG4gICAgICAgICAgdGhpcy5za2lwU3R5bGUoaXRlbSwgY29udGFpbmVyKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ21kJzpcbiAgICAgICAgICB0aGlzLnNraXBNZChpdGVtLCBjb250YWluZXIpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgaWYgKGlzTW9iaWxlKCkpIHtcbiAgICAgIG1vYmlsZUVuZEFuaW1hdGUodGhpcy5vcHRpb25zLm1vYmlsZUFuaW1hdGUuc3R5bGVJRCwgdGhpcy5vcHRpb25zLm1vYmlsZUFuaW1hdGUucmVzdW1lSUQpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBza2lwU3R5bGUoaXRlbTogTG9hZFBhcmFtcywgY29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgY29uc3Qgc3R5bGVTdHIgPSBpdGVtLmxvYWRcbiAgICBjb25zdCBzdHlsZUVsID0gZ2V0U3R5bGVFbCgpXG4gICAgbGV0IG9yaWdpbkNvbnRlbnQgPSAnJ1xuICAgIGNvbnN0IGNvZGUgPSBQcmlzbS5oaWdobGlnaHQoc3R5bGVTdHIsIFByaXNtLmxhbmd1YWdlcy5jc3MpXG5cbiAgICBpZiAoIWl0ZW0ucmV3cml0ZSkge1xuICAgICAgb3JpZ2luQ29udGVudCA9IGNvbnRhaW5lci5pbm5lckhUTUxcbiAgICB9XG5cbiAgICBzdHlsZUVsLmlubmVySFRNTCA9IHN0eWxlU3RyXG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IG9yaWdpbkNvbnRlbnQgKyBjb2RlXG4gIH1cblxuICBwcml2YXRlIHNraXBNZChpdGVtOiBMb2FkUGFyYW1zLCBjb250YWluZXI6IEVsZW1lbnQpIHtcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gbWFya2VkKGl0ZW0ubG9hZClcbiAgfVxuXG4gIHB1YmxpYyBhbmltYXRlKGZuPzpGdW5jdGlvbikge1xuICAgIHRoaXMubG9hZCh0aGlzLm9wdGlvbnMuY29udGVudCxmbilcbiAgfVxuXG4gIHB1YmxpYyBza2lwKCkge1xuICAgIHRoaXMuaXNTa2lwID0gdHJ1ZVxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBCU2Nyb2xsIGZyb20gJ2JldHRlci1zY3JvbGwnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1vYmlsZUVuZEFuaW1hdGUoc3R5bGVJRDogc3RyaW5nLCByZXN1bWVJRDogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnN0IGJvZHk6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpXG4gIGNvbnN0IHN0eWxlQ29udGFpbmVyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3N0eWxlSUR9YClcbiAgY29uc3Qgc3R5bGU6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7c3R5bGVJRH0tcHJlYClcbiAgY29uc3QgbWRDb250YWluZXI6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7cmVzdW1lSUR9YClcbiAgY29uc3QgbWQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7cmVzdW1lSUR9LXByZWApXG5cbiAgYm9keS5zdHlsZS5jc3NUZXh0ID0gJ292ZXJmbG93OmhpZGRlbidcblxuICBsZXQgY3NzID0ge1xuICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gMnJlbSknLFxuICAgIGhlaWdodDogJ2NhbGMoMTAwJSAtIDRyZW0pJyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjY2MnLFxuICAgIGJhY2tncm91bmQ6ICdyZ2IoNDgsIDQ4LCA0OCknLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGxlZnQ6ICcxcmVtJyxcbiAgfVxuICBjb25zdCBjc3NTdHIgPSAoPGFueT5PYmplY3QpLmVudHJpZXMoY3NzKS5tYXAoKHY6IEFycmF5PHN0cmluZz4pID0+IHYuam9pbignOicpKS5qb2luKCc7JylcblxuICBzdHlsZUNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gY3NzU3RyXG4gIG1kQ29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBjc3NTdHJcblxuICBzdHlsZUNvbnRhaW5lci5zdHlsZS50b3AgPSAnMXJlbSdcbiAgbWRDb250YWluZXIuc3R5bGUudG9wID0gJ2NhbGMoMTAwJSArIDFyZW0pJ1xuXG4gIGNvbnN0IHByZUNzcyA9IHtcbiAgICB0cmFuc2l0aW9uOiAnYWxsIDBzJyxcbiAgICBtYXhIZWlnaHQ6ICdub25lJyxcbiAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgIHBvc2l0aW9uOiAnc3RhdGljJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIGhlaWdodDogJ2F1dG8nLFxuICB9XG4gIGxldCBwcmVDc3NTdHIgPSAoPGFueT5PYmplY3QpLmVudHJpZXMocHJlQ3NzKS5tYXAoKHY6IEFycmF5PHN0cmluZz4pID0+IHYuam9pbignOicpKS5qb2luKCc7JylcblxuICBzdHlsZS5zdHlsZS5jc3NUZXh0ID0gcHJlQ3NzU3RyXG4gIG1kLnN0eWxlLmNzc1RleHQgPSBwcmVDc3NTdHJcblxuICBzdHlsZS5zdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlWCgwZGVnKSdcbiAgbWQuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICcxMHJlbSdcblxuXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIG1kQ29udGFpbmVyLnN0eWxlLnRyYW5zaXRpb24gPSAndHJhbnNmb3JtIC41cyBlYXNlLW91dCdcbiAgICBzdHlsZUNvbnRhaW5lci5zdHlsZS50cmFuc2l0aW9uID0gJ3RyYW5zZm9ybSAuNXMgZWFzZS1vdXQnXG4gICAgbWRDb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoY2FsYygtMTAwJSAtIDRyZW0pKSdcbiAgICBzdHlsZUNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWShjYWxjKC0xMDAlIC0gMXJlbSkpJ1xuICB9LCA1MDApXG5cbiAgY29uc3Qgc3R5bGVTY3JvbGwgPSBuZXcgKDxhbnk+QlNjcm9sbCkoc3R5bGVDb250YWluZXIsIHtcbiAgICBwdWxsVXBMb2FkOiB7XG4gICAgICB0aHJlc2hvbGQ6IDIwXG4gICAgfVxuICB9KVxuXG4gIGNvbnN0IG1kU2Nyb2xsID0gbmV3ICg8YW55PkJTY3JvbGwpKG1kQ29udGFpbmVyLCB7XG4gICAgcHVsbERvd25SZWZyZXNoOiB7XG4gICAgICB0aHJlc2hvbGQ6IDIwLFxuICAgIH1cbiAgfSlcblxuICBzdHlsZVNjcm9sbC5vbigncHVsbGluZ1VwJywgZnVuY3Rpb24gKCkge1xuICAgIG1kQ29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKGNhbGMoLTEwMCUgLSA0cmVtKSknXG4gICAgc3R5bGVDb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoY2FsYygtMTAwJSAtIDFyZW0pKSdcbiAgICBzdHlsZVNjcm9sbC5maW5pc2hQdWxsVXAoKVxuICB9KVxuICBtZFNjcm9sbC5vbigncHVsbGluZ0Rvd24nLCBmdW5jdGlvbiAoKSB7XG4gICAgbWRDb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknXG4gICAgc3R5bGVDb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknXG4gICAgbWRTY3JvbGwuZmluaXNoUHVsbERvd24oKVxuICB9KVxufVxuIiwiLy8g5qC55o2u5a2X56ym57uT5p2f6K6+572u6Ze06ZqU5pe26Ze0XG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50ZXJ2YWwoc3RyOiBzdHJpbmcsIGludGVydmFsID0gMTYpOiBudW1iZXIge1xuICBpZiAoL1xcRFtcXCxdXFxzJC8udGVzdChzdHIpKSByZXR1cm4gaW50ZXJ2YWwgKiAyMFxuICBpZiAoL1teXFwvXVxcblxcbiQvLnRlc3Qoc3RyKSkgcmV0dXJuIGludGVydmFsICogNDBcbiAgaWYgKC9bXFwuXFw/XFwhXVxccyQvLnRlc3Qoc3RyKSkgcmV0dXJuIGludGVydmFsICogNjBcbiAgcmV0dXJuIDBcbn1cblxuLy8gY3NzIOWGmeWFpSBzdHlsZVxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVN0eWxlKHN0eWxlOiBzdHJpbmcsIGVsOiBFbGVtZW50KTogdm9pZCB7XG4gIGVsLmlubmVySFRNTCA9IHN0eWxlXG59XG5cbi8vIOaWsOW7uuW5tui/lOWbnuWuueWZqFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcihjb250YWluZXI6IEVsZW1lbnQsIGlkOiBzdHJpbmcpOiBFbGVtZW50IHtcblxuICBpZiAoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCMke2lkfWApID09PSBudWxsKSB7XG4gICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBlbC5pZCA9IGlkXG5cbiAgICBsZXQgcHJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJylcbiAgICBwcmUuaWQgPSBgJHtpZH0tcHJlYFxuXG4gICAgZWwuYXBwZW5kKHByZSlcblxuICAgIGNvbnRhaW5lci5hcHBlbmQoZWwpXG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCMke2lkfS1wcmVgKVxufVxuXG4vLyDliKTmlq3mmK/lkKbkuLrnp7vliqjorr7lpIdcbmV4cG9ydCBmdW5jdGlvbiBpc01vYmlsZSgpOiBib29sZWFuIHtcbiAgcmV0dXJuIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA/IHRydWUgOiBmYWxzZVxufVxuXG4vLyDorr7nva7lubbojrflj5Ygc3R5bGUg5qCH562+XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3R5bGVFbCgpOiBFbGVtZW50IHtcbiAgY29uc3QgbmV3U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIGNvbnN0IGhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJylcbiAgaGVhZC5hcHBlbmRDaGlsZChuZXdTdHlsZSlcbiAgY29uc3QgYWxsU3R5bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpXG5cbiAgcmV0dXJuIGFsbFN0eWxlW2FsbFN0eWxlLmxlbmd0aCAtIDFdXG59XG4iLCJpbXBvcnQge0xvYWRQYXJhbXN9IGZyb20gXCIuL2FuaW1hdGVSZXN1bWUvaW50ZXJmYWNlXCI7XG5pbXBvcnQgQW5pbWF0ZVJlc3VtZSBmcm9tICcuL2FuaW1hdGVSZXN1bWUvaW5kZXgnXG5pbXBvcnQge3N0eWxlMSwgc3R5bGUyfSBmcm9tICcuLi9sb2FkL3N0eWxlJ1xuaW1wb3J0IHtyZXN1bWV9IGZyb20gXCIuLi9sb2FkL3Jlc3VtZVwiO1xuXG5jb25zdCBsb2FkMTogTG9hZFBhcmFtcyA9IHtcbiAgbG9hZDogc3R5bGUxLFxuICB0eXBlOiAnY3NzJyxcbiAgaWQ6ICdzdHlsZS1jb250YWluZXInLFxuICByZXdyaXRlOiB0cnVlXG59XG5jb25zdCBsb2FkMjogTG9hZFBhcmFtcyA9IHtcbiAgbG9hZDogcmVzdW1lLFxuICB0eXBlOiAnbWQnLFxuICBpZDogJ3Jlc3VtZS1jb250YWluZXInLFxuICByZXdyaXRlOiB0cnVlXG59XG5jb25zdCBsb2FkMzogTG9hZFBhcmFtcyA9IHtcbiAgbG9hZDogc3R5bGUyLFxuICB0eXBlOiAnY3NzJyxcbiAgaWQ6ICdzdHlsZS1jb250YWluZXInLFxuICByZXdyaXRlOiBmYWxzZVxufVxuXG5jb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYW5pbWF0ZS1jb250YWluZXInKVxuXG5jb25zdCBhciA9IG5ldyBBbmltYXRlUmVzdW1lKGNvbnRhaW5lciwge1xuICBjb250ZW50OiBbbG9hZDEsIGxvYWQyLCBsb2FkM10sXG4gIG1vYmlsZUFuaW1hdGU6IHtcbiAgICBzdHlsZUlEOiAnc3R5bGUtY29udGFpbmVyJyxcbiAgICByZXN1bWVJRDogJ3Jlc3VtZS1jb250YWluZXInXG4gIH1cbn0pXG5cbmNvbnN0IHNraXBCdG46IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NraXAtYnRuJylcblxuc2tpcEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgYXIuc2tpcCgpXG4gIHNraXBCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xufSlcblxuYXIuYW5pbWF0ZSgoKSA9PiB7XG4gIHNraXBCdG4uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xufSlcblxuIl19"}